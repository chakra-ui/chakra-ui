{
  "Root": {
    "props": {
      "icon": {
        "type": "React.ReactNode",
        "isRequired": false
      },
      "disabled": {
        "type": "boolean | undefined",
        "isRequired": false
      },
      "invalid": {
        "type": "boolean | undefined",
        "isRequired": false
      },
      "as": {
        "type": "React.ElementType",
        "isRequired": false,
        "description": "The underlying element to render."
      },
      "asChild": {
        "type": "boolean",
        "isRequired": false,
        "description": "Use the provided child element as the default rendered element, combining their props and behavior."
      },
      "unstyled": {
        "type": "boolean",
        "isRequired": false,
        "description": "Whether to remove the component's style."
      },
      "colorPalette": {
        "defaultValue": "gray",
        "type": "\"gray\" | \"red\" | \"orange\" | \"yellow\" | \"green\" | \"teal\" | \"blue\" | \"cyan\" | \"purple\" | \"pink\"",
        "isRequired": false,
        "description": "The color palette of the component"
      },
      "variant": {
        "type": "\"outline\" | \"subtle\" | \"plain\"",
        "defaultValue": "outline",
        "isRequired": false,
        "description": "The variant of the component"
      },
      "size": {
        "type": "\"xs\" | \"sm\" | \"md\" | \"lg\" | \"xl\"",
        "defaultValue": "md",
        "isRequired": false,
        "description": "The size of the component"
      }
    }
  },
  "Field": {
    "props": {
      "items": {
        "type": "Array<string | NativeSelectItem>",
        "isRequired": false
      },
      "placeholder": {
        "type": "string | undefined",
        "isRequired": false
      },
      "as": {
        "type": "React.ElementType",
        "isRequired": false,
        "description": "The underlying element to render."
      },
      "asChild": {
        "type": "boolean",
        "isRequired": false,
        "description": "Use the provided child element as the default rendered element, combining their props and behavior."
      }
    }
  },
  "Indicator": {
    "props": {
      "as": {
        "type": "React.ElementType",
        "isRequired": false,
        "description": "The underlying element to render."
      },
      "asChild": {
        "type": "boolean",
        "isRequired": false,
        "description": "Use the provided child element as the default rendered element, combining their props and behavior."
      }
    }
  }
}