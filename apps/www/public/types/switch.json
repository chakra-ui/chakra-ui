{
  "Root": {
    "props": {
      "as": {
        "type": "React.ElementType",
        "isRequired": false,
        "description": "The underlying element to render."
      },
      "asChild": {
        "type": "boolean",
        "isRequired": false,
        "description": "Use the provided child element as the default rendered element, combining their props and behavior."
      },
      "unstyled": {
        "type": "boolean",
        "isRequired": false,
        "description": "Whether to remove the component's style."
      },
      "checked": {
        "type": "boolean",
        "isRequired": false,
        "description": "The controlled checked state of the switch"
      },
      "disabled": {
        "type": "boolean",
        "isRequired": false,
        "description": "Whether the switch is disabled."
      },
      "ids": {
        "type": "Partial<{ root: string; hiddenInput: string; control: string; label: string; thumb: string }>",
        "isRequired": false,
        "description": "The ids of the elements in the switch. Useful for composition."
      },
      "invalid": {
        "type": "boolean",
        "isRequired": false,
        "description": "If `true`, the switch is marked as invalid."
      },
      "label": {
        "type": "string",
        "isRequired": false,
        "description": "Specifies the localized strings that identifies the accessibility elements and their states"
      },
      "name": {
        "type": "string",
        "isRequired": false,
        "description": "The name of the input field in a switch\n(Useful for form submission)."
      },
      "onCheckedChange": {
        "type": "(details: CheckedChangeDetails) => void",
        "isRequired": false,
        "description": "Function to call when the switch is clicked."
      },
      "readOnly": {
        "type": "boolean",
        "isRequired": false,
        "description": "Whether the switch is read-only"
      },
      "required": {
        "type": "boolean",
        "isRequired": false,
        "description": "If `true`, the switch input is marked as required,"
      },
      "value": {
        "type": "string | number",
        "isRequired": false,
        "defaultValue": "\"on\"",
        "description": "The value of switch input. Useful for form submission."
      },
      "colorPalette": {
        "defaultValue": "gray",
        "type": "\"gray\" | \"red\" | \"orange\" | \"yellow\" | \"green\" | \"teal\" | \"blue\" | \"cyan\" | \"purple\" | \"pink\"",
        "isRequired": false,
        "description": "The color palette of the component"
      },
      "variant": {
        "type": "\"solid\" | \"raised\"",
        "defaultValue": "solid",
        "isRequired": false,
        "description": "The variant of the component"
      },
      "size": {
        "type": "\"xs\" | \"sm\" | \"md\" | \"lg\"",
        "defaultValue": "md",
        "isRequired": false,
        "description": "The size of the component"
      }
    },
    "element": "HTMLLabelElement"
  },
  "RootProvider": {
    "props": {
      "as": {
        "type": "React.ElementType",
        "isRequired": false,
        "description": "The underlying element to render."
      },
      "asChild": {
        "type": "boolean",
        "isRequired": false,
        "description": "Use the provided child element as the default rendered element, combining their props and behavior."
      },
      "value": {
        "type": "UseSwitchReturn",
        "isRequired": true
      }
    },
    "element": "HTMLLabelElement"
  },
  "Control": {
    "props": {
      "as": {
        "type": "React.ElementType",
        "isRequired": false,
        "description": "The underlying element to render."
      },
      "asChild": {
        "type": "boolean",
        "isRequired": false,
        "description": "Use the provided child element as the default rendered element, combining their props and behavior."
      }
    },
    "element": "HTMLSpanElement"
  },
  "Label": {
    "props": {
      "as": {
        "type": "React.ElementType",
        "isRequired": false,
        "description": "The underlying element to render."
      },
      "asChild": {
        "type": "boolean",
        "isRequired": false,
        "description": "Use the provided child element as the default rendered element, combining their props and behavior."
      }
    },
    "element": "HTMLSpanElement"
  },
  "Indicator": {
    "props": {
      "fallback": {
        "type": "React.ReactNode | undefined",
        "isRequired": false
      },
      "as": {
        "type": "React.ElementType",
        "isRequired": false,
        "description": "The underlying element to render."
      },
      "asChild": {
        "type": "boolean",
        "isRequired": false,
        "description": "Use the provided child element as the default rendered element, combining their props and behavior."
      }
    }
  },
  "ThumbIndicator": {
    "props": {
      "fallback": {
        "type": "React.ReactNode | undefined",
        "isRequired": false
      },
      "as": {
        "type": "React.ElementType",
        "isRequired": false,
        "description": "The underlying element to render."
      },
      "asChild": {
        "type": "boolean",
        "isRequired": false,
        "description": "Use the provided child element as the default rendered element, combining their props and behavior."
      }
    }
  },
  "Thumb": {
    "props": {
      "as": {
        "type": "React.ElementType",
        "isRequired": false,
        "description": "The underlying element to render."
      },
      "asChild": {
        "type": "boolean",
        "isRequired": false,
        "description": "Use the provided child element as the default rendered element, combining their props and behavior."
      }
    },
    "element": "HTMLSpanElement"
  },
  "HiddenInput": {
    "props": {
      "asChild": {
        "type": "boolean",
        "isRequired": false,
        "description": "Use the provided child element as the default rendered element, combining their props and behavior."
      }
    },
    "element": "HTMLInputElement"
  }
}