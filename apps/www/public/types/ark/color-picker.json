{
  "AreaBackground": {
    "props": {
      "asChild": {
        "type": "boolean",
        "isRequired": false,
        "description": "Use the provided child element as the default rendered element, combining their props and behavior."
      }
    },
    "element": "HTMLDivElement"
  },
  "Area": {
    "props": {
      "asChild": {
        "type": "boolean",
        "isRequired": false,
        "description": "Use the provided child element as the default rendered element, combining their props and behavior."
      },
      "xChannel": {
        "type": "ColorChannel",
        "isRequired": false
      },
      "yChannel": {
        "type": "ColorChannel",
        "isRequired": false
      }
    },
    "element": "HTMLDivElement"
  },
  "AreaThumb": {
    "props": {
      "asChild": {
        "type": "boolean",
        "isRequired": false,
        "description": "Use the provided child element as the default rendered element, combining their props and behavior."
      }
    },
    "element": "HTMLDivElement"
  },
  "ChannelInput": {
    "props": {
      "channel": {
        "type": "ExtendedColorChannel",
        "isRequired": true
      },
      "asChild": {
        "type": "boolean",
        "isRequired": false,
        "description": "Use the provided child element as the default rendered element, combining their props and behavior."
      },
      "orientation": {
        "type": "Orientation",
        "isRequired": false
      }
    },
    "element": "HTMLInputElement"
  },
  "ChannelSliderLabel": {
    "props": {
      "asChild": {
        "type": "boolean",
        "isRequired": false,
        "description": "Use the provided child element as the default rendered element, combining their props and behavior."
      }
    },
    "element": "HTMLLabelElement"
  },
  "ChannelSlider": {
    "props": {
      "channel": {
        "type": "ColorChannel",
        "isRequired": true
      },
      "asChild": {
        "type": "boolean",
        "isRequired": false,
        "description": "Use the provided child element as the default rendered element, combining their props and behavior."
      },
      "orientation": {
        "type": "Orientation",
        "isRequired": false
      }
    },
    "element": "HTMLDivElement"
  },
  "ChannelSliderThumb": {
    "props": {
      "asChild": {
        "type": "boolean",
        "isRequired": false,
        "description": "Use the provided child element as the default rendered element, combining their props and behavior."
      }
    },
    "element": "HTMLDivElement"
  },
  "ChannelSliderTrack": {
    "props": {
      "asChild": {
        "type": "boolean",
        "isRequired": false,
        "description": "Use the provided child element as the default rendered element, combining their props and behavior."
      }
    },
    "element": "HTMLDivElement"
  },
  "ChannelSliderValueText": {
    "props": {
      "asChild": {
        "type": "boolean",
        "isRequired": false,
        "description": "Use the provided child element as the default rendered element, combining their props and behavior."
      }
    },
    "element": "HTMLSpanElement"
  },
  "Content": {
    "props": {
      "asChild": {
        "type": "boolean",
        "isRequired": false,
        "description": "Use the provided child element as the default rendered element, combining their props and behavior."
      }
    },
    "element": "HTMLDivElement"
  },
  "Control": {
    "props": {
      "asChild": {
        "type": "boolean",
        "isRequired": false,
        "description": "Use the provided child element as the default rendered element, combining their props and behavior."
      }
    },
    "element": "HTMLDivElement"
  },
  "EyeDropperTrigger": {
    "props": {
      "asChild": {
        "type": "boolean",
        "isRequired": false,
        "description": "Use the provided child element as the default rendered element, combining their props and behavior."
      }
    },
    "element": "HTMLButtonElement"
  },
  "FormatSelect": {
    "props": {
      "asChild": {
        "type": "boolean",
        "isRequired": false,
        "description": "Use the provided child element as the default rendered element, combining their props and behavior."
      }
    },
    "element": "HTMLSelectElement"
  },
  "FormatTrigger": {
    "props": {
      "asChild": {
        "type": "boolean",
        "isRequired": false,
        "description": "Use the provided child element as the default rendered element, combining their props and behavior."
      }
    },
    "element": "HTMLButtonElement"
  },
  "HiddenInput": {
    "props": {
      "asChild": {
        "type": "boolean",
        "isRequired": false,
        "description": "Use the provided child element as the default rendered element, combining their props and behavior."
      }
    },
    "element": "HTMLInputElement"
  },
  "Label": {
    "props": {
      "asChild": {
        "type": "boolean",
        "isRequired": false,
        "description": "Use the provided child element as the default rendered element, combining their props and behavior."
      }
    },
    "element": "HTMLLabelElement"
  },
  "Positioner": {
    "props": {
      "asChild": {
        "type": "boolean",
        "isRequired": false,
        "description": "Use the provided child element as the default rendered element, combining their props and behavior."
      }
    },
    "element": "HTMLDivElement"
  },
  "Root": {
    "props": {
      "asChild": {
        "type": "boolean",
        "isRequired": false,
        "description": "Use the provided child element as the default rendered element, combining their props and behavior."
      },
      "closeOnSelect": {
        "type": "boolean",
        "isRequired": false,
        "defaultValue": "false",
        "description": "Whether to close the color picker when a swatch is selected"
      },
      "defaultOpen": {
        "type": "boolean",
        "isRequired": false,
        "description": "The initial open state of the color picker when it is first rendered.\nUse when you do not need to control its open state."
      },
      "defaultValue": {
        "type": "Color",
        "isRequired": false,
        "description": "The initial value of the color picker when it is first rendered.\nUse when you do not need to control the state of the color picker."
      },
      "disabled": {
        "type": "boolean",
        "isRequired": false,
        "description": "Whether the color picker is disabled"
      },
      "format": {
        "type": "ColorFormat",
        "isRequired": false,
        "defaultValue": "\"rgba\"",
        "description": "The color format to use"
      },
      "id": {
        "type": "string",
        "isRequired": false,
        "description": "The unique identifier of the machine."
      },
      "ids": {
        "type": "Partial<{ root: string; control: string; trigger: string; label: string; input: string; hiddenInput: string; content: string; area: string; areaGradient: string; positioner: string; formatSelect: string; areaThumb: string; channelInput(id: string): string; channelSliderTrack(id: ColorChannel): string; channelSliderT...",
        "isRequired": false,
        "description": "The ids of the elements in the color picker. Useful for composition."
      },
      "immediate": {
        "type": "boolean",
        "isRequired": false,
        "description": "Whether to synchronize the present change immediately or defer it to the next frame"
      },
      "initialFocusEl": {
        "type": "() => HTMLElement | null",
        "isRequired": false,
        "description": "The initial focus element when the color picker is opened."
      },
      "invalid": {
        "type": "boolean",
        "isRequired": false,
        "description": "Whether the color picker is invalid"
      },
      "lazyMount": {
        "type": "boolean",
        "isRequired": false,
        "defaultValue": "false",
        "description": "Whether to enable lazy mounting"
      },
      "name": {
        "type": "string",
        "isRequired": false,
        "description": "The name for the form input"
      },
      "onExitComplete": {
        "type": "() => void",
        "isRequired": false,
        "description": "Function called when the animation ends in the closed state"
      },
      "onFocusOutside": {
        "type": "(event: FocusOutsideEvent) => void",
        "isRequired": false,
        "description": "Function called when the focus is moved outside the component"
      },
      "onFormatChange": {
        "type": "(details: FormatChangeDetails) => void",
        "isRequired": false,
        "description": "Function called when the color format changes"
      },
      "onInteractOutside": {
        "type": "(event: InteractOutsideEvent) => void",
        "isRequired": false,
        "description": "Function called when an interaction happens outside the component"
      },
      "onOpenChange": {
        "type": "(details: OpenChangeDetails) => void",
        "isRequired": false,
        "description": "Handler that is called when the user opens or closes the color picker."
      },
      "onPointerDownOutside": {
        "type": "(event: PointerDownOutsideEvent) => void",
        "isRequired": false,
        "description": "Function called when the pointer is pressed down outside the component"
      },
      "onValueChange": {
        "type": "(details: ValueChangeDetails) => void",
        "isRequired": false,
        "description": "Handler that is called when the value changes, as the user drags."
      },
      "onValueChangeEnd": {
        "type": "(details: ValueChangeDetails) => void",
        "isRequired": false,
        "description": "Handler that is called when the user stops dragging."
      },
      "open": {
        "type": "boolean",
        "isRequired": false,
        "description": "Whether the color picker is open"
      },
      "openAutoFocus": {
        "type": "boolean",
        "isRequired": false,
        "defaultValue": "true",
        "description": "Whether to auto focus the color picker when it is opened"
      },
      "positioning": {
        "type": "PositioningOptions",
        "isRequired": false,
        "description": "The positioning options for the color picker"
      },
      "present": {
        "type": "boolean",
        "isRequired": false,
        "description": "Whether the node is present (controlled by the user)"
      },
      "readOnly": {
        "type": "boolean",
        "isRequired": false,
        "description": "Whether the color picker is read-only"
      },
      "required": {
        "type": "boolean",
        "isRequired": false,
        "description": "Whether the color picker is required"
      },
      "unmountOnExit": {
        "type": "boolean",
        "isRequired": false,
        "defaultValue": "false",
        "description": "Whether to unmount on exit."
      },
      "value": {
        "type": "Color",
        "isRequired": false,
        "defaultValue": "#000000",
        "description": "The current color value"
      }
    },
    "element": "HTMLDivElement"
  },
  "RootProvider": {
    "props": {
      "value": {
        "type": "UseColorPickerReturn",
        "isRequired": true
      },
      "asChild": {
        "type": "boolean",
        "isRequired": false,
        "description": "Use the provided child element as the default rendered element, combining their props and behavior."
      },
      "immediate": {
        "type": "boolean",
        "isRequired": false,
        "description": "Whether to synchronize the present change immediately or defer it to the next frame"
      },
      "lazyMount": {
        "type": "boolean",
        "isRequired": false,
        "defaultValue": "false",
        "description": "Whether to enable lazy mounting"
      },
      "onExitComplete": {
        "type": "() => void",
        "isRequired": false,
        "description": "Function called when the animation ends in the closed state"
      },
      "present": {
        "type": "boolean",
        "isRequired": false,
        "description": "Whether the node is present (controlled by the user)"
      },
      "unmountOnExit": {
        "type": "boolean",
        "isRequired": false,
        "defaultValue": "false",
        "description": "Whether to unmount on exit."
      }
    },
    "element": "HTMLDivElement"
  },
  "SwatchGroup": {
    "props": {
      "asChild": {
        "type": "boolean",
        "isRequired": false,
        "description": "Use the provided child element as the default rendered element, combining their props and behavior."
      }
    },
    "element": "HTMLDivElement"
  },
  "SwatchIndicator": {
    "props": {
      "asChild": {
        "type": "boolean",
        "isRequired": false,
        "description": "Use the provided child element as the default rendered element, combining their props and behavior."
      }
    },
    "element": "HTMLDivElement"
  },
  "Swatch": {
    "props": {
      "value": {
        "type": "string | Color",
        "isRequired": true,
        "description": "The color value"
      },
      "asChild": {
        "type": "boolean",
        "isRequired": false,
        "description": "Use the provided child element as the default rendered element, combining their props and behavior."
      },
      "respectAlpha": {
        "type": "boolean",
        "isRequired": false,
        "description": "Whether to include the alpha channel in the color"
      }
    },
    "element": "HTMLDivElement"
  },
  "SwatchTrigger": {
    "props": {
      "value": {
        "type": "string | Color",
        "isRequired": true,
        "description": "The color value"
      },
      "asChild": {
        "type": "boolean",
        "isRequired": false,
        "description": "Use the provided child element as the default rendered element, combining their props and behavior."
      },
      "disabled": {
        "type": "boolean",
        "isRequired": false,
        "description": "Whether the swatch trigger is disabled"
      }
    },
    "element": "HTMLButtonElement"
  },
  "TransparencyGrid": {
    "props": {
      "asChild": {
        "type": "boolean",
        "isRequired": false,
        "description": "Use the provided child element as the default rendered element, combining their props and behavior."
      },
      "size": {
        "type": "string",
        "isRequired": false
      }
    },
    "element": "HTMLDivElement"
  },
  "Trigger": {
    "props": {
      "asChild": {
        "type": "boolean",
        "isRequired": false,
        "description": "Use the provided child element as the default rendered element, combining their props and behavior."
      }
    },
    "element": "HTMLButtonElement"
  },
  "ValueSwatch": {
    "props": {
      "asChild": {
        "type": "boolean",
        "isRequired": false,
        "description": "Use the provided child element as the default rendered element, combining their props and behavior."
      },
      "respectAlpha": {
        "type": "boolean",
        "isRequired": false,
        "description": "Whether to include the alpha channel in the color"
      }
    },
    "element": "HTMLDivElement"
  },
  "ValueText": {
    "props": {
      "asChild": {
        "type": "boolean",
        "isRequired": false,
        "description": "Use the provided child element as the default rendered element, combining their props and behavior."
      }
    },
    "element": "HTMLDivElement"
  },
  "View": {
    "props": {
      "format": {
        "type": "ColorFormat",
        "isRequired": true
      },
      "asChild": {
        "type": "boolean",
        "isRequired": false,
        "description": "Use the provided child element as the default rendered element, combining their props and behavior."
      }
    },
    "element": "HTMLDivElement"
  }
}