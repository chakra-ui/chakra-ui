{
  "Control": {
    "props": {
      "as": {
        "type": "React.ElementType",
        "isRequired": false,
        "description": "The underlying element to render."
      },
      "asChild": {
        "type": "boolean",
        "isRequired": false,
        "description": "Use the provided child element as the default rendered element, combining their props and behavior."
      }
    },
    "element": "HTMLDivElement"
  },
  "Label": {
    "props": {
      "as": {
        "type": "React.ElementType",
        "isRequired": false,
        "description": "The underlying element to render."
      },
      "asChild": {
        "type": "boolean",
        "isRequired": false,
        "description": "Use the provided child element as the default rendered element, combining their props and behavior."
      }
    },
    "element": "HTMLLabelElement"
  },
  "Marker": {
    "props": {
      "as": {
        "type": "React.ElementType",
        "isRequired": false,
        "description": "The underlying element to render."
      },
      "asChild": {
        "type": "boolean",
        "isRequired": false,
        "description": "Use the provided child element as the default rendered element, combining their props and behavior."
      },
      "value": {
        "type": "number",
        "isRequired": true
      }
    },
    "element": "HTMLSpanElement"
  },
  "MarkerIndicator": {
    "props": {
      "as": {
        "type": "React.ElementType",
        "isRequired": false,
        "description": "The underlying element to render."
      },
      "asChild": {
        "type": "boolean",
        "isRequired": false,
        "description": "Use the provided child element as the default rendered element, combining their props and behavior."
      }
    }
  },
  "Range": {
    "props": {
      "as": {
        "type": "React.ElementType",
        "isRequired": false,
        "description": "The underlying element to render."
      },
      "asChild": {
        "type": "boolean",
        "isRequired": false,
        "description": "Use the provided child element as the default rendered element, combining their props and behavior."
      }
    },
    "element": "HTMLDivElement"
  },
  "Root": {
    "props": {
      "as": {
        "type": "React.ElementType",
        "isRequired": false,
        "description": "The underlying element to render."
      },
      "asChild": {
        "type": "boolean",
        "isRequired": false,
        "description": "Use the provided child element as the default rendered element, combining their props and behavior."
      },
      "unstyled": {
        "type": "boolean",
        "isRequired": false,
        "description": "Whether to remove the component's style."
      },
      "aria-label": {
        "type": "string[]",
        "isRequired": false,
        "description": "The aria-label of each slider thumb. Useful for providing an accessible name to the slider"
      },
      "aria-labelledby": {
        "type": "string[]",
        "isRequired": false,
        "description": "The `id` of the elements that labels each slider thumb. Useful for providing an accessible name to the slider"
      },
      "defaultValue": {
        "type": "number[]",
        "isRequired": false,
        "description": "The initial value of the slider when rendered.\nUse when you don't need to control the value of the slider."
      },
      "disabled": {
        "type": "boolean",
        "isRequired": false,
        "description": "Whether the slider is disabled"
      },
      "form": {
        "type": "string",
        "isRequired": false,
        "description": "The associate form of the underlying input element."
      },
      "getAriaValueText": {
        "type": "(details: ValueTextDetails) => string",
        "isRequired": false,
        "description": "Function that returns a human readable value for the slider thumb"
      },
      "id": {
        "type": "string",
        "isRequired": false,
        "description": "The unique identifier of the machine."
      },
      "ids": {
        "type": "Partial<{\n  root: string\n  thumb(index: number): string\n  hiddenInput(index: number): string\n  control: string\n  track: string\n  range: string\n  label: string\n  valueText: string\n  marker(index: number): string\n}>",
        "isRequired": false,
        "description": "The ids of the elements in the slider. Useful for composition."
      },
      "invalid": {
        "type": "boolean",
        "isRequired": false,
        "description": "Whether the slider is invalid"
      },
      "max": {
        "type": "number",
        "isRequired": false,
        "defaultValue": "100",
        "description": "The maximum value of the slider"
      },
      "min": {
        "type": "number",
        "isRequired": false,
        "defaultValue": "0",
        "description": "The minimum value of the slider"
      },
      "minStepsBetweenThumbs": {
        "type": "number",
        "isRequired": false,
        "defaultValue": "0",
        "description": "The minimum permitted steps between multiple thumbs.\n\n`minStepsBetweenThumbs` * `step` should reflect the gap between the thumbs.\n\n- `step: 1` and `minStepsBetweenThumbs: 10` => gap is `10`\n- `step: 10` and `minStepsBetweenThumbs: 2` => gap is `20`"
      },
      "name": {
        "type": "string",
        "isRequired": false,
        "description": "The name associated with each slider thumb (when used in a form)"
      },
      "onFocusChange": {
        "type": "(details: FocusChangeDetails) => void",
        "isRequired": false,
        "description": "Function invoked when the slider's focused index changes"
      },
      "onValueChange": {
        "type": "(details: ValueChangeDetails) => void",
        "isRequired": false,
        "description": "Function invoked when the value of the slider changes"
      },
      "onValueChangeEnd": {
        "type": "(details: ValueChangeDetails) => void",
        "isRequired": false,
        "description": "Function invoked when the slider value change is done"
      },
      "orientation": {
        "type": "\"vertical\" | \"horizontal\"",
        "isRequired": false,
        "defaultValue": "horizontal",
        "description": "The orientation of the component"
      },
      "origin": {
        "type": "'center' | 'end' | 'start'",
        "isRequired": false,
        "defaultValue": "\"start\"",
        "description": "The origin of the slider range. The track is filled from the origin\nto the thumb for single values.\n- \"start\": Useful when the value represents an absolute value\n- \"center\": Useful when the value represents an offset (relative)\n- \"end\": Useful when the value represents an offset from the end"
      },
      "readOnly": {
        "type": "boolean",
        "isRequired": false,
        "description": "Whether the slider is read-only"
      },
      "step": {
        "type": "number",
        "isRequired": false,
        "defaultValue": "1",
        "description": "The step value of the slider"
      },
      "thumbAlignment": {
        "type": "'center' | 'contain'",
        "isRequired": false,
        "defaultValue": "\"contain\"",
        "description": "The alignment of the slider thumb relative to the track\n- `center`: the thumb will extend beyond the bounds of the slider track.\n- `contain`: the thumb will be contained within the bounds of the track."
      },
      "thumbSize": {
        "type": "{ width: number; height: number }",
        "isRequired": false,
        "description": "The slider thumbs dimensions"
      },
      "value": {
        "type": "number[]",
        "isRequired": false,
        "description": "The controlled value of the slider"
      },
      "colorPalette": {
        "defaultValue": "gray",
        "type": "\"gray\" | \"red\" | \"orange\" | \"yellow\" | \"green\" | \"teal\" | \"blue\" | \"cyan\" | \"purple\" | \"pink\"",
        "isRequired": false,
        "description": "The color palette of the component"
      },
      "size": {
        "type": "\"sm\" | \"md\" | \"lg\"",
        "defaultValue": "md",
        "isRequired": false,
        "description": "The size of the component"
      },
      "variant": {
        "type": "\"outline\" | \"solid\"",
        "defaultValue": "outline",
        "isRequired": false,
        "description": "The variant of the component"
      }
    },
    "element": "HTMLDivElement"
  },
  "RootProvider": {
    "props": {
      "as": {
        "type": "React.ElementType",
        "isRequired": false,
        "description": "The underlying element to render."
      },
      "asChild": {
        "type": "boolean",
        "isRequired": false,
        "description": "Use the provided child element as the default rendered element, combining their props and behavior."
      },
      "value": {
        "type": "UseSliderReturn",
        "isRequired": true
      }
    },
    "element": "HTMLDivElement"
  },
  "Thumb": {
    "props": {
      "as": {
        "type": "React.ElementType",
        "isRequired": false,
        "description": "The underlying element to render."
      },
      "asChild": {
        "type": "boolean",
        "isRequired": false,
        "description": "Use the provided child element as the default rendered element, combining their props and behavior."
      },
      "index": {
        "type": "number",
        "isRequired": true
      },
      "name": {
        "type": "string",
        "isRequired": false
      }
    },
    "element": "HTMLDivElement"
  },
  "Track": {
    "props": {
      "as": {
        "type": "React.ElementType",
        "isRequired": false,
        "description": "The underlying element to render."
      },
      "asChild": {
        "type": "boolean",
        "isRequired": false,
        "description": "Use the provided child element as the default rendered element, combining their props and behavior."
      }
    },
    "element": "HTMLDivElement"
  },
  "ValueText": {
    "props": {
      "as": {
        "type": "React.ElementType",
        "isRequired": false,
        "description": "The underlying element to render."
      },
      "asChild": {
        "type": "boolean",
        "isRequired": false,
        "description": "Use the provided child element as the default rendered element, combining their props and behavior."
      }
    },
    "element": "HTMLDivElement"
  },
  "MarkerGroup": {
    "props": {
      "as": {
        "type": "React.ElementType",
        "isRequired": false,
        "description": "The underlying element to render."
      },
      "asChild": {
        "type": "boolean",
        "isRequired": false,
        "description": "Use the provided child element as the default rendered element, combining their props and behavior."
      }
    },
    "element": "HTMLDivElement"
  },
  "DraggingIndicator": {
    "props": {
      "as": {
        "type": "React.ElementType",
        "isRequired": false,
        "description": "The underlying element to render."
      },
      "asChild": {
        "type": "boolean",
        "isRequired": false,
        "description": "Use the provided child element as the default rendered element, combining their props and behavior."
      }
    },
    "element": "HTMLSpanElement"
  },
  "HiddenInput": {
    "props": {
      "asChild": {
        "type": "boolean",
        "isRequired": false,
        "description": "Use the provided child element as the default rendered element, combining their props and behavior."
      }
    },
    "element": "HTMLInputElement"
  }
}