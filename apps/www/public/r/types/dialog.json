{
  "Backdrop": {
    "props": {
      "as": {
        "type": "React.ElementType",
        "isRequired": false,
        "description": "The underlying element to render."
      },
      "asChild": {
        "type": "boolean",
        "isRequired": false,
        "description": "Use the provided child element as the default rendered element, combining their props and behavior."
      }
    },
    "element": "HTMLDivElement"
  },
  "Body": {
    "props": {
      "as": {
        "type": "React.ElementType",
        "isRequired": false,
        "description": "The underlying element to render."
      },
      "asChild": {
        "type": "boolean",
        "isRequired": false,
        "description": "Use the provided child element as the default rendered element, combining their props and behavior."
      }
    }
  },
  "CloseTrigger": {
    "props": {
      "as": {
        "type": "React.ElementType",
        "isRequired": false,
        "description": "The underlying element to render."
      },
      "asChild": {
        "type": "boolean",
        "isRequired": false,
        "description": "Use the provided child element as the default rendered element, combining their props and behavior."
      }
    },
    "element": "HTMLButtonElement"
  },
  "Content": {
    "props": {
      "portalled": {
        "type": "boolean",
        "isRequired": false
      },
      "portalRef": {
        "type": "React.RefObject<HTMLElement>",
        "isRequired": false
      },
      "backdrop": {
        "type": "boolean",
        "isRequired": false
      },
      "as": {
        "type": "React.ElementType",
        "isRequired": false,
        "description": "The underlying element to render."
      },
      "asChild": {
        "type": "boolean",
        "isRequired": false,
        "description": "Use the provided child element as the default rendered element, combining their props and behavior."
      }
    },
    "element": "HTMLDivElement"
  },
  "Footer": {
    "props": {
      "as": {
        "type": "React.ElementType",
        "isRequired": false,
        "description": "The underlying element to render."
      },
      "asChild": {
        "type": "boolean",
        "isRequired": false,
        "description": "Use the provided child element as the default rendered element, combining their props and behavior."
      }
    }
  },
  "Root": {
    "props": {
      "as": {
        "type": "React.ElementType",
        "isRequired": false,
        "description": "The underlying element to render."
      },
      "asChild": {
        "type": "boolean",
        "isRequired": false,
        "description": "Use the provided child element as the default rendered element, combining their props and behavior."
      },
      "unstyled": {
        "type": "boolean",
        "isRequired": false,
        "description": "Whether to remove the component's style."
      },
      "aria-label": {
        "type": "string",
        "isRequired": false,
        "description": "Human readable label for the dialog, in event the dialog title is not rendered"
      },
      "closeOnEscape": {
        "type": "boolean",
        "isRequired": false,
        "defaultValue": "true",
        "description": "Whether to close the dialog when the escape key is pressed"
      },
      "closeOnInteractOutside": {
        "type": "boolean",
        "isRequired": false,
        "defaultValue": "true",
        "description": "Whether to close the dialog when the outside is clicked"
      },
      "defaultOpen": {
        "type": "boolean",
        "isRequired": false,
        "defaultValue": "false",
        "description": "The initial open state of the dialog when rendered.\nUse when you don't need to control the open state of the dialog."
      },
      "finalFocusEl": {
        "type": "() => MaybeElement",
        "isRequired": false,
        "description": "Element to receive focus when the dialog is closed"
      },
      "id": {
        "type": "string",
        "isRequired": false,
        "description": "The unique identifier of the machine."
      },
      "ids": {
        "type": "Partial<{\n  trigger: string\n  positioner: string\n  backdrop: string\n  content: string\n  closeTrigger: string\n  title: string\n  description: string\n}>",
        "isRequired": false,
        "description": "The ids of the elements in the dialog. Useful for composition."
      },
      "immediate": {
        "type": "boolean",
        "isRequired": false,
        "description": "Whether to synchronize the present change immediately or defer it to the next frame"
      },
      "initialFocusEl": {
        "type": "() => MaybeElement",
        "isRequired": false,
        "description": "Element to receive focus when the dialog is opened"
      },
      "lazyMount": {
        "type": "boolean",
        "isRequired": false,
        "defaultValue": "false",
        "description": "Whether to enable lazy mounting"
      },
      "modal": {
        "type": "boolean",
        "isRequired": false,
        "defaultValue": "true",
        "description": "Whether to prevent pointer interaction outside the element and hide all content below it"
      },
      "onEscapeKeyDown": {
        "type": "(event: KeyboardEvent) => void",
        "isRequired": false,
        "description": "Function called when the escape key is pressed"
      },
      "onExitComplete": {
        "type": "VoidFunction",
        "isRequired": false,
        "description": "Function called when the animation ends in the closed state"
      },
      "onFocusOutside": {
        "type": "(event: FocusOutsideEvent) => void",
        "isRequired": false,
        "description": "Function called when the focus is moved outside the component"
      },
      "onInteractOutside": {
        "type": "(event: InteractOutsideEvent) => void",
        "isRequired": false,
        "description": "Function called when an interaction happens outside the component"
      },
      "onOpenChange": {
        "type": "(details: OpenChangeDetails) => void",
        "isRequired": false,
        "description": "Function to call when the dialog's open state changes"
      },
      "onPointerDownOutside": {
        "type": "(event: PointerDownOutsideEvent) => void",
        "isRequired": false,
        "description": "Function called when the pointer is pressed down outside the component"
      },
      "open": {
        "type": "boolean",
        "isRequired": false,
        "description": "The controlled open state of the dialog"
      },
      "persistentElements": {
        "type": "(() => Element | null)[]",
        "isRequired": false,
        "description": "Returns the persistent elements that:\n- should not have pointer-events disabled\n- should not trigger the dismiss event"
      },
      "present": {
        "type": "boolean",
        "isRequired": false,
        "description": "Whether the node is present (controlled by the user)"
      },
      "preventScroll": {
        "type": "boolean",
        "isRequired": false,
        "defaultValue": "true",
        "description": "Whether to prevent scrolling behind the dialog when it's opened"
      },
      "restoreFocus": {
        "type": "boolean",
        "isRequired": false,
        "description": "Whether to restore focus to the element that had focus before the dialog was opened"
      },
      "role": {
        "type": "'dialog' | 'alertdialog'",
        "isRequired": false,
        "defaultValue": "\"dialog\"",
        "description": "The dialog's role"
      },
      "skipAnimationOnMount": {
        "type": "boolean",
        "isRequired": false,
        "defaultValue": "false",
        "description": "Whether to allow the initial presence animation."
      },
      "trapFocus": {
        "type": "boolean",
        "isRequired": false,
        "defaultValue": "true",
        "description": "Whether to trap focus inside the dialog when it's opened"
      },
      "unmountOnExit": {
        "type": "boolean",
        "isRequired": false,
        "defaultValue": "false",
        "description": "Whether to unmount on exit."
      },
      "colorPalette": {
        "defaultValue": "gray",
        "type": "\"gray\" | \"red\" | \"orange\" | \"yellow\" | \"green\" | \"teal\" | \"blue\" | \"cyan\" | \"purple\" | \"pink\"",
        "isRequired": false,
        "description": "The color palette of the component"
      },
      "placement": {
        "type": "\"center\" | \"top\" | \"bottom\"",
        "defaultValue": "top",
        "isRequired": false,
        "description": "The placement of the component"
      },
      "scrollBehavior": {
        "type": "\"inside\" | \"outside\"",
        "defaultValue": "outside",
        "isRequired": false,
        "description": "The scrollBehavior of the component"
      },
      "size": {
        "type": "\"xs\" | \"sm\" | \"md\" | \"lg\" | \"xl\" | \"cover\" | \"full\"",
        "defaultValue": "md",
        "isRequired": false,
        "description": "The size of the component"
      },
      "motionPreset": {
        "type": "\"scale\" | \"slide-in-bottom\" | \"slide-in-top\" | \"slide-in-left\" | \"slide-in-right\" | \"none\"",
        "defaultValue": "scale",
        "isRequired": false,
        "description": "The motionPreset of the component"
      }
    }
  },
  "RootProvider": {
    "props": {
      "as": {
        "type": "React.ElementType",
        "isRequired": false,
        "description": "The underlying element to render."
      },
      "asChild": {
        "type": "boolean",
        "isRequired": false,
        "description": "Use the provided child element as the default rendered element, combining their props and behavior."
      },
      "value": {
        "type": "UseDialogReturn",
        "isRequired": true
      },
      "immediate": {
        "type": "boolean",
        "isRequired": false,
        "description": "Whether to synchronize the present change immediately or defer it to the next frame"
      },
      "lazyMount": {
        "type": "boolean",
        "isRequired": false,
        "defaultValue": "false",
        "description": "Whether to enable lazy mounting"
      },
      "onExitComplete": {
        "type": "VoidFunction",
        "isRequired": false,
        "description": "Function called when the animation ends in the closed state"
      },
      "present": {
        "type": "boolean",
        "isRequired": false,
        "description": "Whether the node is present (controlled by the user)"
      },
      "skipAnimationOnMount": {
        "type": "boolean",
        "isRequired": false,
        "defaultValue": "false",
        "description": "Whether to allow the initial presence animation."
      },
      "unmountOnExit": {
        "type": "boolean",
        "isRequired": false,
        "defaultValue": "false",
        "description": "Whether to unmount on exit."
      }
    }
  },
  "Title": {
    "props": {
      "as": {
        "type": "React.ElementType",
        "isRequired": false,
        "description": "The underlying element to render."
      },
      "asChild": {
        "type": "boolean",
        "isRequired": false,
        "description": "Use the provided child element as the default rendered element, combining their props and behavior."
      }
    },
    "element": "HTMLHeadingElement"
  },
  "Trigger": {
    "props": {
      "as": {
        "type": "React.ElementType",
        "isRequired": false,
        "description": "The underlying element to render."
      },
      "asChild": {
        "type": "boolean",
        "isRequired": false,
        "description": "Use the provided child element as the default rendered element, combining their props and behavior."
      }
    },
    "element": "HTMLButtonElement"
  },
  "Header": {
    "props": {
      "as": {
        "type": "React.ElementType",
        "isRequired": false,
        "description": "The underlying element to render."
      },
      "asChild": {
        "type": "boolean",
        "isRequired": false,
        "description": "Use the provided child element as the default rendered element, combining their props and behavior."
      }
    }
  },
  "Positioner": {
    "props": {
      "as": {
        "type": "React.ElementType",
        "isRequired": false,
        "description": "The underlying element to render."
      },
      "asChild": {
        "type": "boolean",
        "isRequired": false,
        "description": "Use the provided child element as the default rendered element, combining their props and behavior."
      }
    },
    "element": "HTMLDivElement"
  },
  "Description": {
    "props": {
      "as": {
        "type": "React.ElementType",
        "isRequired": false,
        "description": "The underlying element to render."
      },
      "asChild": {
        "type": "boolean",
        "isRequired": false,
        "description": "Use the provided child element as the default rendered element, combining their props and behavior."
      }
    },
    "element": "HTMLDivElement"
  },
  "ActionTrigger": {
    "props": {
      "as": {
        "type": "React.ElementType",
        "isRequired": false,
        "description": "The underlying element to render."
      },
      "asChild": {
        "type": "boolean",
        "isRequired": false,
        "description": "Use the provided child element as the default rendered element, combining their props and behavior."
      }
    }
  }
}