{
  "Content": {
    "props": {
      "as": {
        "type": "React.ElementType",
        "isRequired": false,
        "description": "The underlying element to render."
      },
      "asChild": {
        "type": "boolean",
        "isRequired": false,
        "description": "Use the provided child element as the default rendered element, combining their props and behavior."
      }
    },
    "element": "HTMLDivElement"
  },
  "Empty": {
    "props": {
      "as": {
        "type": "React.ElementType",
        "isRequired": false,
        "description": "The underlying element to render."
      },
      "asChild": {
        "type": "boolean",
        "isRequired": false,
        "description": "Use the provided child element as the default rendered element, combining their props and behavior."
      }
    },
    "element": "HTMLDivElement"
  },
  "Input": {
    "props": {
      "as": {
        "type": "React.ElementType",
        "isRequired": false,
        "description": "The underlying element to render."
      },
      "asChild": {
        "type": "boolean",
        "isRequired": false,
        "description": "Use the provided child element as the default rendered element, combining their props and behavior."
      },
      "autoHighlight": {
        "type": "boolean",
        "isRequired": false,
        "defaultValue": "false",
        "description": "Whether to automatically highlight the item when typing"
      }
    },
    "element": "HTMLInputElement"
  },
  "ItemGroupLabel": {
    "props": {
      "as": {
        "type": "React.ElementType",
        "isRequired": false,
        "description": "The underlying element to render."
      },
      "asChild": {
        "type": "boolean",
        "isRequired": false,
        "description": "Use the provided child element as the default rendered element, combining their props and behavior."
      }
    },
    "element": "HTMLDivElement"
  },
  "ItemGroup": {
    "props": {
      "as": {
        "type": "React.ElementType",
        "isRequired": false,
        "description": "The underlying element to render."
      },
      "asChild": {
        "type": "boolean",
        "isRequired": false,
        "description": "Use the provided child element as the default rendered element, combining their props and behavior."
      }
    },
    "element": "HTMLDivElement"
  },
  "ItemIndicator": {
    "props": {
      "as": {
        "type": "React.ElementType",
        "isRequired": false,
        "description": "The underlying element to render."
      },
      "asChild": {
        "type": "boolean",
        "isRequired": false,
        "description": "Use the provided child element as the default rendered element, combining their props and behavior."
      }
    },
    "element": "HTMLDivElement"
  },
  "Item": {
    "props": {
      "as": {
        "type": "React.ElementType",
        "isRequired": false,
        "description": "The underlying element to render."
      },
      "asChild": {
        "type": "boolean",
        "isRequired": false,
        "description": "Use the provided child element as the default rendered element, combining their props and behavior."
      },
      "highlightOnHover": {
        "type": "boolean",
        "isRequired": false,
        "description": "Whether to highlight the item on hover"
      },
      "item": {
        "type": "any",
        "isRequired": false,
        "description": "The item to render"
      }
    },
    "element": "HTMLDivElement"
  },
  "ItemText": {
    "props": {
      "as": {
        "type": "React.ElementType",
        "isRequired": false,
        "description": "The underlying element to render."
      },
      "asChild": {
        "type": "boolean",
        "isRequired": false,
        "description": "Use the provided child element as the default rendered element, combining their props and behavior."
      }
    },
    "element": "HTMLDivElement"
  },
  "Label": {
    "props": {
      "as": {
        "type": "React.ElementType",
        "isRequired": false,
        "description": "The underlying element to render."
      },
      "asChild": {
        "type": "boolean",
        "isRequired": false,
        "description": "Use the provided child element as the default rendered element, combining their props and behavior."
      }
    },
    "element": "HTMLLabelElement"
  },
  "Root": {
    "props": {
      "as": {
        "type": "React.ElementType",
        "isRequired": false,
        "description": "The underlying element to render."
      },
      "asChild": {
        "type": "boolean",
        "isRequired": false,
        "description": "Use the provided child element as the default rendered element, combining their props and behavior."
      },
      "unstyled": {
        "type": "boolean",
        "isRequired": false,
        "description": "Whether to remove the component's style."
      },
      "collection": {
        "type": "ListCollection<T>",
        "isRequired": true,
        "description": "The collection of items"
      },
      "defaultHighlightedValue": {
        "type": "string",
        "isRequired": false,
        "description": "The initial value of the highlighted item when opened.\nUse when you don't need to control the highlighted value of the listbox."
      },
      "defaultValue": {
        "type": "string[]",
        "isRequired": false,
        "defaultValue": "[]",
        "description": "The initial default value of the listbox when rendered.\nUse when you don't need to control the value of the listbox."
      },
      "deselectable": {
        "type": "boolean",
        "isRequired": false,
        "description": "Whether to disallow empty selection"
      },
      "disabled": {
        "type": "boolean",
        "isRequired": false,
        "description": "Whether the listbox is disabled"
      },
      "disallowSelectAll": {
        "type": "boolean",
        "isRequired": false,
        "description": "Whether to disallow selecting all items when `meta+a` is pressed"
      },
      "highlightedValue": {
        "type": "string",
        "isRequired": false,
        "description": "The controlled key of the highlighted item"
      },
      "id": {
        "type": "string",
        "isRequired": false,
        "description": "The unique identifier of the machine."
      },
      "ids": {
        "type": "Partial<{\n  root: string\n  content: string\n  label: string\n  item: (id: string | number) => string\n  itemGroup: (id: string | number) => string\n  itemGroupLabel: (id: string | number) => string\n}>",
        "isRequired": false,
        "description": "The ids of the elements in the listbox. Useful for composition."
      },
      "loopFocus": {
        "type": "boolean",
        "isRequired": false,
        "defaultValue": "false",
        "description": "Whether to loop the keyboard navigation through the options"
      },
      "onHighlightChange": {
        "type": "(details: HighlightChangeDetails<T>) => void",
        "isRequired": false,
        "description": "The callback fired when the highlighted item changes."
      },
      "onSelect": {
        "type": "(details: SelectionDetails) => void",
        "isRequired": false,
        "description": "Function called when an item is selected"
      },
      "onValueChange": {
        "type": "(details: ValueChangeDetails<T>) => void",
        "isRequired": false,
        "description": "The callback fired when the selected item changes."
      },
      "orientation": {
        "type": "'horizontal' | 'vertical'",
        "isRequired": false,
        "defaultValue": "\"vertical\"",
        "description": "The orientation of the listbox."
      },
      "scrollToIndexFn": {
        "type": "(details: ScrollToIndexDetails) => void",
        "isRequired": false,
        "description": "Function to scroll to a specific index"
      },
      "selectionMode": {
        "type": "SelectionMode",
        "isRequired": false,
        "defaultValue": "\"single\"",
        "description": "How multiple selection should behave in the listbox.\n\n- `single`: The user can select a single item.\n- `multiple`: The user can select multiple items without using modifier keys.\n- `extended`: The user can select multiple items by using modifier keys."
      },
      "selectOnHighlight": {
        "type": "boolean",
        "isRequired": false,
        "description": "Whether to select the item when it is highlighted"
      },
      "typeahead": {
        "type": "boolean",
        "isRequired": false,
        "description": "Whether to enable typeahead on the listbox"
      },
      "value": {
        "type": "string[]",
        "isRequired": false,
        "description": "The controlled keys of the selected items"
      },
      "colorPalette": {
        "defaultValue": "gray",
        "type": "\"gray\" | \"red\" | \"orange\" | \"yellow\" | \"green\" | \"teal\" | \"blue\" | \"cyan\" | \"purple\" | \"pink\"",
        "isRequired": false,
        "description": "The color palette of the component"
      },
      "variant": {
        "type": "\"subtle\" | \"solid\" | \"plain\"",
        "defaultValue": "subtle",
        "isRequired": false,
        "description": "The variant of the component"
      }
    }
  },
  "RootProvider": {
    "props": {
      "as": {
        "type": "React.ElementType",
        "isRequired": false,
        "description": "The underlying element to render."
      },
      "asChild": {
        "type": "boolean",
        "isRequired": false,
        "description": "Use the provided child element as the default rendered element, combining their props and behavior."
      },
      "value": {
        "type": "UseListboxReturn<T>",
        "isRequired": true
      }
    }
  },
  "ValueText": {
    "props": {
      "as": {
        "type": "React.ElementType",
        "isRequired": false,
        "description": "The underlying element to render."
      },
      "asChild": {
        "type": "boolean",
        "isRequired": false,
        "description": "Use the provided child element as the default rendered element, combining their props and behavior."
      },
      "placeholder": {
        "type": "string",
        "isRequired": false,
        "description": "Text to display when no value is listboxed."
      }
    },
    "element": "HTMLSpanElement"
  }
}