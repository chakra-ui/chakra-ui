{
  "name": "select",
  "file": "compositions/ui/select",
  "snippet": "\"use client\"\n\nimport type { CollectionItem } from \"@chakra-ui/react\"\nimport { Select as ChakraSelect, Portal } from \"@chakra-ui/react\"\nimport { CloseButton } from \"@/components/ui/close-button\"\nimport * as React from \"react\"\n\ninterface SelectTriggerProps extends ChakraSelect.ControlProps {\n  clearable?: boolean\n}\n\nexport const SelectTrigger = React.forwardRef<\n  HTMLButtonElement,\n  SelectTriggerProps\n>(function SelectTrigger(props, ref) {\n  const { children, clearable, ...rest } = props\n  return (\n    <ChakraSelect.Control {...rest}>\n      <ChakraSelect.Trigger ref={ref}>{children}</ChakraSelect.Trigger>\n      <ChakraSelect.IndicatorGroup>\n        {clearable && <SelectClearTrigger />}\n        <ChakraSelect.Indicator />\n      </ChakraSelect.IndicatorGroup>\n    </ChakraSelect.Control>\n  )\n})\n\nconst SelectClearTrigger = React.forwardRef<\n  HTMLButtonElement,\n  ChakraSelect.ClearTriggerProps\n>(function SelectClearTrigger(props, ref) {\n  return (\n    <ChakraSelect.ClearTrigger asChild {...props} ref={ref}>\n      <CloseButton\n        size=\"xs\"\n        variant=\"plain\"\n        focusVisibleRing=\"inside\"\n        focusRingWidth=\"2px\"\n        pointerEvents=\"auto\"\n      />\n    </ChakraSelect.ClearTrigger>\n  )\n})\n\ninterface SelectContentProps extends ChakraSelect.ContentProps {\n  portalled?: boolean\n  portalRef?: React.RefObject<HTMLElement>\n}\n\nexport const SelectContent = React.forwardRef<\n  HTMLDivElement,\n  SelectContentProps\n>(function SelectContent(props, ref) {\n  const { portalled = true, portalRef, ...rest } = props\n  return (\n    <Portal disabled={!portalled} container={portalRef}>\n      <ChakraSelect.Positioner>\n        <ChakraSelect.Content {...rest} ref={ref} />\n      </ChakraSelect.Positioner>\n    </Portal>\n  )\n})\n\nexport const SelectItem = React.forwardRef<\n  HTMLDivElement,\n  ChakraSelect.ItemProps\n>(function SelectItem(props, ref) {\n  const { item, children, ...rest } = props\n  return (\n    <ChakraSelect.Item key={item.value} item={item} {...rest} ref={ref}>\n      {children}\n      <ChakraSelect.ItemIndicator />\n    </ChakraSelect.Item>\n  )\n})\n\ninterface SelectValueTextProps\n  extends Omit<ChakraSelect.ValueTextProps, \"children\"> {\n  children?(items: CollectionItem[]): React.ReactNode\n}\n\nexport const SelectValueText = React.forwardRef<\n  HTMLSpanElement,\n  SelectValueTextProps\n>(function SelectValueText(props, ref) {\n  const { children, ...rest } = props\n  return (\n    <ChakraSelect.ValueText {...rest} ref={ref}>\n      <ChakraSelect.Context>\n        {(select) => {\n          const items = select.selectedItems\n          if (items.length === 0) return props.placeholder\n          if (children) return children(items)\n          if (items.length === 1)\n            return select.collection.stringifyItem(items[0])\n          return `${items.length} selected`\n        }}\n      </ChakraSelect.Context>\n    </ChakraSelect.ValueText>\n  )\n})\n\nexport const SelectRoot = React.forwardRef<\n  HTMLDivElement,\n  ChakraSelect.RootProps\n>(function SelectRoot(props, ref) {\n  return (\n    <ChakraSelect.Root\n      {...props}\n      ref={ref}\n      positioning={{ sameWidth: true, ...props.positioning }}\n    >\n      {props.asChild ? (\n        props.children\n      ) : (\n        <>\n          <ChakraSelect.HiddenSelect />\n          {props.children}\n        </>\n      )}\n    </ChakraSelect.Root>\n  )\n}) as ChakraSelect.RootComponent\n\ninterface SelectItemGroupProps extends ChakraSelect.ItemGroupProps {\n  label: React.ReactNode\n}\n\nexport const SelectItemGroup = React.forwardRef<\n  HTMLDivElement,\n  SelectItemGroupProps\n>(function SelectItemGroup(props, ref) {\n  const { children, label, ...rest } = props\n  return (\n    <ChakraSelect.ItemGroup {...rest} ref={ref}>\n      <ChakraSelect.ItemGroupLabel>{label}</ChakraSelect.ItemGroupLabel>\n      {children}\n    </ChakraSelect.ItemGroup>\n  )\n})\n\nexport const SelectLabel = ChakraSelect.Label\nexport const SelectItemText = ChakraSelect.ItemText\n",
  "examples": [
    {
      "name": "select-async-loading",
      "content": "\"use client\"\n\ninterface Pokemon {\n  name: string\n  url: string\n}\n\nexport const SelectAsyncLoading = () => {\n  const state = useAsync(async (): Promise<Pokemon[]> => {\n    const response = await fetch(\"https://pokeapi.co/api/v2/pokemon\")\n    const data = await response.json()\n    return data.results\n  }, [])\n\n  const collection = useMemo(() => {\n    return createListCollection({\n      items: state.value ?? [],\n      itemToString: (pokemon) => pokemon.name,\n      itemToValue: (pokemon) => pokemon.name,\n    })\n  }, [state.value])\n\n  return (\n    <Select.Root collection={collection} size=\"sm\" width=\"320px\">\n      <Select.HiddenSelect />\n      <Select.Label>Select pokemon</Select.Label>\n      <Select.Control>\n        <Select.Trigger>\n          <Select.ValueText placeholder=\"Select pokemon\" />\n        </Select.Trigger>\n        <Select.IndicatorGroup>\n          {state.loading && (\n            <Spinner size=\"xs\" borderWidth=\"1.5px\" color=\"fg.muted\" />\n          )}\n          <Select.Indicator />\n        </Select.IndicatorGroup>\n      </Select.Control>\n      <Portal>\n        <Select.Positioner>\n          <Select.Content>\n            {collection.items.map((pokemon) => (\n              <Select.Item item={pokemon} key={pokemon.name}>\n                {pokemon.name}\n                <Select.ItemIndicator />\n              </Select.Item>\n            ))}\n          </Select.Content>\n        </Select.Positioner>\n      </Portal>\n    </Select.Root>\n  )\n}\n",
      "hasSnippet": false,
      "importPaths": [
        "import { Portal, Select, Spinner, createListCollection } from \"@chakra-ui/react\"",
        "import { useMemo } from \"react\"",
        "import { useAsync } from \"react-use\""
      ],
      "importPath": "import { Select } from \"@chakra-ui/react\"",
      "npmDependencies": [
        "react-use"
      ]
    },
    {
      "name": "select-basic",
      "content": "\"use client\"\nexport const SelectBasic = () => {\n  return (\n    <Select.Root collection={frameworks} size=\"sm\" width=\"320px\">\n      <Select.HiddenSelect />\n      <Select.Label>Select framework</Select.Label>\n      <Select.Control>\n        <Select.Trigger>\n          <Select.ValueText placeholder=\"Select framework\" />\n        </Select.Trigger>\n        <Select.IndicatorGroup>\n          <Select.Indicator />\n        </Select.IndicatorGroup>\n      </Select.Control>\n      <Portal>\n        <Select.Positioner>\n          <Select.Content>\n            {frameworks.items.map((framework) => (\n              <Select.Item item={framework} key={framework.value}>\n                {framework.label}\n                <Select.ItemIndicator />\n              </Select.Item>\n            ))}\n          </Select.Content>\n        </Select.Positioner>\n      </Portal>\n    </Select.Root>\n  )\n}\n\nconst frameworks = createListCollection({\n  items: [\n    { label: \"React.js\", value: \"react\" },\n    { label: \"Vue.js\", value: \"vue\" },\n    { label: \"Angular\", value: \"angular\" },\n    { label: \"Svelte\", value: \"svelte\" },\n  ],\n})\n",
      "hasSnippet": false,
      "importPaths": [
        "import { Portal, Select, createListCollection } from \"@chakra-ui/react\""
      ],
      "importPath": "import { Select } from \"@chakra-ui/react\""
    },
    {
      "name": "select-controlled",
      "content": "\"use client\"\nexport const SelectControlled = () => {\n  const [value, setValue] = useState<string[]>([])\n  return (\n    <Select.Root\n      collection={frameworks}\n      width=\"320px\"\n      value={value}\n      onValueChange={(e) => setValue(e.value)}\n    >\n      <Select.HiddenSelect />\n      <Select.Label>Select framework</Select.Label>\n      <Select.Control>\n        <Select.Trigger>\n          <Select.ValueText placeholder=\"Select framework\" />\n        </Select.Trigger>\n        <Select.IndicatorGroup>\n          <Select.Indicator />\n        </Select.IndicatorGroup>\n      </Select.Control>\n      <Portal>\n        <Select.Positioner>\n          <Select.Content>\n            {frameworks.items.map((framework) => (\n              <Select.Item item={framework} key={framework.value}>\n                {framework.label}\n                <Select.ItemIndicator />\n              </Select.Item>\n            ))}\n          </Select.Content>\n        </Select.Positioner>\n      </Portal>\n    </Select.Root>\n  )\n}\n\nconst frameworks = createListCollection({\n  items: [\n    { label: \"React.js\", value: \"react\" },\n    { label: \"Vue.js\", value: \"vue\" },\n    { label: \"Angular\", value: \"angular\" },\n    { label: \"Svelte\", value: \"svelte\" },\n  ],\n})\n",
      "hasSnippet": false,
      "importPaths": [
        "import { Portal, Select, createListCollection } from \"@chakra-ui/react\"",
        "import { useState } from \"react\""
      ],
      "importPath": "import { Select } from \"@chakra-ui/react\""
    },
    {
      "name": "select-in-dialog",
      "content": "\"use client\"\nexport const SelectInDialog = () => {\n  return (\n    <Dialog.Root>\n      <Dialog.Trigger asChild>\n        <Button variant=\"outline\">Open Dialog</Button>\n      </Dialog.Trigger>\n      <Portal>\n        <Dialog.Backdrop />\n        <Dialog.Positioner>\n          <Dialog.Content>\n            <Dialog.CloseTrigger asChild>\n              <CloseButton />\n            </Dialog.CloseTrigger>\n            <Dialog.Header>\n              <Dialog.Title>Select in Dialog</Dialog.Title>\n            </Dialog.Header>\n            <Dialog.Body>\n              <DialogSelect />\n            </Dialog.Body>\n            <Dialog.Footer />\n          </Dialog.Content>\n        </Dialog.Positioner>\n      </Portal>\n    </Dialog.Root>\n  )\n}\n\nconst frameworks = createListCollection({\n  items: [\n    { label: \"React.js\", value: \"react\" },\n    { label: \"Vue.js\", value: \"vue\" },\n    { label: \"Angular\", value: \"angular\" },\n    { label: \"Svelte\", value: \"svelte\" },\n  ],\n})\n\nfunction DialogSelect() {\n  return (\n    <Select.Root collection={frameworks} size=\"sm\">\n      <Select.HiddenSelect />\n      <Select.Label>Select framework</Select.Label>\n      <Select.Control>\n        <Select.Trigger>\n          <Select.ValueText placeholder=\"Select framework\" />\n        </Select.Trigger>\n        <Select.IndicatorGroup>\n          <Select.Indicator />\n        </Select.IndicatorGroup>\n      </Select.Control>\n      <Select.Positioner>\n        <Select.Content>\n          {frameworks.items.map((item) => (\n            <Select.Item item={item} key={item.value}>\n              {item.label}\n            </Select.Item>\n          ))}\n        </Select.Content>\n      </Select.Positioner>\n    </Select.Root>\n  )\n}\n",
      "hasSnippet": false,
      "importPaths": [
        "import {\n  Button,\n  CloseButton,\n  Dialog,\n  Portal,\n  Select,\n  createListCollection,\n} from \"@chakra-ui/react\""
      ],
      "importPath": "import { Select } from \"@chakra-ui/react\""
    },
    {
      "name": "select-in-popover",
      "content": "\"use client\"\nexport const SelectInPopover = () => {\n  return (\n    <Popover.Root size=\"xs\">\n      <Popover.Trigger asChild>\n        <Button variant=\"outline\" size=\"sm\">\n          Select in Popover\n        </Button>\n      </Popover.Trigger>\n\n      <Portal>\n        <Popover.Positioner>\n          <Popover.Content>\n            <Popover.Header>Select in Popover</Popover.Header>\n            <Popover.Body>\n              <Select.Root\n                collection={frameworks}\n                size=\"sm\"\n                positioning={{ sameWidth: true, placement: \"bottom\" }}\n              >\n                <Select.HiddenSelect />\n                <Select.Control>\n                  <Select.Trigger>\n                    <Select.ValueText placeholder=\"Select framework\" />\n                  </Select.Trigger>\n                  <Select.IndicatorGroup>\n                    <Select.Indicator />\n                  </Select.IndicatorGroup>\n                </Select.Control>\n                <Select.Positioner>\n                  <Select.Content width=\"full\">\n                    {frameworks.items.map((item) => (\n                      <Select.Item item={item} key={item.value}>\n                        {item.label}\n                        <Select.ItemIndicator />\n                      </Select.Item>\n                    ))}\n                  </Select.Content>\n                </Select.Positioner>\n              </Select.Root>\n            </Popover.Body>\n          </Popover.Content>\n        </Popover.Positioner>\n      </Portal>\n    </Popover.Root>\n  )\n}\n\nconst frameworks = createListCollection({\n  items: [\n    { label: \"React.js\", value: \"react\" },\n    { label: \"Vue.js\", value: \"vue\" },\n    { label: \"Angular\", value: \"angular\" },\n    { label: \"Svelte\", value: \"svelte\" },\n  ],\n})\n",
      "hasSnippet": false,
      "importPaths": [
        "import {\n  Button,\n  Popover,\n  Portal,\n  Select,\n  createListCollection,\n} from \"@chakra-ui/react\""
      ],
      "importPath": "import { Select } from \"@chakra-ui/react\""
    },
    {
      "name": "select-virtualized",
      "content": "\"use client\"\n\ninterface ScrollToIndexDetails {\n  index: number\n  immediate?: boolean\n}\n\nexport const SelectVirtualized = () => {\n  const contentRef = useRef<HTMLDivElement>(null)\n\n  const virtualizer = useVirtualizer({\n    count: items.length,\n    getScrollElement: () => contentRef.current,\n    estimateSize: () => 28,\n    overscan: 10,\n    scrollPaddingEnd: 32,\n  })\n  const virtualizerRef = useLiveRef(virtualizer)\n\n  const collection = useMemo(() => createListCollection({ items }), [])\n\n  const timerRef = useRef<NodeJS.Timeout | number | undefined>(undefined)\n\n  const handleScrollToIndexFn = (details: ScrollToIndexDetails) => {\n    const scrollOptions: ScrollToOptions = { align: \"end\", behavior: \"auto\" }\n    clearTimeout(timerRef.current)\n    timerRef.current = setTimeout(() => {\n      requestAnimationFrame(() => {\n        virtualizerRef.current.scrollToIndex(details.index, scrollOptions)\n      })\n    }, 50)\n  }\n\n  return (\n    <Select.Root\n      maxW=\"sm\"\n      size=\"sm\"\n      collection={collection}\n      scrollToIndexFn={handleScrollToIndexFn}\n    >\n      <Select.Label>Country</Select.Label>\n      <Select.Control>\n        <Select.Trigger>\n          <Select.ValueText placeholder=\"Select a Country\" />\n          <Select.IndicatorGroup>\n            <Select.Indicator />\n          </Select.IndicatorGroup>\n        </Select.Trigger>\n      </Select.Control>\n      <Select.Positioner>\n        <Select.Content ref={contentRef}>\n          <div\n            style={{\n              height: `${virtualizer.getTotalSize()}px`,\n              width: \"100%\",\n              position: \"relative\",\n            }}\n          >\n            {virtualizer.getVirtualItems().map((virtualItem) => {\n              const item = items[virtualItem.index]\n              return (\n                <Select.Item\n                  key={item.value}\n                  item={item}\n                  style={{\n                    position: \"absolute\",\n                    top: 0,\n                    left: 0,\n                    width: \"100%\",\n                    height: `${virtualItem.size}px`,\n                    transform: `translateY(${virtualItem.start}px)`,\n                    whiteSpace: \"nowrap\",\n                    overflow: \"hidden\",\n                    textOverflow: \"ellipsis\",\n                  }}\n                >\n                  <Select.ItemText>{item.label}</Select.ItemText>\n                  <Select.ItemIndicator />\n                </Select.Item>\n              )\n            })}\n          </div>\n        </Select.Content>\n      </Select.Positioner>\n      <Select.HiddenSelect />\n    </Select.Root>\n  )\n}\n\nexport const items = [\n  { value: \"AD\", label: \"Andorra\" },\n  { value: \"AE\", label: \"United Arab Emirates\" },\n  { value: \"AF\", label: \"Afghanistan\" },\n  { value: \"AG\", label: \"Antigua and Barbuda\" },\n  { value: \"AI\", label: \"Anguilla\" },\n  { value: \"AL\", label: \"Albania\" },\n  { value: \"AM\", label: \"Armenia\" },\n  { value: \"AO\", label: \"Angola\" },\n  { value: \"AQ\", label: \"Antarctica\" },\n  { value: \"AR\", label: \"Argentina\" },\n  { value: \"AS\", label: \"American Samoa\" },\n  { value: \"AT\", label: \"Austria\" },\n  { value: \"AU\", label: \"Australia\" },\n  { value: \"AW\", label: \"Aruba\" },\n  { value: \"AX\", label: \"Åland Islands\" },\n  { value: \"AZ\", label: \"Azerbaijan\" },\n  { value: \"BA\", label: \"Bosnia and Herzegovina\" },\n  { value: \"BB\", label: \"Barbados\" },\n  { value: \"BD\", label: \"Bangladesh\" },\n  { value: \"BE\", label: \"Belgium\" },\n  { value: \"BF\", label: \"Burkina Faso\" },\n  { value: \"BG\", label: \"Bulgaria\" },\n  { value: \"BH\", label: \"Bahrain\" },\n  { value: \"BI\", label: \"Burundi\" },\n  { value: \"BJ\", label: \"Benin\" },\n  { value: \"BL\", label: \"Saint Barthélemy\" },\n  { value: \"BM\", label: \"Bermuda\" },\n  { value: \"BN\", label: \"Brunei Darussalam\" },\n  { value: \"BO\", label: \"Bolivia, Plurinational State of\" },\n  { value: \"BQ\", label: \"Bonaire, Sint Eustatius and Saba\" },\n  { value: \"BR\", label: \"Brazil\" },\n  { value: \"BS\", label: \"Bahamas\" },\n  { value: \"BT\", label: \"Bhutan\" },\n  { value: \"BV\", label: \"Bouvet Island\" },\n  { value: \"BW\", label: \"Botswana\" },\n  { value: \"BY\", label: \"Belarus\" },\n  { value: \"BZ\", label: \"Belize\" },\n  { value: \"CA\", label: \"Canada\" },\n  { value: \"CC\", label: \"Cocos (Keeling) Islands\" },\n  { value: \"CD\", label: \"Congo, Democratic Republic of the\" },\n  { value: \"CF\", label: \"Central African Republic\" },\n  { value: \"CG\", label: \"Congo\" },\n  { value: \"CH\", label: \"Switzerland\" },\n  { value: \"CI\", label: \"Côte d'Ivoire\" },\n  { value: \"CK\", label: \"Cook Islands\" },\n  { value: \"CL\", label: \"Chile\" },\n  { value: \"CM\", label: \"Cameroon\" },\n  { value: \"CN\", label: \"China\" },\n  { value: \"CO\", label: \"Colombia\" },\n  { value: \"CR\", label: \"Costa Rica\" },\n  { value: \"CU\", label: \"Cuba\" },\n  { value: \"CV\", label: \"Cabo Verde\" },\n  { value: \"CW\", label: \"Curaçao\" },\n  { value: \"CX\", label: \"Christmas Island\" },\n  { value: \"CY\", label: \"Cyprus\" },\n  { value: \"CZ\", label: \"Czechia\" },\n  { value: \"DE\", label: \"Germany\" },\n  { value: \"DJ\", label: \"Djibouti\" },\n  { value: \"DK\", label: \"Denmark\" },\n  { value: \"DM\", label: \"Dominica\" },\n  { value: \"DO\", label: \"Dominican Republic\" },\n  { value: \"DZ\", label: \"Algeria\" },\n  { value: \"EC\", label: \"Ecuador\" },\n  { value: \"EE\", label: \"Estonia\" },\n  { value: \"EG\", label: \"Egypt\" },\n  { value: \"EH\", label: \"Western Sahara\" },\n  { value: \"ER\", label: \"Eritrea\" },\n  { value: \"ES\", label: \"Spain\" },\n  { value: \"ET\", label: \"Ethiopia\" },\n  { value: \"FI\", label: \"Finland\" },\n  { value: \"FJ\", label: \"Fiji\" },\n  { value: \"FK\", label: \"Falkland Islands (Malvinas)\" },\n  { value: \"FM\", label: \"Micronesia, Federated States of\" },\n  { value: \"FO\", label: \"Faroe Islands\" },\n  { value: \"FR\", label: \"France\" },\n  { value: \"GA\", label: \"Gabon\" },\n  {\n    value: \"GB\",\n    label: \"United Kingdom of Great Britain and Northern Ireland\",\n  },\n  { value: \"GD\", label: \"Grenada\" },\n  { value: \"GE\", label: \"Georgia\" },\n  { value: \"GF\", label: \"French Guiana\" },\n  { value: \"GG\", label: \"Guernsey\" },\n  { value: \"GH\", label: \"Ghana\" },\n  { value: \"GI\", label: \"Gibraltar\" },\n  { value: \"GL\", label: \"Greenland\" },\n  { value: \"GM\", label: \"Gambia\" },\n  { value: \"GN\", label: \"Guinea\" },\n  { value: \"GP\", label: \"Guadeloupe\" },\n  { value: \"GQ\", label: \"Equatorial Guinea\" },\n  { value: \"GR\", label: \"Greece\" },\n  { value: \"GS\", label: \"South Georgia and the South Sandwich Islands\" },\n  { value: \"GT\", label: \"Guatemala\" },\n  { value: \"GU\", label: \"Guam\" },\n  { value: \"GW\", label: \"Guinea-Bissau\" },\n  { value: \"GY\", label: \"Guyana\" },\n  { value: \"HK\", label: \"Hong Kong\" },\n  { value: \"HM\", label: \"Heard Island and McDonald Islands\" },\n  { value: \"HN\", label: \"Honduras\" },\n  { value: \"HR\", label: \"Croatia\" },\n  { value: \"HT\", label: \"Haiti\" },\n  { value: \"HU\", label: \"Hungary\" },\n  { value: \"ID\", label: \"Indonesia\" },\n  { value: \"IE\", label: \"Ireland\" },\n  { value: \"IL\", label: \"Israel\" },\n  { value: \"IM\", label: \"Isle of Man\" },\n  { value: \"IN\", label: \"India\" },\n  { value: \"IO\", label: \"British Indian Ocean Territory\" },\n  { value: \"IQ\", label: \"Iraq\" },\n  { value: \"IR\", label: \"Iran, Islamic Republic of\" },\n  { value: \"IS\", label: \"Iceland\" },\n  { value: \"IT\", label: \"Italy\" },\n  { value: \"JE\", label: \"Jersey\" },\n  { value: \"JM\", label: \"Jamaica\" },\n  { value: \"JO\", label: \"Jordan\" },\n  { value: \"JP\", label: \"Japan\" },\n  { value: \"KE\", label: \"Kenya\" },\n  { value: \"KG\", label: \"Kyrgyzstan\" },\n  { value: \"KH\", label: \"Cambodia\" },\n  { value: \"KI\", label: \"Kiribati\" },\n  { value: \"KM\", label: \"Comoros\" },\n  { value: \"KN\", label: \"Saint Kitts and Nevis\" },\n  { value: \"KP\", label: \"Korea, Democratic People's Republic of\" },\n  { value: \"KR\", label: \"Korea, Republic of\" },\n  { value: \"KW\", label: \"Kuwait\" },\n  { value: \"KY\", label: \"Cayman Islands\" },\n  { value: \"KZ\", label: \"Kazakhstan\" },\n  { value: \"LA\", label: \"Lao People's Democratic Republic\" },\n  { value: \"LB\", label: \"Lebanon\" },\n  { value: \"LC\", label: \"Saint Lucia\" },\n  { value: \"LI\", label: \"Liechtenstein\" },\n  { value: \"LK\", label: \"Sri Lanka\" },\n  { value: \"LR\", label: \"Liberia\" },\n  { value: \"LS\", label: \"Lesotho\" },\n  { value: \"LT\", label: \"Lithuania\" },\n  { value: \"LU\", label: \"Luxembourg\" },\n  { value: \"LV\", label: \"Latvia\" },\n  { value: \"LY\", label: \"Libya\" },\n  { value: \"MA\", label: \"Morocco\" },\n  { value: \"MC\", label: \"Monaco\" },\n  { value: \"MD\", label: \"Moldova, Republic of\" },\n  { value: \"ME\", label: \"Montenegro\" },\n  { value: \"MF\", label: \"Saint Martin, (French part)\" },\n  { value: \"MG\", label: \"Madagascar\" },\n  { value: \"MH\", label: \"Marshall Islands\" },\n  { value: \"MK\", label: \"North Macedonia\" },\n  { value: \"ML\", label: \"Mali\" },\n  { value: \"MM\", label: \"Myanmar\" },\n  { value: \"MN\", label: \"Mongolia\" },\n  { value: \"MO\", label: \"Macao\" },\n  { value: \"MP\", label: \"Northern Mariana Islands\" },\n  { value: \"MQ\", label: \"Martinique\" },\n  { value: \"MR\", label: \"Mauritania\" },\n  { value: \"MS\", label: \"Montserrat\" },\n  { value: \"MT\", label: \"Malta\" },\n  { value: \"MU\", label: \"Mauritius\" },\n  { value: \"MV\", label: \"Maldives\" },\n  { value: \"MW\", label: \"Malawi\" },\n  { value: \"MX\", label: \"Mexico\" },\n  { value: \"MY\", label: \"Malaysia\" },\n  { value: \"MZ\", label: \"Mozambique\" },\n  { value: \"NA\", label: \"Namibia\" },\n  { value: \"NC\", label: \"New Caledonia\" },\n  { value: \"NE\", label: \"Niger\" },\n  { value: \"NF\", label: \"Norfolk Island\" },\n  { value: \"NG\", label: \"Nigeria\" },\n  { value: \"NI\", label: \"Nicaragua\" },\n  { value: \"NL\", label: \"Netherlands\" },\n  { value: \"NO\", label: \"Norway\" },\n  { value: \"NP\", label: \"Nepal\" },\n  { value: \"NR\", label: \"Nauru\" },\n  { value: \"NU\", label: \"Niue\" },\n  { value: \"NZ\", label: \"New Zealand\" },\n  { value: \"OM\", label: \"Oman\" },\n  { value: \"PA\", label: \"Panama\" },\n  { value: \"PE\", label: \"Peru\" },\n  { value: \"PF\", label: \"French Polynesia\" },\n  { value: \"PG\", label: \"Papua New Guinea\" },\n  { value: \"PH\", label: \"Philippines\" },\n  { value: \"PK\", label: \"Pakistan\" },\n  { value: \"PL\", label: \"Poland\" },\n  { value: \"PM\", label: \"Saint Pierre and Miquelon\" },\n  { value: \"PN\", label: \"Pitcairn\" },\n  { value: \"PR\", label: \"Puerto Rico\" },\n  { value: \"PS\", label: \"Palestine, State of\" },\n  { value: \"PT\", label: \"Portugal\" },\n  { value: \"PW\", label: \"Palau\" },\n  { value: \"PY\", label: \"Paraguay\" },\n  { value: \"QA\", label: \"Qatar\" },\n  { value: \"RE\", label: \"Réunion\" },\n  { value: \"RO\", label: \"Romania\" },\n  { value: \"RS\", label: \"Serbia\" },\n  { value: \"RU\", label: \"Russian Federation\" },\n  { value: \"RW\", label: \"Rwanda\" },\n  { value: \"SA\", label: \"Saudi Arabia\" },\n  { value: \"SB\", label: \"Solomon Islands\" },\n  { value: \"SC\", label: \"Seychelles\" },\n  { value: \"SD\", label: \"Sudan\" },\n  { value: \"SE\", label: \"Sweden\" },\n  { value: \"SG\", label: \"Singapore\" },\n  { value: \"SH\", label: \"Saint Helena, Ascension and Tristan da Cunha\" },\n  { value: \"SI\", label: \"Slovenia\" },\n  { value: \"SJ\", label: \"Svalbard and Jan Mayen\" },\n  { value: \"SK\", label: \"Slovakia\" },\n  { value: \"SL\", label: \"Sierra Leone\" },\n  { value: \"SM\", label: \"San Marino\" },\n  { value: \"SN\", label: \"Senegal\" },\n  { value: \"SO\", label: \"Somalia\" },\n  { value: \"SR\", label: \"Suriname\" },\n  { value: \"SS\", label: \"South Sudan\" },\n  { value: \"ST\", label: \"Sao Tome and Principe\" },\n  { value: \"SV\", label: \"El Salvador\" },\n  { value: \"SX\", label: \"Sint Maarten, (Dutch part)\" },\n  { value: \"SY\", label: \"Syrian Arab Republic\" },\n  { value: \"SZ\", label: \"Eswatini\" },\n  { value: \"TC\", label: \"Turks and Caicos Islands\" },\n  { value: \"TD\", label: \"Chad\" },\n  { value: \"TF\", label: \"French Southern Territories\" },\n  { value: \"TG\", label: \"Togo\" },\n  { value: \"TH\", label: \"Thailand\" },\n  { value: \"TJ\", label: \"Tajikistan\" },\n  { value: \"TK\", label: \"Tokelau\" },\n  { value: \"TL\", label: \"Timor-Leste\" },\n  { value: \"TM\", label: \"Turkmenistan\" },\n  { value: \"TN\", label: \"Tunisia\" },\n  { value: \"TO\", label: \"Tonga\" },\n  { value: \"TR\", label: \"Türkiye\" },\n  { value: \"TT\", label: \"Trinidad and Tobago\" },\n  { value: \"TV\", label: \"Tuvalu\" },\n  { value: \"TW\", label: \"Taiwan, Province of China\" },\n  { value: \"TZ\", label: \"Tanzania, United Republic of\" },\n  { value: \"UA\", label: \"Ukraine\" },\n  { value: \"UG\", label: \"Uganda\" },\n  { value: \"UM\", label: \"United States Minor Outlying Islands\" },\n  { value: \"US\", label: \"United States of America\" },\n  { value: \"UY\", label: \"Uruguay\" },\n  { value: \"UZ\", label: \"Uzbekistan\" },\n  { value: \"VA\", label: \"Holy See\" },\n  { value: \"VC\", label: \"Saint Vincent and the Grenadines\" },\n  { value: \"VE\", label: \"Venezuela, Bolivarian Republic of\" },\n  { value: \"VG\", label: \"Virgin Islands, British\" },\n  { value: \"VI\", label: \"Virgin Islands, U.S.\" },\n  { value: \"VN\", label: \"Viet Nam\" },\n  { value: \"VU\", label: \"Vanuatu\" },\n  { value: \"WF\", label: \"Wallis and Futuna\" },\n  { value: \"WS\", label: \"Samoa\" },\n  { value: \"YE\", label: \"Yemen\" },\n  { value: \"YT\", label: \"Mayotte\" },\n  { value: \"ZA\", label: \"South Africa\" },\n  { value: \"ZM\", label: \"Zambia\" },\n  { value: \"ZW\", label: \"Zimbabwe\" },\n]\n",
      "hasSnippet": false,
      "importPaths": [
        "import { Select, createListCollection, useLiveRef } from \"@chakra-ui/react\"",
        "import { type ScrollToOptions, useVirtualizer } from \"@tanstack/react-virtual\"",
        "import { useMemo, useRef } from \"react\""
      ],
      "importPath": "import { Select } from \"@chakra-ui/react\"",
      "npmDependencies": [
        "@tanstack/react-virtual"
      ]
    },
    {
      "name": "select-with-avatar",
      "content": "\"use client\"\nconst SelectValue = () => {\n  const select = useSelectContext()\n  const items = select.selectedItems as Array<{ name: string; avatar: string }>\n  const { name, avatar } = items[0]\n  return (\n    <Select.ValueText placeholder=\"Select member\">\n      <HStack>\n        <Avatar.Root shape=\"rounded\" size=\"2xs\">\n          <Avatar.Image src={avatar} alt={name} />\n          <Avatar.Fallback name={name} />\n        </Avatar.Root>\n        {name}\n      </HStack>\n    </Select.ValueText>\n  )\n}\n\nexport const SelectWithAvatar = () => {\n  return (\n    <Select.Root\n      collection={members}\n      size=\"sm\"\n      width=\"240px\"\n      defaultValue={[\"jessica_jones\"]}\n      positioning={{ sameWidth: true }}\n    >\n      <Select.HiddenSelect />\n      <Select.Label>Select member</Select.Label>\n      <Select.Control>\n        <Select.Trigger>\n          <SelectValue />\n        </Select.Trigger>\n        <Select.IndicatorGroup>\n          <Select.Indicator />\n        </Select.IndicatorGroup>\n      </Select.Control>\n      <Select.Positioner>\n        <Select.Content>\n          {members.items.map((item) => (\n            <Select.Item item={item} key={item.id} justifyContent=\"flex-start\">\n              <Avatar.Root shape=\"rounded\" size=\"2xs\">\n                <Avatar.Image src={item.avatar} alt={item.name} />\n                <Avatar.Fallback name={item.name} />\n              </Avatar.Root>\n              {item.name}\n              <Select.ItemIndicator />\n            </Select.Item>\n          ))}\n        </Select.Content>\n      </Select.Positioner>\n    </Select.Root>\n  )\n}\n\nconst members = createListCollection({\n  items: [\n    {\n      name: \"Jessica Jones\",\n      id: \"jessica_jones\",\n      avatar:\n        \"https://images.unsplash.com/photo-1531746020798-e6953c6e8e04?w=100\",\n    },\n    {\n      name: \"Kenneth Johnson\",\n      id: \"kenneth_johnson\",\n      avatar:\n        \"https://images.unsplash.com/photo-1523477800337-966dbabe060b?w=100\",\n    },\n    {\n      name: \"Kate Wilson\",\n      id: \"kate_wilson\",\n      avatar:\n        \"https://images.unsplash.com/photo-1609712409631-dbbb050746d1?w=100\",\n    },\n  ],\n  itemToString: (item) => item.name,\n  itemToValue: (item) => item.id,\n})\n",
      "hasSnippet": false,
      "importPaths": [
        "import {\n  Avatar,\n  HStack,\n  Select,\n  createListCollection,\n  useSelectContext,\n} from \"@chakra-ui/react\""
      ],
      "importPath": "import { Select } from \"@chakra-ui/react\""
    },
    {
      "name": "select-with-clear",
      "content": "\"use client\"\nexport const SelectWithClear = () => {\n  return (\n    <Select.Root\n      collection={animeMovies}\n      defaultValue={[\"spirited_away\"]}\n      size=\"sm\"\n      width=\"320px\"\n    >\n      <Select.HiddenSelect />\n      <Select.Label>Select fav. anime</Select.Label>\n      <Select.Control>\n        <Select.Trigger>\n          <Select.ValueText placeholder=\"Select anime\" />\n        </Select.Trigger>\n        <Select.IndicatorGroup>\n          <Select.ClearTrigger />\n          <Select.Indicator />\n        </Select.IndicatorGroup>\n      </Select.Control>\n      <Portal>\n        <Select.Positioner>\n          <Select.Content>\n            {animeMovies.items.map((anime) => (\n              <Select.Item item={anime} key={anime.value}>\n                {anime.label}\n                <Select.ItemIndicator />\n              </Select.Item>\n            ))}\n          </Select.Content>\n        </Select.Positioner>\n      </Portal>\n    </Select.Root>\n  )\n}\n\nconst animeMovies = createListCollection({\n  items: [\n    { label: \"Spirited Away\", value: \"spirited_away\" },\n    { label: \"My Neighbor Totoro\", value: \"my_neighbor_totoro\" },\n    { label: \"Akira\", value: \"akira\" },\n    { label: \"Princess Mononoke\", value: \"princess_mononoke\" },\n    { label: \"Grave of the Fireflies\", value: \"grave_of_the_fireflies\" },\n    { label: \"Howl's Moving Castle\", value: \"howls_moving_castle\" },\n    { label: \"Ghost in the Shell\", value: \"ghost_in_the_shell\" },\n    { label: \"Naruto\", value: \"naruto\" },\n    { label: \"Hunter x Hunter\", value: \"hunter_x_hunter\" },\n    { label: \"The Wind Rises\", value: \"the_wind_rises\" },\n    { label: \"Kiki's Delivery Service\", value: \"kikis_delivery_service\" },\n    { label: \"Perfect Blue\", value: \"perfect_blue\" },\n    {\n      label: \"The Girl Who Leapt Through Time\",\n      value: \"the_girl_who_leapt_through_time\",\n    },\n    { label: \"Weathering with You\", value: \"weathering_with_you\" },\n    { label: \"Ponyo\", value: \"ponyo\" },\n    { label: \"5 Centimeters per Second\", value: \"5_centimeters_per_second\" },\n    { label: \"A Silent Voice\", value: \"a_silent_voice\" },\n    { label: \"Paprika\", value: \"paprika\" },\n    { label: \"Wolf Children\", value: \"wolf_children\" },\n    { label: \"Redline\", value: \"redline\" },\n    {\n      label: \"The Tale of the Princess Kaguya\",\n      value: \"the_tale_of_the_princess_kaguya\",\n    },\n  ],\n})\n",
      "hasSnippet": false,
      "importPaths": [
        "import { Portal, Select, createListCollection } from \"@chakra-ui/react\""
      ],
      "importPath": "import { Select } from \"@chakra-ui/react\""
    },
    {
      "name": "select-with-country",
      "content": "\"use client\"\nexport const SelectWithCountry = () => {\n  return (\n    <Select.Root\n      collection={countries}\n      size=\"sm\"\n      width=\"320px\"\n      defaultValue={[\"NG\"]}\n    >\n      <Select.HiddenSelect />\n      <Select.Label>Select country</Select.Label>\n      <Select.Control>\n        <Select.Trigger>\n          <Select.ValueText placeholder=\"-\" />\n        </Select.Trigger>\n        <Select.IndicatorGroup>\n          <Select.Indicator />\n        </Select.IndicatorGroup>\n      </Select.Control>\n      <Portal>\n        <Select.Positioner>\n          <Select.Content>\n            {continents.map(([continent, items]) => (\n              <Select.ItemGroup key={continent}>\n                <Select.ItemGroupLabel>{continent}</Select.ItemGroupLabel>\n                {items.map((item) => (\n                  <Select.Item item={item} key={item.value}>\n                    {countries.stringifyItem(item)}\n                    <Select.ItemIndicator />\n                  </Select.Item>\n                ))}\n              </Select.ItemGroup>\n            ))}\n          </Select.Content>\n        </Select.Positioner>\n      </Portal>\n    </Select.Root>\n  )\n}\n\nconst countries = createListCollection({\n  items: [\n    { value: \"US\", label: \"United States\", flag: \"🇺🇸\", continent: \"America\" },\n    { value: \"CA\", label: \"Canada\", flag: \"🇨🇦\", continent: \"America\" },\n    { value: \"MX\", label: \"Mexico\", flag: \"🇲🇽\", continent: \"America\" },\n    { value: \"BR\", label: \"Brazil\", flag: \"🇧🇷\", continent: \"America\" },\n    { value: \"ZA\", label: \"South Africa\", flag: \"🇿🇦\", continent: \"Africa\" },\n    { value: \"NG\", label: \"Nigeria\", flag: \"🇳🇬\", continent: \"Africa\" },\n    { value: \"MA\", label: \"Morocco\", flag: \"🇲🇦\", continent: \"Africa\" },\n    { value: \"EG\", label: \"Egypt\", flag: \"🇪🇬\", continent: \"Africa\" },\n    { value: \"CN\", label: \"China\", flag: \"🇨🇳\", continent: \"Asia\" },\n    { value: \"JP\", label: \"Japan\", flag: \"🇯🇵\", continent: \"Asia\" },\n    { value: \"IN\", label: \"India\", flag: \"🇮🇳\", continent: \"Asia\" },\n    { value: \"KR\", label: \"South Korea\", flag: \"🇰🇷\", continent: \"Asia\" },\n    { value: \"GB\", label: \"United Kingdom\", flag: \"🇬🇧\", continent: \"Europe\" },\n    { value: \"FR\", label: \"France\", flag: \"🇫🇷\", continent: \"Europe\" },\n    { value: \"DE\", label: \"Germany\", flag: \"🇩🇪\", continent: \"Europe\" },\n    { value: \"IT\", label: \"Italy\", flag: \"🇮🇹\", continent: \"Europe\" },\n    { value: \"ES\", label: \"Spain\", flag: \"🇪🇸\", continent: \"Europe\" },\n    { value: \"AU\", label: \"Australia\", flag: \"🇦🇺\", continent: \"Oceania\" },\n    { value: \"NZ\", label: \"New Zealand\", flag: \"🇳🇿\", continent: \"Oceania\" },\n    { value: \"FJ\", label: \"Fiji\", flag: \"🇫🇯\", continent: \"Oceania\" },\n  ],\n  itemToString: (item) => `${item.flag} ${item.label}`,\n  itemToValue: (item) => item.value,\n})\n\nconst continents = Object.entries(\n  groupBy(countries.items, (item) => item.continent),\n)\n",
      "hasSnippet": false,
      "importPaths": [
        "import { Portal, Select, createListCollection } from \"@chakra-ui/react\"",
        "import { groupBy } from \"es-toolkit\""
      ],
      "importPath": "import { Select } from \"@chakra-ui/react\"",
      "npmDependencies": [
        "es-toolkit"
      ]
    },
    {
      "name": "select-with-disabled-option",
      "content": "\"use client\"\nexport const SelectWithDisabledOption = () => {\n  return (\n    <Select.Root collection={animals} size=\"sm\" width=\"320px\">\n      <Select.HiddenSelect />\n      <Select.Label>Select animal</Select.Label>\n      <Select.Control>\n        <Select.Trigger>\n          <Select.ValueText placeholder=\"Animal\" />\n        </Select.Trigger>\n        <Select.IndicatorGroup>\n          <Select.Indicator />\n        </Select.IndicatorGroup>\n      </Select.Control>\n      <Portal>\n        <Select.Positioner>\n          <Select.Content>\n            {animals.items.map((animal) => (\n              <Select.Item item={animal} key={animal.value}>\n                {animal.label}\n                <Select.ItemIndicator />\n              </Select.Item>\n            ))}\n          </Select.Content>\n        </Select.Positioner>\n      </Portal>\n    </Select.Root>\n  )\n}\n\nconst animals = createListCollection({\n  items: [\n    { label: \"Red Panda\", value: \"red panda\" },\n    { label: \"Cat\", value: \"cat\", disabled: true },\n    { label: \"Dog\", value: \"dog\" },\n    { label: \"Aardvark\", value: \"aardvark\", disabled: true },\n    { label: \"Kangaroo\", value: \"kangaroo\" },\n    { label: \"Snake\", value: \"snake\" },\n  ],\n})\n",
      "hasSnippet": false,
      "importPaths": [
        "import { Portal, Select, createListCollection } from \"@chakra-ui/react\""
      ],
      "importPath": "import { Select } from \"@chakra-ui/react\""
    },
    {
      "name": "select-with-disabled",
      "content": "\"use client\"\nexport const SelectWithDisabled = () => {\n  return (\n    <Select.Root disabled collection={frameworks} size=\"sm\" width=\"320px\">\n      <Select.HiddenSelect />\n      <Select.Label>Select framework</Select.Label>\n      <Select.Control>\n        <Select.Trigger>\n          <Select.ValueText placeholder=\"Select framework\" />\n        </Select.Trigger>\n        <Select.IndicatorGroup>\n          <Select.Indicator />\n        </Select.IndicatorGroup>\n      </Select.Control>\n      <Portal>\n        <Select.Positioner>\n          <Select.Content>\n            {frameworks.items.map((framework) => (\n              <Select.Item item={framework} key={framework.value}>\n                {framework.label}\n                <Select.ItemIndicator />\n              </Select.Item>\n            ))}\n          </Select.Content>\n        </Select.Positioner>\n      </Portal>\n    </Select.Root>\n  )\n}\n\nconst frameworks = createListCollection({\n  items: [\n    { label: \"React.js\", value: \"react\" },\n    { label: \"Vue.js\", value: \"vue\" },\n    { label: \"Angular\", value: \"angular\" },\n    { label: \"Svelte\", value: \"svelte\" },\n  ],\n})\n",
      "hasSnippet": false,
      "importPaths": [
        "import { Portal, Select, createListCollection } from \"@chakra-ui/react\""
      ],
      "importPath": "import { Select } from \"@chakra-ui/react\""
    },
    {
      "name": "select-with-hook-form",
      "content": "\"use client\"\nconst formSchema = z.object({\n  framework: z.string({ message: \"Framework is required\" }).array(),\n})\n\ntype FormValues = z.infer<typeof formSchema>\n\nexport const SelectWithHookForm = () => {\n  const {\n    handleSubmit,\n    formState: { errors },\n    control,\n  } = useForm<FormValues>({\n    resolver: zodResolver(formSchema),\n  })\n\n  const onSubmit = handleSubmit((data) => console.log(data))\n\n  return (\n    <form onSubmit={onSubmit}>\n      <Stack gap=\"4\" align=\"flex-start\">\n        <Field.Root invalid={!!errors.framework} width=\"320px\">\n          <Field.Label>Framework</Field.Label>\n          <Controller\n            control={control}\n            name=\"framework\"\n            render={({ field }) => (\n              <Select.Root\n                name={field.name}\n                value={field.value}\n                onValueChange={({ value }) => field.onChange(value)}\n                onInteractOutside={() => field.onBlur()}\n                collection={frameworks}\n              >\n                <Select.HiddenSelect />\n                <Select.Control>\n                  <Select.Trigger>\n                    <Select.ValueText placeholder=\"Select framework\" />\n                  </Select.Trigger>\n                  <Select.IndicatorGroup>\n                    <Select.Indicator />\n                  </Select.IndicatorGroup>\n                </Select.Control>\n                <Portal>\n                  <Select.Positioner>\n                    <Select.Content>\n                      {frameworks.items.map((framework) => (\n                        <Select.Item item={framework} key={framework.value}>\n                          {framework.label}\n                          <Select.ItemIndicator />\n                        </Select.Item>\n                      ))}\n                    </Select.Content>\n                  </Select.Positioner>\n                </Portal>\n              </Select.Root>\n            )}\n          />\n          <Field.ErrorText>{errors.framework?.message}</Field.ErrorText>\n        </Field.Root>\n\n        <Button size=\"sm\" type=\"submit\">\n          Submit\n        </Button>\n      </Stack>\n    </form>\n  )\n}\n\nconst frameworks = createListCollection({\n  items: [\n    { label: \"React.js\", value: \"react\" },\n    { label: \"Vue.js\", value: \"vue\" },\n    { label: \"Angular\", value: \"angular\" },\n    { label: \"Svelte\", value: \"svelte\" },\n  ],\n})\n",
      "hasSnippet": false,
      "importPaths": [
        "import {\n  Button,\n  Field,\n  Portal,\n  Select,\n  Stack,\n  createListCollection,\n} from \"@chakra-ui/react\"",
        "import { zodResolver } from \"@hookform/resolvers/zod\"",
        "import { Controller, useForm } from \"react-hook-form\"",
        "import { z } from \"zod\""
      ],
      "importPath": "import { Select } from \"@chakra-ui/react\"",
      "npmDependencies": [
        "@hookform/resolvers",
        "react-hook-form",
        "zod"
      ]
    },
    {
      "name": "select-with-icon-button",
      "content": "\"use client\"\nconst SelectTrigger = () => {\n  const select = useSelectContext()\n  const items = select.selectedItems as Framework[]\n  return (\n    <IconButton\n      px=\"2\"\n      variant=\"outline\"\n      size=\"sm\"\n      {...select.getTriggerProps()}\n    >\n      {select.hasSelectedItems ? items[0].icon : <RiForbidLine />}\n    </IconButton>\n  )\n}\n\nexport const SelectWithIconButton = () => {\n  return (\n    <Select.Root\n      positioning={{ sameWidth: false }}\n      collection={frameworks}\n      size=\"sm\"\n      width=\"320px\"\n      defaultValue={[\"react\"]}\n    >\n      <Select.HiddenSelect />\n      <Select.Control>\n        <SelectTrigger />\n      </Select.Control>\n      <Portal>\n        <Select.Positioner>\n          <Select.Content minW=\"32\">\n            {frameworks.items.map((framework) => (\n              <Select.Item item={framework} key={framework.value}>\n                <HStack>\n                  {framework.icon}\n                  {framework.label}\n                </HStack>\n                <Select.ItemIndicator />\n              </Select.Item>\n            ))}\n          </Select.Content>\n        </Select.Positioner>\n      </Portal>\n    </Select.Root>\n  )\n}\n\nconst frameworks = createListCollection({\n  items: [\n    { label: \"React.js\", value: \"react\", icon: <RiReactjsLine /> },\n    { label: \"Vue.js\", value: \"vue\", icon: <RiVuejsLine /> },\n    { label: \"Angular\", value: \"angular\", icon: <RiAngularjsLine /> },\n    { label: \"Svelte\", value: \"svelte\", icon: <RiSvelteLine /> },\n  ],\n})\n\ninterface Framework {\n  label: string\n  value: string\n  icon: React.ReactNode\n}\n",
      "hasSnippet": false,
      "importPaths": [
        "import {\n  HStack,\n  IconButton,\n  Portal,\n  Select,\n  createListCollection,\n  useSelectContext,\n} from \"@chakra-ui/react\"",
        "import {\n  RiAngularjsLine,\n  RiForbidLine,\n  RiReactjsLine,\n  RiSvelteLine,\n  RiVuejsLine,\n} from \"react-icons/ri\""
      ],
      "importPath": "import { Select } from \"@chakra-ui/react\"",
      "npmDependencies": [
        "react-icons"
      ]
    },
    {
      "name": "select-with-invalid",
      "content": "\"use client\"\nexport const SelectWithInvalid = () => {\n  return (\n    <Field.Root invalid>\n      <Select.Root collection={frameworks} size=\"sm\" width=\"320px\">\n        <Select.HiddenSelect />\n        <Select.Label>Select framework</Select.Label>\n        <Select.Control>\n          <Select.Trigger>\n            <Select.ValueText placeholder=\"Select framework\" />\n          </Select.Trigger>\n          <Select.IndicatorGroup>\n            <Select.Indicator />\n          </Select.IndicatorGroup>\n        </Select.Control>\n        <Portal>\n          <Select.Positioner>\n            <Select.Content>\n              {frameworks.items.map((framework) => (\n                <Select.Item item={framework} key={framework.value}>\n                  {framework.label}\n                  <Select.ItemIndicator />\n                </Select.Item>\n              ))}\n            </Select.Content>\n          </Select.Positioner>\n        </Portal>\n      </Select.Root>\n      <Field.ErrorText>This is an error</Field.ErrorText>\n    </Field.Root>\n  )\n}\n\nconst frameworks = createListCollection({\n  items: [\n    { label: \"React.js\", value: \"react\" },\n    { label: \"Vue.js\", value: \"vue\" },\n    { label: \"Angular\", value: \"angular\" },\n    { label: \"Svelte\", value: \"svelte\" },\n  ],\n})\n",
      "hasSnippet": false,
      "importPaths": [
        "import { Field, Portal, Select, createListCollection } from \"@chakra-ui/react\""
      ],
      "importPath": "import { Select } from \"@chakra-ui/react\""
    },
    {
      "name": "select-with-item-description",
      "content": "\"use client\"\nexport const SelectWithItemDescription = () => {\n  return (\n    <Select.Root\n      collection={frameworks}\n      size=\"sm\"\n      width=\"320px\"\n      defaultValue={[\"pro\"]}\n    >\n      <Select.HiddenSelect />\n      <Select.Label>Select plan</Select.Label>\n      <Select.Control>\n        <Select.Trigger>\n          <Select.ValueText placeholder=\"Select plan\" />\n        </Select.Trigger>\n        <Select.IndicatorGroup>\n          <Select.Indicator />\n        </Select.IndicatorGroup>\n      </Select.Control>\n      <Portal>\n        <Select.Positioner>\n          <Select.Content>\n            {frameworks.items.map((framework) => (\n              <Select.Item item={framework} key={framework.value}>\n                <Stack gap=\"0\">\n                  <Select.ItemText>{framework.label}</Select.ItemText>\n                  <Span color=\"fg.muted\" textStyle=\"xs\">\n                    {framework.description}\n                  </Span>\n                </Stack>\n                <Select.ItemIndicator />\n              </Select.Item>\n            ))}\n          </Select.Content>\n        </Select.Positioner>\n      </Portal>\n    </Select.Root>\n  )\n}\n\nconst frameworks = createListCollection({\n  items: [\n    {\n      label: \"Basic Plan\",\n      value: \"basic\",\n      description: \"$9/month - Perfect for small projects\",\n    },\n    {\n      label: \"Pro Plan\",\n      value: \"pro\",\n      description: \"$29/month - Advanced features\",\n    },\n    {\n      label: \"Business Plan\",\n      value: \"business\",\n      description: \"$99/month - Enterprise-grade solutions\",\n    },\n    {\n      label: \"Enterprise Plan\",\n      value: \"enterprise\",\n      description: \"Custom pricing - Tailored solutions\",\n    },\n  ],\n})\n",
      "hasSnippet": false,
      "importPaths": [
        "import {\n  Portal,\n  Select,\n  Span,\n  Stack,\n  createListCollection,\n} from \"@chakra-ui/react\""
      ],
      "importPath": "import { Select } from \"@chakra-ui/react\""
    },
    {
      "name": "select-with-multiple",
      "content": "\"use client\"\nexport const SelectWithMultiple = () => {\n  return (\n    <Select.Root multiple collection={frameworks} size=\"sm\" width=\"320px\">\n      <Select.HiddenSelect />\n      <Select.Label>Select framework</Select.Label>\n      <Select.Control>\n        <Select.Trigger>\n          <Select.ValueText placeholder=\"Select framework\" />\n        </Select.Trigger>\n        <Select.IndicatorGroup>\n          <Select.Indicator />\n        </Select.IndicatorGroup>\n      </Select.Control>\n      <Portal>\n        <Select.Positioner>\n          <Select.Content>\n            {frameworks.items.map((framework) => (\n              <Select.Item item={framework} key={framework.value}>\n                {framework.label}\n                <Select.ItemIndicator />\n              </Select.Item>\n            ))}\n          </Select.Content>\n        </Select.Positioner>\n      </Portal>\n    </Select.Root>\n  )\n}\n\nconst frameworks = createListCollection({\n  items: [\n    { label: \"React.js\", value: \"react\" },\n    { label: \"Vue.js\", value: \"vue\" },\n    { label: \"Angular\", value: \"angular\" },\n    { label: \"Svelte\", value: \"svelte\" },\n  ],\n})\n",
      "hasSnippet": false,
      "importPaths": [
        "import { Portal, Select, createListCollection } from \"@chakra-ui/react\""
      ],
      "importPath": "import { Select } from \"@chakra-ui/react\""
    },
    {
      "name": "select-with-native-form",
      "content": "\"use client\"\nexport const SelectWithNativeForm = () => {\n  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault()\n    const formData = new FormData(event.currentTarget)\n    console.log(formData.get(\"framework\"))\n  }\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <Stack gap=\"4\" align=\"flex-start\" maxW=\"sm\">\n        <Select.Root collection={frameworks} size=\"sm\" name=\"framework\">\n          <Select.HiddenSelect />\n          <Select.Label>Select framework</Select.Label>\n          <Select.Control>\n            <Select.Trigger>\n              <Select.ValueText placeholder=\"Select framework\" />\n            </Select.Trigger>\n            <Select.IndicatorGroup>\n              <Select.Indicator />\n            </Select.IndicatorGroup>\n          </Select.Control>\n          <Portal>\n            <Select.Positioner>\n              <Select.Content>\n                {frameworks.items.map((framework) => (\n                  <Select.Item item={framework} key={framework.value}>\n                    {framework.label}\n                    <Select.ItemIndicator />\n                  </Select.Item>\n                ))}\n              </Select.Content>\n            </Select.Positioner>\n          </Portal>\n        </Select.Root>\n        <Button type=\"submit\">Submit</Button>\n      </Stack>\n    </form>\n  )\n}\n\nconst frameworks = createListCollection({\n  items: [\n    { label: \"React.js\", value: \"react\" },\n    { label: \"Vue.js\", value: \"vue\" },\n    { label: \"Angular\", value: \"angular\" },\n    { label: \"Svelte\", value: \"svelte\" },\n  ],\n})\n",
      "hasSnippet": false,
      "importPaths": [
        "import {\n  Button,\n  Portal,\n  Select,\n  Stack,\n  createListCollection,\n} from \"@chakra-ui/react\""
      ],
      "importPath": "import { Select } from \"@chakra-ui/react\""
    },
    {
      "name": "select-with-option-group",
      "content": "\"use client\"\nexport const SelectWithOptionGroup = () => {\n  return (\n    <Select.Root collection={collection} size=\"sm\" width=\"320px\">\n      <Select.HiddenSelect />\n      <Select.Label>Select framework</Select.Label>\n      <Select.Control>\n        <Select.Trigger>\n          <Select.ValueText placeholder=\"Select framework\" />\n        </Select.Trigger>\n        <Select.IndicatorGroup>\n          <Select.Indicator />\n        </Select.IndicatorGroup>\n      </Select.Control>\n      <Portal>\n        <Select.Positioner>\n          <Select.Content>\n            {categories.map(([category, items]) => (\n              <Select.ItemGroup key={category}>\n                <Select.ItemGroupLabel>{category}</Select.ItemGroupLabel>\n                {items.map((item) => (\n                  <Select.Item item={item} key={item.value}>\n                    {item.label}\n                    <Select.ItemIndicator />\n                  </Select.Item>\n                ))}\n              </Select.ItemGroup>\n            ))}\n          </Select.Content>\n        </Select.Positioner>\n      </Portal>\n    </Select.Root>\n  )\n}\n\nconst collection = createListCollection({\n  items: [\n    { label: \"Naruto\", value: \"naruto\", category: \"Anime\" },\n    { label: \"One Piece\", value: \"one-piece\", category: \"Anime\" },\n    { label: \"Dragon Ball\", value: \"dragon-ball\", category: \"Anime\" },\n    {\n      label: \"The Shawshank Redemption\",\n      value: \"the-shawshank-redemption\",\n      category: \"Movies\",\n    },\n    { label: \"The Godfather\", value: \"the-godfather\", category: \"Movies\" },\n    { label: \"The Dark Knight\", value: \"the-dark-knight\", category: \"Movies\" },\n  ],\n})\n\nconst categories = Object.entries(\n  groupBy(collection.items, (item) => item.category),\n)\n",
      "hasSnippet": false,
      "importPaths": [
        "import { Portal, Select, createListCollection } from \"@chakra-ui/react\"",
        "import { groupBy } from \"es-toolkit\""
      ],
      "importPath": "import { Select } from \"@chakra-ui/react\"",
      "npmDependencies": [
        "es-toolkit"
      ]
    },
    {
      "name": "select-with-overflow",
      "content": "\"use client\"\nexport const SelectWithOverflow = () => {\n  return (\n    <Select.Root collection={animeMovies} size=\"sm\" width=\"240px\">\n      <Select.HiddenSelect />\n      <Select.Label>Select anime</Select.Label>\n      <Select.Control>\n        <Select.Trigger>\n          <Select.ValueText placeholder=\"Select movie\" />\n        </Select.Trigger>\n        <Select.IndicatorGroup>\n          <Select.Indicator />\n        </Select.IndicatorGroup>\n      </Select.Control>\n      <Portal>\n        <Select.Positioner>\n          <Select.Content>\n            {animeMovies.items.map((movie) => (\n              <Select.Item item={movie} key={movie.value}>\n                {movie.label}\n                <Select.ItemIndicator />\n              </Select.Item>\n            ))}\n          </Select.Content>\n        </Select.Positioner>\n      </Portal>\n    </Select.Root>\n  )\n}\n\nconst animeMovies = createListCollection({\n  items: [\n    { label: \"Spirited Away\", value: \"spirited_away\" },\n    { label: \"My Neighbor Totoro\", value: \"my_neighbor_totoro\" },\n    { label: \"Akira\", value: \"akira\" },\n    { label: \"Princess Mononoke\", value: \"princess_mononoke\" },\n    { label: \"Grave of the Fireflies\", value: \"grave_of_the_fireflies\" },\n    { label: \"Howl's Moving Castle\", value: \"howls_moving_castle\" },\n    { label: \"Ghost in the Shell\", value: \"ghost_in_the_shell\" },\n    { label: \"Naruto\", value: \"naruto\" },\n    { label: \"Hunter x Hunter\", value: \"hunter_x_hunter\" },\n    { label: \"The Wind Rises\", value: \"the_wind_rises\" },\n    { label: \"Kiki's Delivery Service\", value: \"kikis_delivery_service\" },\n    { label: \"Perfect Blue\", value: \"perfect_blue\" },\n    {\n      label: \"The Girl Who Leapt Through Time\",\n      value: \"the_girl_who_leapt_through_time\",\n    },\n    { label: \"Weathering with You\", value: \"weathering_with_you\" },\n    { label: \"Ponyo\", value: \"ponyo\" },\n    { label: \"5 Centimeters per Second\", value: \"5_centimeters_per_second\" },\n    { label: \"A Silent Voice\", value: \"a_silent_voice\" },\n    { label: \"Paprika\", value: \"paprika\" },\n    { label: \"Wolf Children\", value: \"wolf_children\" },\n    { label: \"Redline\", value: \"redline\" },\n    {\n      label: \"The Tale of the Princess Kaguya\",\n      value: \"the_tale_of_the_princess_kaguya\",\n    },\n  ],\n})\n",
      "hasSnippet": false,
      "importPaths": [
        "import { Portal, Select, createListCollection } from \"@chakra-ui/react\""
      ],
      "importPath": "import { Select } from \"@chakra-ui/react\""
    },
    {
      "name": "select-with-positioning",
      "content": "\"use client\"\nexport const SelectWithPositioning = () => {\n  return (\n    <Select.Root\n      collection={frameworks}\n      size=\"sm\"\n      width=\"320px\"\n      positioning={{ placement: \"top\", flip: false }}\n    >\n      <Select.HiddenSelect />\n      <Select.Label>Select framework</Select.Label>\n      <Select.Control>\n        <Select.Trigger>\n          <Select.ValueText placeholder=\"Select framework\" />\n        </Select.Trigger>\n        <Select.IndicatorGroup>\n          <Select.Indicator />\n        </Select.IndicatorGroup>\n      </Select.Control>\n      <Portal>\n        <Select.Positioner>\n          <Select.Content>\n            {frameworks.items.map((framework) => (\n              <Select.Item item={framework} key={framework.value}>\n                {framework.label}\n                <Select.ItemIndicator />\n              </Select.Item>\n            ))}\n          </Select.Content>\n        </Select.Positioner>\n      </Portal>\n    </Select.Root>\n  )\n}\n\nconst frameworks = createListCollection({\n  items: [\n    { label: \"React.js\", value: \"react\" },\n    { label: \"Vue.js\", value: \"vue\" },\n    { label: \"Angular\", value: \"angular\" },\n    { label: \"Svelte\", value: \"svelte\" },\n  ],\n})\n",
      "hasSnippet": false,
      "importPaths": [
        "import { Portal, Select, createListCollection } from \"@chakra-ui/react\""
      ],
      "importPath": "import { Select } from \"@chakra-ui/react\""
    },
    {
      "name": "select-with-sizes",
      "content": "\"use client\"\nexport const SelectWithSizes = () => {\n  return (\n    <Stack gap=\"5\" width=\"320px\">\n      <For each={[\"xs\", \"sm\", \"md\", \"lg\"]}>\n        {(size) => (\n          <Select.Root key={size} size={size} collection={frameworks}>\n            <Select.HiddenSelect />\n            <Select.Label>size = {size}</Select.Label>\n            <Select.Control>\n              <Select.Trigger>\n                <Select.ValueText placeholder=\"Select framework\" />\n              </Select.Trigger>\n              <Select.IndicatorGroup>\n                <Select.Indicator />\n              </Select.IndicatorGroup>\n            </Select.Control>\n            <Portal>\n              <Select.Positioner>\n                <Select.Content>\n                  {frameworks.items.map((framework) => (\n                    <Select.Item item={framework} key={framework.value}>\n                      {framework.label}\n                      <Select.ItemIndicator />\n                    </Select.Item>\n                  ))}\n                </Select.Content>\n              </Select.Positioner>\n            </Portal>\n          </Select.Root>\n        )}\n      </For>\n    </Stack>\n  )\n}\n\nconst frameworks = createListCollection({\n  items: [\n    { label: \"React.js\", value: \"react\" },\n    { label: \"Vue.js\", value: \"vue\" },\n    { label: \"Angular\", value: \"angular\" },\n    { label: \"Svelte\", value: \"svelte\" },\n  ],\n})\n",
      "hasSnippet": false,
      "importPaths": [
        "import {\n  For,\n  Portal,\n  Select,\n  Stack,\n  createListCollection,\n} from \"@chakra-ui/react\""
      ],
      "importPath": "import { Select } from \"@chakra-ui/react\""
    },
    {
      "name": "select-with-variants",
      "content": "\"use client\"\nexport const SelectWithVariants = () => {\n  return (\n    <Stack gap=\"5\" width=\"320px\">\n      <For each={[\"outline\", \"subtle\"]}>\n        {(variant) => (\n          <Select.Root key={variant} variant={variant} collection={frameworks}>\n            <Select.HiddenSelect />\n            <Select.Label>Select framework - {variant}</Select.Label>\n            <Select.Control>\n              <Select.Trigger>\n                <Select.ValueText placeholder=\"Select framework\" />\n              </Select.Trigger>\n              <Select.IndicatorGroup>\n                <Select.Indicator />\n              </Select.IndicatorGroup>\n            </Select.Control>\n            <Portal>\n              <Select.Positioner>\n                <Select.Content>\n                  {frameworks.items.map((framework) => (\n                    <Select.Item item={framework} key={framework.value}>\n                      {framework.label}\n                      <Select.ItemIndicator />\n                    </Select.Item>\n                  ))}\n                </Select.Content>\n              </Select.Positioner>\n            </Portal>\n          </Select.Root>\n        )}\n      </For>\n    </Stack>\n  )\n}\n\nconst frameworks = createListCollection({\n  items: [\n    { label: \"React.js\", value: \"react\" },\n    { label: \"Vue.js\", value: \"vue\" },\n    { label: \"Angular\", value: \"angular\" },\n    { label: \"Svelte\", value: \"svelte\" },\n  ],\n})\n",
      "hasSnippet": false,
      "importPaths": [
        "import {\n  For,\n  Portal,\n  Select,\n  Stack,\n  createListCollection,\n} from \"@chakra-ui/react\""
      ],
      "importPath": "import { Select } from \"@chakra-ui/react\""
    }
  ]
}