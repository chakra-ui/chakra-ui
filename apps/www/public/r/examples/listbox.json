{
  "name": "listbox",
  "snippet": null,
  "examples": [
    {
      "name": "listbox-basic",
      "content": "\"use client\"\nexport const ListboxBasic = () => {\n  return (\n    <Listbox.Root collection={frameworks} width=\"320px\">\n      <Listbox.Label>Select framework</Listbox.Label>\n      <Listbox.Content>\n        {frameworks.items.map((framework) => (\n          <Listbox.Item item={framework} key={framework.value}>\n            <Listbox.ItemText>{framework.label}</Listbox.ItemText>\n            <Listbox.ItemIndicator />\n          </Listbox.Item>\n        ))}\n      </Listbox.Content>\n    </Listbox.Root>\n  )\n}\n\nconst frameworks = createListCollection({\n  items: [\n    { label: \"React.js\", value: \"react\" },\n    { label: \"Vue.js\", value: \"vue\" },\n    { label: \"Angular\", value: \"angular\" },\n    { label: \"Svelte\", value: \"svelte\" },\n  ],\n})\n",
      "hasSnippet": false,
      "importPaths": [
        "import { Listbox, createListCollection } from \"@chakra-ui/react\""
      ],
      "importPath": "import { Listbox } from \"@chakra-ui/react\""
    },
    {
      "name": "listbox-controlled",
      "content": "\"use client\"\nexport const ListboxControlled = () => {\n  const [value, setValue] = useState<string[]>([])\n\n  return (\n    <Stack maxWidth=\"320px\" width=\"full\" gap=\"4\">\n      <Listbox.Root\n        collection={frameworks}\n        value={value}\n        onValueChange={(details) => setValue(details.value)}\n      >\n        <Listbox.Label>Select framework</Listbox.Label>\n        <Listbox.Content>\n          {frameworks.items.map((framework) => (\n            <Listbox.Item item={framework} key={framework.value}>\n              <Listbox.ItemText>{framework.label}</Listbox.ItemText>\n              <Listbox.ItemIndicator />\n            </Listbox.Item>\n          ))}\n        </Listbox.Content>\n      </Listbox.Root>\n\n      <Code alignSelf=\"flex-start\">\n        Selected: {JSON.stringify(value, null, 2)}\n      </Code>\n    </Stack>\n  )\n}\n\nconst frameworks = createListCollection({\n  items: [\n    { label: \"React.js\", value: \"react\" },\n    { label: \"Vue.js\", value: \"vue\" },\n    { label: \"Angular\", value: \"angular\" },\n    { label: \"Svelte\", value: \"svelte\" },\n  ],\n})\n",
      "hasSnippet": false,
      "importPaths": [
        "import { Code, Listbox, Stack, createListCollection } from \"@chakra-ui/react\"",
        "import { useState } from \"react\""
      ],
      "importPath": "import { Listbox } from \"@chakra-ui/react\""
    },
    {
      "name": "listbox-disabled-item",
      "content": "\"use client\"\nexport const ListboxDisabledItem = () => {\n  return (\n    <Listbox.Root collection={frameworks} width=\"320px\">\n      <Listbox.Label>Select framework</Listbox.Label>\n      <Listbox.Content>\n        {frameworks.items.map((framework) => (\n          <Listbox.Item item={framework} key={framework.value}>\n            <Listbox.ItemText>{framework.label}</Listbox.ItemText>\n            <Listbox.ItemIndicator />\n          </Listbox.Item>\n        ))}\n      </Listbox.Content>\n    </Listbox.Root>\n  )\n}\n\nconst frameworks = createListCollection({\n  items: [\n    { label: \"React.js\", value: \"react\" },\n    { label: \"Vue.js\", value: \"vue\", disabled: true },\n    { label: \"Angular\", value: \"angular\" },\n    { label: \"Svelte\", value: \"svelte\", disabled: true },\n    { label: \"Next.js\", value: \"nextjs\" },\n  ],\n})\n",
      "hasSnippet": false,
      "importPaths": [
        "import { Listbox, createListCollection } from \"@chakra-ui/react\""
      ],
      "importPath": "import { Listbox } from \"@chakra-ui/react\""
    },
    {
      "name": "listbox-explorer",
      "content": "\"use client\"\nexport const ListboxExplorer = () => {\n  const { contains } = useFilter({ sensitivity: \"base\" })\n\n  const initialItems = [\n    {\n      label: \"React.js\",\n      value: \"react\",\n      icon: <LuAtom size={16} />,\n      category: \"JavaScript\",\n    },\n    {\n      label: \"Vue.js\",\n      value: \"vue\",\n      icon: <LuPalette size={16} />,\n      category: \"JavaScript\",\n    },\n    {\n      label: \"Angular\",\n      value: \"angular\",\n      icon: <LuGlobe size={16} />,\n      category: \"JavaScript\",\n    },\n    {\n      label: \"Svelte\",\n      value: \"svelte\",\n      icon: <LuZap size={16} />,\n      category: \"JavaScript\",\n    },\n    { label: \"Naruto\", value: \"naruto\", category: \"Anime\" },\n    { label: \"One Piece\", value: \"one-piece\", category: \"Anime\" },\n    { label: \"The Godfather\", value: \"godfather\", category: \"Movies\" },\n    { label: \"The Dark Knight\", value: \"dark-knight\", category: \"Movies\" },\n  ]\n\n  const { collection, filter } = useListCollection({\n    initialItems,\n    filter: contains,\n    groupBy: (item) => item.category,\n  })\n\n  return (\n    <Listbox.Root\n      maxW=\"320px\"\n      collection={collection}\n      defaultValue={[collection.items[0].value]}\n    >\n      <Listbox.Label>Select item</Listbox.Label>\n\n      <Listbox.Input\n        as={Input}\n        placeholder=\"Type to filter...\"\n        onChange={(e) => filter(e.target.value)}\n      />\n\n      <Listbox.Content maxH=\"240px\" divideY=\"1px\">\n        {collection.group().map(([category, items]) => (\n          <Listbox.ItemGroup key={category}>\n            <Listbox.ItemGroupLabel>{category}</Listbox.ItemGroupLabel>\n            {items.map((item) => (\n              <Listbox.Item item={item} key={item.value}>\n                <Box display=\"flex\" alignItems=\"center\" gap=\"3\" flex=\"1\">\n                  {item.icon && (\n                    <Box color=\"fg.muted\" flexShrink=\"0\">\n                      {item.icon}\n                    </Box>\n                  )}\n                  <Listbox.ItemText>{item.label}</Listbox.ItemText>\n                </Box>\n                <Listbox.ItemIndicator />\n              </Listbox.Item>\n            ))}\n          </Listbox.ItemGroup>\n        ))}\n        <Listbox.Empty>No results found</Listbox.Empty>\n      </Listbox.Content>\n    </Listbox.Root>\n  )\n}\n",
      "hasSnippet": false,
      "importPaths": [
        "import {\n  Box,\n  Input,\n  Listbox,\n  useFilter,\n  useListCollection,\n} from \"@chakra-ui/react\"",
        "import { LuAtom, LuGlobe, LuPalette, LuZap } from \"react-icons/lu\""
      ],
      "importPath": "import { Listbox } from \"@chakra-ui/react\"",
      "npmDependencies": [
        "react-icons"
      ]
    },
    {
      "name": "listbox-extended-select",
      "content": "\"use client\"\nexport const ListboxExtendedSelect = () => {\n  return (\n    <Listbox.Root collection={frameworks} selectionMode=\"extended\">\n      <Listbox.Label>\n        Select frameworks (hold <Kbd>⌘</Kbd> or <Kbd>^</Kbd> to select multiple)\n      </Listbox.Label>\n      <Listbox.Content maxW=\"320px\">\n        {frameworks.items.map((framework) => (\n          <Listbox.Item item={framework} key={framework.value}>\n            <Listbox.ItemText>{framework.label}</Listbox.ItemText>\n            <Listbox.ItemIndicator />\n          </Listbox.Item>\n        ))}\n      </Listbox.Content>\n    </Listbox.Root>\n  )\n}\n\nconst frameworks = createListCollection({\n  items: [\n    { label: \"React.js\", value: \"react\" },\n    { label: \"Vue.js\", value: \"vue\" },\n    { label: \"Angular\", value: \"angular\" },\n    { label: \"Svelte\", value: \"svelte\" },\n  ],\n})\n",
      "hasSnippet": false,
      "importPaths": [
        "import { Kbd, Listbox, createListCollection } from \"@chakra-ui/react\""
      ],
      "importPath": "import { Listbox } from \"@chakra-ui/react\""
    },
    {
      "name": "listbox-grouped",
      "content": "\"use client\"\nexport const ListboxGrouped = () => {\n  return (\n    <Listbox.Root collection={collection} width=\"320px\">\n      <Listbox.Label>Select media</Listbox.Label>\n      <Listbox.Content divideY=\"1px\">\n        {collection.group().map(([category, items]) => (\n          <Listbox.ItemGroup key={category}>\n            <Listbox.ItemGroupLabel>{category}</Listbox.ItemGroupLabel>\n            {items.map((item) => (\n              <Listbox.Item item={item} key={item.value}>\n                <Listbox.ItemText>{item.label}</Listbox.ItemText>\n                <Listbox.ItemIndicator />\n              </Listbox.Item>\n            ))}\n          </Listbox.ItemGroup>\n        ))}\n      </Listbox.Content>\n    </Listbox.Root>\n  )\n}\n\nconst collection = createListCollection({\n  items: [\n    { label: \"Naruto\", value: \"naruto\", category: \"Anime\" },\n    { label: \"One Piece\", value: \"one-piece\", category: \"Anime\" },\n    { label: \"Dragon Ball\", value: \"dragon-ball\", category: \"Anime\" },\n    {\n      label: \"The Shawshank Redemption\",\n      value: \"the-shawshank-redemption\",\n      category: \"Movies\",\n    },\n    { label: \"The Godfather\", value: \"the-godfather\", category: \"Movies\" },\n    { label: \"The Dark Knight\", value: \"the-dark-knight\", category: \"Movies\" },\n  ],\n  groupBy: (item) => item.category,\n})\n",
      "hasSnippet": false,
      "importPaths": [
        "import { Listbox, createListCollection } from \"@chakra-ui/react\""
      ],
      "importPath": "import { Listbox } from \"@chakra-ui/react\""
    },
    {
      "name": "listbox-horizontal",
      "content": "\"use client\"\nexport const ListboxHorizontal = () => {\n  return (\n    <Listbox.Root\n      collection={musicAlbums}\n      orientation=\"horizontal\"\n      maxW=\"640px\"\n    >\n      <Listbox.Label>Select Album</Listbox.Label>\n      <Listbox.Content>\n        {musicAlbums.items.map((album) => (\n          <Listbox.Item\n            item={album}\n            key={album.value}\n            flexDirection=\"column\"\n            alignItems=\"flex-start\"\n            gap=\"2\"\n            position=\"relative\"\n          >\n            <Image\n              src={album.image}\n              alt={album.title}\n              bg=\"bg.subtle\"\n              objectFit=\"cover\"\n              aspectRatio=\"1\"\n              borderRadius=\"l2\"\n              flexShrink=\"0\"\n              height=\"150px\"\n              minWidth=\"150px\"\n            />\n            <Stack gap=\"0\">\n              <Text fontSize=\"sm\" fontWeight=\"medium\" whiteSpace=\"nowrap\">\n                {album.title}\n              </Text>\n              <Text fontSize=\"xs\">{album.artist}</Text>\n            </Stack>\n            <Listbox.ItemIndicator\n              position=\"absolute\"\n              top=\"4\"\n              right=\"4\"\n              layerStyle=\"fill.solid\"\n              borderWidth=\"2px\"\n              borderColor=\"fg.inverted\"\n            />\n          </Listbox.Item>\n        ))}\n      </Listbox.Content>\n    </Listbox.Root>\n  )\n}\n\nconst musicAlbums = createListCollection({\n  items: [\n    {\n      value: \"euphoric-echoes\",\n      title: \"Euphoric Echoes\",\n      artist: \"Luna Solstice\",\n      image:\n        \"https://images.unsplash.com/photo-1493225457124-a3eb161ffa5f?w=160&h=160&fit=crop\",\n    },\n    {\n      value: \"neon-dreamscape\",\n      title: \"Neon Dreamscape\",\n      artist: \"Electra Skyline\",\n      image:\n        \"https://images.unsplash.com/photo-1470225620780-dba8ba36b745?w=160&h=160&fit=crop\",\n    },\n    {\n      value: \"cosmic-serenade\",\n      title: \"Cosmic Serenade\",\n      artist: \"Orion's Symphony\",\n      image:\n        \"https://images.unsplash.com/photo-1514525253161-7a46d19cd819?w=160&h=160&fit=crop\",\n    },\n    {\n      value: \"melancholy-melodies\",\n      title: \"Melancholy Melodies\",\n      artist: \"Violet Mistral\",\n      image:\n        \"https://images.unsplash.com/photo-1571330735066-03aaa9429d89?w=160&h=160&fit=crop\",\n    },\n    {\n      value: \"rhythmic-illusions\",\n      title: \"Rhythmic Illusions\",\n      artist: \"Mirage Beats\",\n      image:\n        \"https://images.unsplash.com/photo-1506905925346-21bda4d32df4?w=160&h=160&fit=crop\",\n    },\n  ],\n})\n",
      "hasSnippet": false,
      "importPaths": [
        "import {\n  Image,\n  Listbox,\n  Stack,\n  Text,\n  createListCollection,\n} from \"@chakra-ui/react\""
      ],
      "importPath": "import { Listbox } from \"@chakra-ui/react\""
    },
    {
      "name": "listbox-image-explorer",
      "content": "\"use client\"\nexport const ListboxImageExplorer = () => {\n  const [selectedImage, setSelectedImage] = useState<string>(\"mountains\")\n\n  const handleSelectionChange = (details: any) => {\n    if (details.value.length > 0) {\n      setSelectedImage(details.value[0])\n    }\n  }\n\n  const currentImage = images.items.find((img) => img.value === selectedImage)\n\n  return (\n    <Flex gap=\"6\" maxW=\"800px\">\n      <Listbox.Root\n        maxW=\"2xs\"\n        collection={images}\n        value={[selectedImage]}\n        onValueChange={handleSelectionChange}\n        variant=\"solid\"\n      >\n        <Listbox.Content border=\"0\">\n          {images.items.map((image) => (\n            <Listbox.Item item={image} key={image.value}>\n              <Listbox.ItemText>{image.label}</Listbox.ItemText>\n              <Listbox.ItemIndicator />\n            </Listbox.Item>\n          ))}\n        </Listbox.Content>\n      </Listbox.Root>\n\n      <Box flex=\"1\">\n        {currentImage && (\n          <Box>\n            <Text fontSize=\"lg\" fontWeight=\"semibold\" mb=\"3\">\n              {currentImage.label}\n            </Text>\n            <Image\n              src={currentImage.url}\n              alt={currentImage.label}\n              borderRadius=\"md\"\n              maxH=\"400px\"\n              width=\"full\"\n              objectFit=\"cover\"\n            />\n            <Text fontSize=\"sm\" color=\"fg.muted\" mt=\"2\">\n              {currentImage.description}\n            </Text>\n          </Box>\n        )}\n      </Box>\n    </Flex>\n  )\n}\n\nconst images = createListCollection({\n  items: [\n    {\n      label: \"Mountain Landscape\",\n      value: \"mountains\",\n      description: \"Scenic mountain view\",\n      url: \"https://images.unsplash.com/photo-1506905925346-21bda4d32df4?w=400&h=300&fit=crop\",\n    },\n    {\n      label: \"Ocean Waves\",\n      value: \"ocean\",\n      description: \"Peaceful ocean scene\",\n      url: \"https://images.unsplash.com/photo-1505142468610-359e7d316be0?w=400&h=300&fit=crop\",\n    },\n    {\n      label: \"Forest Path\",\n      value: \"forest\",\n      description: \"Tranquil forest trail\",\n      url: \"https://images.unsplash.com/photo-1441974231531-c6227db76b6e?w=400&h=300&fit=crop\",\n    },\n    {\n      label: \"City Skyline\",\n      value: \"city\",\n      description: \"Urban cityscape at night\",\n      url: \"https://images.unsplash.com/photo-1449824913935-59a10b8d2000?w=400&h=300&fit=crop\",\n    },\n    {\n      label: \"Desert Dunes\",\n      value: \"desert\",\n      description: \"Golden sand dunes\",\n      url: \"https://images.unsplash.com/photo-1509316975850-ff9c5deb0cd9?w=400&h=300&fit=crop\",\n    },\n  ],\n})\n",
      "hasSnippet": false,
      "importPaths": [
        "import {\n  Box,\n  Flex,\n  Image,\n  Listbox,\n  Text,\n  createListCollection,\n} from \"@chakra-ui/react\"",
        "import { useState } from \"react\""
      ],
      "importPath": "import { Listbox } from \"@chakra-ui/react\""
    },
    {
      "name": "listbox-multiselect",
      "content": "\"use client\"\nexport const ListboxMultiselect = () => {\n  return (\n    <Listbox.Root collection={frameworks} selectionMode=\"multiple\" maxW=\"320px\">\n      <Listbox.Label>Select frameworks (multiple)</Listbox.Label>\n      <Listbox.Content>\n        {frameworks.items.map((framework) => (\n          <Listbox.Item item={framework} key={framework.value}>\n            <Listbox.ItemText>{framework.label}</Listbox.ItemText>\n            <Listbox.ItemIndicator />\n          </Listbox.Item>\n        ))}\n      </Listbox.Content>\n    </Listbox.Root>\n  )\n}\n\nconst frameworks = createListCollection({\n  items: [\n    { label: \"React.js\", value: \"react\" },\n    { label: \"Vue.js\", value: \"vue\" },\n    { label: \"Angular\", value: \"angular\" },\n    { label: \"Svelte\", value: \"svelte\" },\n    { label: \"Next.js\", value: \"nextjs\" },\n    { label: \"Nuxt.js\", value: \"nuxtjs\" },\n  ],\n})\n",
      "hasSnippet": false,
      "importPaths": [
        "import { Listbox, createListCollection } from \"@chakra-ui/react\""
      ],
      "importPath": "import { Listbox } from \"@chakra-ui/react\""
    },
    {
      "name": "listbox-select-all",
      "content": "\"use client\"\nexport const ListboxSelectAll = () => {\n  return (\n    <Box maxW=\"320px\">\n      <Listbox.Root collection={frameworks} selectionMode=\"multiple\" gap=\"0\">\n        <ListboxHeader />\n        <Listbox.Content maxH=\"300px\" roundedTop=\"0\">\n          {frameworks.items.map((framework) => (\n            <Listbox.Item item={framework} key={framework.value}>\n              <ListboxItemCheckmark />\n              <Listbox.ItemText>{framework.label}</Listbox.ItemText>\n            </Listbox.Item>\n          ))}\n        </Listbox.Content>\n      </Listbox.Root>\n    </Box>\n  )\n}\n\nconst ListboxHeader = (props: FlexProps) => {\n  const listbox = useListboxContext()\n  const isAllSelected = listbox.value.length === frameworks.items.length\n  const isSomeSelected =\n    listbox.value.length > 0 && listbox.value.length < frameworks.items.length\n\n  const handleSelectAll = () => {\n    if (isAllSelected) {\n      listbox.setValue([])\n    } else {\n      listbox.setValue(frameworks.items.map((item) => item.value))\n    }\n  }\n\n  return (\n    <Flex\n      as=\"button\"\n      onClick={handleSelectAll}\n      px=\"3\"\n      gap=\"2\"\n      align=\"center\"\n      cursor=\"pointer\"\n      borderWidth=\"1px\"\n      minH=\"10\"\n      roundedTop=\"l2\"\n      mb=\"-1px\"\n      {...props}\n    >\n      <Checkmark\n        filled\n        size=\"sm\"\n        checked={isAllSelected}\n        indeterminate={isSomeSelected}\n      />\n      <Listbox.Label>Select Frameworks</Listbox.Label>\n    </Flex>\n  )\n}\n\nconst ListboxItemCheckmark = (props: CheckmarkProps) => {\n  const itemState = useListboxItemContext()\n  return (\n    <Checkmark\n      filled\n      size=\"sm\"\n      checked={itemState.selected}\n      disabled={itemState.disabled}\n      {...props}\n    />\n  )\n}\n\nconst frameworks = createListCollection({\n  items: [\n    { label: \"React.js\", value: \"react\" },\n    { label: \"Vue.js\", value: \"vue\" },\n    { label: \"Angular\", value: \"angular\" },\n    { label: \"Svelte\", value: \"svelte\" },\n    { label: \"Next.js\", value: \"nextjs\" },\n    { label: \"Nuxt.js\", value: \"nuxtjs\" },\n    { label: \"Remix\", value: \"remix\" },\n    { label: \"Gatsby\", value: \"gatsby\" },\n    { label: \"Ember.js\", value: \"ember\" },\n    { label: \"Preact\", value: \"preact\" },\n  ],\n})\n",
      "hasSnippet": false,
      "importPaths": [
        "import type { CheckmarkProps, FlexProps } from \"@chakra-ui/react\"",
        "import {\n  Box,\n  Checkmark,\n  Flex,\n  Listbox,\n  createListCollection,\n  useListboxContext,\n  useListboxItemContext,\n} from \"@chakra-ui/react\""
      ],
      "importPath": "import { Listbox } from \"@chakra-ui/react\""
    },
    {
      "name": "listbox-transfer-list",
      "content": "\"use client\"\n\ninterface ListboxRenderProps<T> extends Listbox.RootProps<T> {\n  contentRef: React.RefObject<HTMLDivElement | null>\n}\n\nfunction ListboxRender<T>(props: ListboxRenderProps<T>) {\n  const { collection, contentRef, ...rest } = props\n  return (\n    <Listbox.Root {...rest} collection={collection} selectionMode=\"multiple\">\n      <Listbox.Content minH=\"96\" ref={contentRef}>\n        {collection.items.length > 0 ? (\n          collection.items.map((item) => {\n            const itemValue = collection.getItemValue(item)\n            const itemLabel = collection.stringifyItem(item)\n            return (\n              <Listbox.Item item={item} key={itemValue} flex=\"0\">\n                <Listbox.ItemText>{itemLabel}</Listbox.ItemText>\n                <Listbox.ItemIndicator />\n              </Listbox.Item>\n            )\n          })\n        ) : (\n          <Center boxSize=\"full\" p=\"4\" color=\"fg.muted\" textStyle=\"sm\">\n            No items available\n          </Center>\n        )}\n      </Listbox.Content>\n    </Listbox.Root>\n  )\n}\n\nexport const ListboxTransferList = () => {\n  const state = useTransferListState<Item>({ items: animeCharacters })\n\n  return (\n    <Flex gap=\"4\" maxW=\"600px\" align=\"stretch\">\n      <ListboxRender\n        contentRef={state.sourceContentRef}\n        collection={state.source}\n        value={state.selectedSource.map((item) => item.value)}\n        onValueChange={(e) => state.setSelectedSource(e.items)}\n      />\n      <VStack justify=\"center\" gap=\"2\" py=\"8\">\n        <IconButton\n          size=\"xs\"\n          variant=\"subtle\"\n          disabled={state.selectedSource.length === 0}\n          onClick={() => {\n            state.moveToTarget(state.selectedSource)\n          }}\n        >\n          <LuChevronRight />\n        </IconButton>\n        <IconButton\n          size=\"xs\"\n          variant=\"subtle\"\n          disabled={state.selectedTarget.length === 0}\n          onClick={() => {\n            state.moveToSource(state.selectedTarget)\n          }}\n        >\n          <LuChevronLeft />\n        </IconButton>\n      </VStack>\n      <ListboxRender\n        contentRef={state.targetContentRef}\n        collection={state.target}\n        value={state.selectedTarget.map((item) => item.value)}\n        onValueChange={(e) => state.setSelectedTarget(e.items)}\n      />\n    </Flex>\n  )\n}\n\nfunction useTransferListState<T>(options: CollectionOptions<T>) {\n  const sourceContentRef = useRef<HTMLDivElement | null>(null)\n  const targetContentRef = useRef<HTMLDivElement | null>(null)\n\n  const [source, setSource] = useState(createListCollection<T>(options))\n  const [target, setTarget] = useState(\n    createListCollection<T>({ ...options, items: [] }),\n  )\n  const [selectedSource, setSelectedSource] = useState<T[]>([])\n  const [selectedTarget, setSelectedTarget] = useState<T[]>([])\n\n  const scrollToItem = (container: HTMLDivElement | null, item: T) => {\n    if (!container) return\n    requestAnimationFrame(() => {\n      const itemValue = target.getItemValue(item)\n      const itemElement = container.querySelector(`[data-value=\"${itemValue}\"]`)\n      itemElement?.scrollIntoView({ block: \"nearest\" })\n    })\n  }\n\n  const moveToTarget = (items: T[]) => {\n    setSource(source.remove(...items))\n    setTarget(target.append(...items))\n    setSelectedSource([])\n    scrollToItem(targetContentRef.current, items[items.length - 1])\n  }\n\n  const moveToSource = (items: T[]) => {\n    setSource(source.append(...items))\n    setTarget(target.remove(...items))\n    setSelectedTarget([])\n    scrollToItem(sourceContentRef.current, items[items.length - 1])\n  }\n\n  return {\n    source,\n    target,\n    selectedSource,\n    selectedTarget,\n    setSelectedSource,\n    setSelectedTarget,\n    moveToTarget,\n    moveToSource,\n    sourceContentRef,\n    targetContentRef,\n  }\n}\n\ninterface Item {\n  label: string\n  value: string\n}\n\nconst animeCharacters = [\n  { label: \"Naruto\", value: \"naruto\" },\n  { label: \"Sasuke\", value: \"sasuke\" },\n  { label: \"Sakura\", value: \"sakura\" },\n  { label: \"Kakashi\", value: \"kakashi\" },\n  { label: \"Shisui\", value: \"shisui\" },\n  { label: \"Itachi\", value: \"itachi\" },\n  { label: \"Gaara\", value: \"gaara\" },\n  { label: \"Rock Lee\", value: \"rock-lee\" },\n  { label: \"Neji\", value: \"neji\" },\n  { label: \"Tenten\", value: \"tenten\" },\n  { label: \"Hinata\", value: \"hinata\" },\n  { label: \"Kiba\", value: \"kiba\" },\n  { label: \"Shino\", value: \"shino\" },\n  { label: \"Choji\", value: \"choji\" },\n  { label: \"Ino\", value: \"ino\" },\n]\n",
      "hasSnippet": false,
      "importPaths": [
        "import {\n  Center,\n  type CollectionOptions,\n  Flex,\n  IconButton,\n  Listbox,\n  VStack,\n  createListCollection,\n} from \"@chakra-ui/react\"",
        "import { useRef, useState } from \"react\"",
        "import { LuChevronLeft, LuChevronRight } from \"react-icons/lu\""
      ],
      "importPath": "import { Listbox } from \"@chakra-ui/react\"",
      "npmDependencies": [
        "react-icons"
      ]
    },
    {
      "name": "listbox-virtualized",
      "content": "\"use client\"\nexport const ListboxVirtualized = () => {\n  const virtual = useListboxVirtualizer({\n    count: countries.length,\n  })\n\n  const collection = useMemo(\n    () => createListCollection({ items: countries }),\n    [],\n  )\n\n  return (\n    <Listbox.Root\n      maxW=\"sm\"\n      collection={collection}\n      scrollToIndexFn={virtual.scrollToIndexFn}\n    >\n      <Listbox.Label>Select Country ({countries.length} items)</Listbox.Label>\n      <Listbox.Content ref={virtual.scrollRef} maxH=\"300px\">\n        <div {...virtual.getViewportProps()}>\n          {virtual.virtualItems.map((virtualItem) => {\n            const item = countries[virtualItem.index]\n            return (\n              <Listbox.Item\n                key={item.value}\n                item={item}\n                {...virtual.getItemProps({ virtualItem })}\n              >\n                <Listbox.ItemText>{item.label}</Listbox.ItemText>\n                <Listbox.ItemIndicator />\n              </Listbox.Item>\n            )\n          })}\n        </div>\n      </Listbox.Content>\n    </Listbox.Root>\n  )\n}\n\ninterface ScrollToIndexDetails {\n  index: number\n  getElement: () => HTMLElement | null\n  immediate?: boolean\n}\n\nfunction useListboxVirtualizer(props: { count: number }) {\n  const scrollRef = useRef<HTMLDivElement | null>(null)\n  const scrollTimeoutRef = useRef<NodeJS.Timeout | null>(null)\n\n  const clearScrollTimeout = () => {\n    if (scrollTimeoutRef.current) {\n      clearTimeout(scrollTimeoutRef.current)\n      scrollTimeoutRef.current = null\n    }\n  }\n\n  const virtualizer = useVirtualizer({\n    count: props.count,\n    getScrollElement: () => scrollRef.current,\n    estimateSize: () => 32,\n    overscan: 10,\n  })\n\n  const virtualizerRef = useLiveRef(virtualizer)\n\n  const scrollToIndexFn = (details: ScrollToIndexDetails) => {\n    clearScrollTimeout()\n\n    const scrollToIndex = () => {\n      const virtualizer = virtualizerRef.current\n      const virtualItems = virtualizer.getVirtualItems()\n      const virtualItem = virtualItems.find(\n        (item) => item.index === details.index,\n      )\n\n      if (virtualItem) {\n        const element = details.getElement()\n        element?.scrollIntoView({ block: \"nearest\" })\n        clearScrollTimeout()\n        return\n      }\n\n      // Scroll towards the target index\n      virtualizer.scrollToIndex(details.index)\n\n      // Continue scrolling in intervals until we reach the target\n      if (!details.immediate) {\n        scrollTimeoutRef.current = setTimeout(scrollToIndex, 16) // ~60fps\n      }\n    }\n\n    scrollToIndex()\n  }\n\n  // Cleanup timeout on unmount\n  useEffect(() => clearScrollTimeout, [])\n\n  const totalSize = virtualizer.getTotalSize()\n\n  return {\n    scrollRef,\n    scrollToIndexFn,\n    totalSize,\n    virtualItems: virtualizer.getVirtualItems(),\n    getViewportProps(\n      props: React.ComponentProps<\"div\"> = {},\n    ): React.ComponentProps<\"div\"> {\n      return {\n        ...props,\n        style: {\n          ...props.style,\n          height: `${totalSize}px`,\n          width: \"100%\",\n          position: \"relative\",\n        },\n      }\n    },\n    getItemProps(\n      props: React.ComponentProps<\"div\"> & { virtualItem: VirtualItem },\n    ): React.ComponentProps<\"div\"> {\n      const { virtualItem, ...rest } = props\n      return {\n        ...rest,\n        \"aria-posinset\": virtualItem.index + 1,\n        \"aria-setsize\": totalSize,\n        style: {\n          position: \"absolute\",\n          top: 0,\n          left: 0,\n          width: \"100%\",\n          whiteSpace: \"nowrap\",\n          overflow: \"hidden\",\n          textOverflow: \"ellipsis\",\n          ...rest.style,\n          height: `${virtualItem.size}px`,\n          transform: `translateY(${virtualItem.start}px)`,\n        },\n      }\n    },\n  }\n}\n\nexport const countries = [\n  { value: \"AD\", label: \"Andorra\" },\n  { value: \"AE\", label: \"United Arab Emirates\" },\n  { value: \"AF\", label: \"Afghanistan\" },\n  { value: \"AG\", label: \"Antigua and Barbuda\" },\n  { value: \"AI\", label: \"Anguilla\" },\n  { value: \"AL\", label: \"Albania\" },\n  { value: \"AM\", label: \"Armenia\" },\n  { value: \"AO\", label: \"Angola\" },\n  { value: \"AQ\", label: \"Antarctica\" },\n  { value: \"AR\", label: \"Argentina\" },\n  { value: \"AS\", label: \"American Samoa\" },\n  { value: \"AT\", label: \"Austria\" },\n  { value: \"AU\", label: \"Australia\" },\n  { value: \"AW\", label: \"Aruba\" },\n  { value: \"AX\", label: \"Åland Islands\" },\n  { value: \"AZ\", label: \"Azerbaijan\" },\n  { value: \"BA\", label: \"Bosnia and Herzegovina\" },\n  { value: \"BB\", label: \"Barbados\" },\n  { value: \"BD\", label: \"Bangladesh\" },\n  { value: \"BE\", label: \"Belgium\" },\n  { value: \"BF\", label: \"Burkina Faso\" },\n  { value: \"BG\", label: \"Bulgaria\" },\n  { value: \"BH\", label: \"Bahrain\" },\n  { value: \"BI\", label: \"Burundi\" },\n  { value: \"BJ\", label: \"Benin\" },\n  { value: \"BL\", label: \"Saint Barthélemy\" },\n  { value: \"BM\", label: \"Bermuda\" },\n  { value: \"BN\", label: \"Brunei Darussalam\" },\n  { value: \"BO\", label: \"Bolivia, Plurinational State of\" },\n  { value: \"BQ\", label: \"Bonaire, Sint Eustatius and Saba\" },\n  { value: \"BR\", label: \"Brazil\" },\n  { value: \"BS\", label: \"Bahamas\" },\n  { value: \"BT\", label: \"Bhutan\" },\n  { value: \"BV\", label: \"Bouvet Island\" },\n  { value: \"BW\", label: \"Botswana\" },\n  { value: \"BY\", label: \"Belarus\" },\n  { value: \"BZ\", label: \"Belize\" },\n  { value: \"CA\", label: \"Canada\" },\n  { value: \"CC\", label: \"Cocos (Keeling) Islands\" },\n  { value: \"CD\", label: \"Congo, Democratic Republic of the\" },\n  { value: \"CF\", label: \"Central African Republic\" },\n  { value: \"CG\", label: \"Congo\" },\n  { value: \"CH\", label: \"Switzerland\" },\n  { value: \"CI\", label: \"Côte d'Ivoire\" },\n  { value: \"CK\", label: \"Cook Islands\" },\n  { value: \"CL\", label: \"Chile\" },\n  { value: \"CM\", label: \"Cameroon\" },\n  { value: \"CN\", label: \"China\" },\n  { value: \"CO\", label: \"Colombia\" },\n  { value: \"CR\", label: \"Costa Rica\" },\n  { value: \"CU\", label: \"Cuba\" },\n  { value: \"CV\", label: \"Cabo Verde\" },\n  { value: \"CW\", label: \"Curaçao\" },\n  { value: \"CX\", label: \"Christmas Island\" },\n  { value: \"CY\", label: \"Cyprus\" },\n  { value: \"CZ\", label: \"Czechia\" },\n  { value: \"DE\", label: \"Germany\" },\n  { value: \"DJ\", label: \"Djibouti\" },\n  { value: \"DK\", label: \"Denmark\" },\n  { value: \"DM\", label: \"Dominica\" },\n  { value: \"DO\", label: \"Dominican Republic\" },\n  { value: \"DZ\", label: \"Algeria\" },\n  { value: \"EC\", label: \"Ecuador\" },\n  { value: \"EE\", label: \"Estonia\" },\n  { value: \"EG\", label: \"Egypt\" },\n  { value: \"EH\", label: \"Western Sahara\" },\n  { value: \"ER\", label: \"Eritrea\" },\n  { value: \"ES\", label: \"Spain\" },\n  { value: \"ET\", label: \"Ethiopia\" },\n  { value: \"FI\", label: \"Finland\" },\n  { value: \"FJ\", label: \"Fiji\" },\n  { value: \"FK\", label: \"Falkland Islands (Malvinas)\" },\n  { value: \"FM\", label: \"Micronesia, Federated States of\" },\n  { value: \"FO\", label: \"Faroe Islands\" },\n  { value: \"FR\", label: \"France\" },\n  { value: \"GA\", label: \"Gabon\" },\n  {\n    value: \"GB\",\n    label: \"United Kingdom of Great Britain and Northern Ireland\",\n  },\n  { value: \"GD\", label: \"Grenada\" },\n  { value: \"GE\", label: \"Georgia\" },\n  { value: \"GF\", label: \"French Guiana\" },\n  { value: \"GG\", label: \"Guernsey\" },\n  { value: \"GH\", label: \"Ghana\" },\n  { value: \"GI\", label: \"Gibraltar\" },\n  { value: \"GL\", label: \"Greenland\" },\n  { value: \"GM\", label: \"Gambia\" },\n  { value: \"GN\", label: \"Guinea\" },\n  { value: \"GP\", label: \"Guadeloupe\" },\n  { value: \"GQ\", label: \"Equatorial Guinea\" },\n  { value: \"GR\", label: \"Greece\" },\n  { value: \"GS\", label: \"South Georgia and the South Sandwich Islands\" },\n  { value: \"GT\", label: \"Guatemala\" },\n  { value: \"GU\", label: \"Guam\" },\n  { value: \"GW\", label: \"Guinea-Bissau\" },\n  { value: \"GY\", label: \"Guyana\" },\n  { value: \"HK\", label: \"Hong Kong\" },\n  { value: \"HM\", label: \"Heard Island and McDonald Islands\" },\n  { value: \"HN\", label: \"Honduras\" },\n  { value: \"HR\", label: \"Croatia\" },\n  { value: \"HT\", label: \"Haiti\" },\n  { value: \"HU\", label: \"Hungary\" },\n  { value: \"ID\", label: \"Indonesia\" },\n  { value: \"IE\", label: \"Ireland\" },\n  { value: \"IL\", label: \"Israel\" },\n  { value: \"IM\", label: \"Isle of Man\" },\n  { value: \"IN\", label: \"India\" },\n  { value: \"IO\", label: \"British Indian Ocean Territory\" },\n  { value: \"IQ\", label: \"Iraq\" },\n  { value: \"IR\", label: \"Iran, Islamic Republic of\" },\n  { value: \"IS\", label: \"Iceland\" },\n  { value: \"IT\", label: \"Italy\" },\n  { value: \"JE\", label: \"Jersey\" },\n  { value: \"JM\", label: \"Jamaica\" },\n  { value: \"JO\", label: \"Jordan\" },\n  { value: \"JP\", label: \"Japan\" },\n  { value: \"KE\", label: \"Kenya\" },\n  { value: \"KG\", label: \"Kyrgyzstan\" },\n  { value: \"KH\", label: \"Cambodia\" },\n  { value: \"KI\", label: \"Kiribati\" },\n  { value: \"KM\", label: \"Comoros\" },\n  { value: \"KN\", label: \"Saint Kitts and Nevis\" },\n  { value: \"KP\", label: \"Korea, Democratic People's Republic of\" },\n  { value: \"KR\", label: \"Korea, Republic of\" },\n  { value: \"KW\", label: \"Kuwait\" },\n  { value: \"KY\", label: \"Cayman Islands\" },\n  { value: \"KZ\", label: \"Kazakhstan\" },\n  { value: \"LA\", label: \"Lao People's Democratic Republic\" },\n  { value: \"LB\", label: \"Lebanon\" },\n  { value: \"LC\", label: \"Saint Lucia\" },\n  { value: \"LI\", label: \"Liechtenstein\" },\n  { value: \"LK\", label: \"Sri Lanka\" },\n  { value: \"LR\", label: \"Liberia\" },\n  { value: \"LS\", label: \"Lesotho\" },\n  { value: \"LT\", label: \"Lithuania\" },\n  { value: \"LU\", label: \"Luxembourg\" },\n  { value: \"LV\", label: \"Latvia\" },\n  { value: \"LY\", label: \"Libya\" },\n  { value: \"MA\", label: \"Morocco\" },\n  { value: \"MC\", label: \"Monaco\" },\n  { value: \"MD\", label: \"Moldova, Republic of\" },\n  { value: \"ME\", label: \"Montenegro\" },\n  { value: \"MF\", label: \"Saint Martin, (French part)\" },\n  { value: \"MG\", label: \"Madagascar\" },\n  { value: \"MH\", label: \"Marshall Islands\" },\n  { value: \"MK\", label: \"North Macedonia\" },\n  { value: \"ML\", label: \"Mali\" },\n  { value: \"MM\", label: \"Myanmar\" },\n  { value: \"MN\", label: \"Mongolia\" },\n  { value: \"MO\", label: \"Macao\" },\n  { value: \"MP\", label: \"Northern Mariana Islands\" },\n  { value: \"MQ\", label: \"Martinique\" },\n  { value: \"MR\", label: \"Mauritania\" },\n  { value: \"MS\", label: \"Montserrat\" },\n  { value: \"MT\", label: \"Malta\" },\n  { value: \"MU\", label: \"Mauritius\" },\n  { value: \"MV\", label: \"Maldives\" },\n  { value: \"MW\", label: \"Malawi\" },\n  { value: \"MX\", label: \"Mexico\" },\n  { value: \"MY\", label: \"Malaysia\" },\n  { value: \"MZ\", label: \"Mozambique\" },\n  { value: \"NA\", label: \"Namibia\" },\n  { value: \"NC\", label: \"New Caledonia\" },\n  { value: \"NE\", label: \"Niger\" },\n  { value: \"NF\", label: \"Norfolk Island\" },\n  { value: \"NG\", label: \"Nigeria\" },\n  { value: \"NI\", label: \"Nicaragua\" },\n  { value: \"NL\", label: \"Netherlands\" },\n  { value: \"NO\", label: \"Norway\" },\n  { value: \"NP\", label: \"Nepal\" },\n  { value: \"NR\", label: \"Nauru\" },\n  { value: \"NU\", label: \"Niue\" },\n  { value: \"NZ\", label: \"New Zealand\" },\n  { value: \"OM\", label: \"Oman\" },\n  { value: \"PA\", label: \"Panama\" },\n  { value: \"PE\", label: \"Peru\" },\n  { value: \"PF\", label: \"French Polynesia\" },\n  { value: \"PG\", label: \"Papua New Guinea\" },\n  { value: \"PH\", label: \"Philippines\" },\n  { value: \"PK\", label: \"Pakistan\" },\n  { value: \"PL\", label: \"Poland\" },\n  { value: \"PM\", label: \"Saint Pierre and Miquelon\" },\n  { value: \"PN\", label: \"Pitcairn\" },\n  { value: \"PR\", label: \"Puerto Rico\" },\n  { value: \"PS\", label: \"Palestine, State of\" },\n  { value: \"PT\", label: \"Portugal\" },\n  { value: \"PW\", label: \"Palau\" },\n  { value: \"PY\", label: \"Paraguay\" },\n  { value: \"QA\", label: \"Qatar\" },\n  { value: \"RE\", label: \"Réunion\" },\n  { value: \"RO\", label: \"Romania\" },\n  { value: \"RS\", label: \"Serbia\" },\n  { value: \"RU\", label: \"Russian Federation\" },\n  { value: \"RW\", label: \"Rwanda\" },\n  { value: \"SA\", label: \"Saudi Arabia\" },\n  { value: \"SB\", label: \"Solomon Islands\" },\n  { value: \"SC\", label: \"Seychelles\" },\n  { value: \"SD\", label: \"Sudan\" },\n  { value: \"SE\", label: \"Sweden\" },\n  { value: \"SG\", label: \"Singapore\" },\n  { value: \"SH\", label: \"Saint Helena, Ascension and Tristan da Cunha\" },\n  { value: \"SI\", label: \"Slovenia\" },\n  { value: \"SJ\", label: \"Svalbard and Jan Mayen\" },\n  { value: \"SK\", label: \"Slovakia\" },\n  { value: \"SL\", label: \"Sierra Leone\" },\n  { value: \"SM\", label: \"San Marino\" },\n  { value: \"SN\", label: \"Senegal\" },\n  { value: \"SO\", label: \"Somalia\" },\n  { value: \"SR\", label: \"Suriname\" },\n  { value: \"SS\", label: \"South Sudan\" },\n  { value: \"ST\", label: \"Sao Tome and Principe\" },\n  { value: \"SV\", label: \"El Salvador\" },\n  { value: \"SX\", label: \"Sint Maarten, (Dutch part)\" },\n  { value: \"SY\", label: \"Syrian Arab Republic\" },\n  { value: \"SZ\", label: \"Eswatini\" },\n  { value: \"TC\", label: \"Turks and Caicos Islands\" },\n  { value: \"TD\", label: \"Chad\" },\n  { value: \"TF\", label: \"French Southern Territories\" },\n  { value: \"TG\", label: \"Togo\" },\n  { value: \"TH\", label: \"Thailand\" },\n  { value: \"TJ\", label: \"Tajikistan\" },\n  { value: \"TK\", label: \"Tokelau\" },\n  { value: \"TL\", label: \"Timor-Leste\" },\n  { value: \"TM\", label: \"Turkmenistan\" },\n  { value: \"TN\", label: \"Tunisia\" },\n  { value: \"TO\", label: \"Tonga\" },\n  { value: \"TR\", label: \"Türkiye\" },\n  { value: \"TT\", label: \"Trinidad and Tobago\" },\n  { value: \"TV\", label: \"Tuvalu\" },\n  { value: \"TW\", label: \"Taiwan, Province of China\" },\n  { value: \"TZ\", label: \"Tanzania, United Republic of\" },\n  { value: \"UA\", label: \"Ukraine\" },\n  { value: \"UG\", label: \"Uganda\" },\n  { value: \"UM\", label: \"United States Minor Outlying Islands\" },\n  { value: \"US\", label: \"United States of America\" },\n  { value: \"UY\", label: \"Uruguay\" },\n  { value: \"UZ\", label: \"Uzbekistan\" },\n  { value: \"VA\", label: \"Holy See\" },\n  { value: \"VC\", label: \"Saint Vincent and the Grenadines\" },\n  { value: \"VE\", label: \"Venezuela, Bolivarian Republic of\" },\n  { value: \"VG\", label: \"Virgin Islands, British\" },\n  { value: \"VI\", label: \"Virgin Islands, U.S.\" },\n  { value: \"VN\", label: \"Viet Nam\" },\n  { value: \"VU\", label: \"Vanuatu\" },\n  { value: \"WF\", label: \"Wallis and Futuna\" },\n  { value: \"WS\", label: \"Samoa\" },\n  { value: \"YE\", label: \"Yemen\" },\n  { value: \"YT\", label: \"Mayotte\" },\n  { value: \"ZA\", label: \"South Africa\" },\n  { value: \"ZM\", label: \"Zambia\" },\n  { value: \"ZW\", label: \"Zimbabwe\" },\n]\n",
      "hasSnippet": false,
      "importPaths": [
        "import { Listbox, createListCollection, useLiveRef } from \"@chakra-ui/react\"",
        "import { type VirtualItem, useVirtualizer } from \"@tanstack/react-virtual\"",
        "import React, { useEffect, useMemo, useRef } from \"react\""
      ],
      "importPath": "import { Listbox } from \"@chakra-ui/react\"",
      "npmDependencies": [
        "@tanstack/react-virtual"
      ]
    },
    {
      "name": "listbox-with-checkmark",
      "content": "\"use client\"\nconst ListboxItemCheckmark = () => {\n  const itemState = useListboxItemContext()\n  return (\n    <Checkmark\n      filled\n      size=\"sm\"\n      checked={itemState.selected}\n      disabled={itemState.disabled}\n    />\n  )\n}\n\nexport const ListboxWithCheckmark = () => {\n  return (\n    <Listbox.Root collection={frameworks} selectionMode=\"multiple\" maxW=\"320px\">\n      <Listbox.Label>Select frameworks (with checkmarks)</Listbox.Label>\n      <Listbox.Content>\n        {frameworks.items.map((framework) => (\n          <Listbox.Item item={framework} key={framework.value}>\n            <ListboxItemCheckmark />\n            <Listbox.ItemText>{framework.label}</Listbox.ItemText>\n          </Listbox.Item>\n        ))}\n      </Listbox.Content>\n    </Listbox.Root>\n  )\n}\n\nconst frameworks = createListCollection({\n  items: [\n    { label: \"React.js\", value: \"react\" },\n    { label: \"Vue.js\", value: \"vue\" },\n    { label: \"Angular\", value: \"angular\" },\n    { label: \"Svelte\", value: \"svelte\" },\n    { label: \"Next.js\", value: \"nextjs\" },\n    { label: \"Nuxt.js\", value: \"nuxtjs\" },\n  ],\n})\n",
      "hasSnippet": false,
      "importPaths": [
        "import {\n  Checkmark,\n  Listbox,\n  createListCollection,\n  useListboxItemContext,\n} from \"@chakra-ui/react\""
      ],
      "importPath": "import { Listbox } from \"@chakra-ui/react\""
    },
    {
      "name": "listbox-with-description",
      "content": "\"use client\"\nexport const ListboxWithDescription = () => {\n  return (\n    <Listbox.Root collection={frameworks} maxW=\"400px\">\n      <Listbox.Label>Select framework</Listbox.Label>\n      <Listbox.Content>\n        {frameworks.items.map((framework) => (\n          <Listbox.Item item={framework} key={framework.value}>\n            <Box flex=\"1\">\n              <Listbox.ItemText>{framework.label}</Listbox.ItemText>\n              <Text fontSize=\"xs\" color=\"fg.muted\" mt=\"1\">\n                {framework.description}\n              </Text>\n            </Box>\n            <Listbox.ItemIndicator />\n          </Listbox.Item>\n        ))}\n      </Listbox.Content>\n    </Listbox.Root>\n  )\n}\n\nconst frameworks = createListCollection({\n  items: [\n    {\n      label: \"React.js\",\n      value: \"react\",\n      description: \"A JavaScript library for building user interfaces\",\n    },\n    {\n      label: \"Vue.js\",\n      value: \"vue\",\n      description: \"The progressive JavaScript framework\",\n    },\n    {\n      label: \"Angular\",\n      value: \"angular\",\n      description: \"Platform for building mobile and desktop web applications\",\n    },\n    {\n      label: \"Svelte\",\n      value: \"svelte\",\n      description: \"Cybernetically enhanced web apps\",\n    },\n    {\n      label: \"Next.js\",\n      value: \"nextjs\",\n      description: \"The React framework for production\",\n    },\n  ],\n})\n",
      "hasSnippet": false,
      "importPaths": [
        "import { Box, Listbox, Text, createListCollection } from \"@chakra-ui/react\""
      ],
      "importPath": "import { Listbox } from \"@chakra-ui/react\""
    },
    {
      "name": "listbox-with-dialog",
      "content": "\"use client\"\nexport const ListboxWithDialog = () => {\n  const [selectedFrameworks, setSelectedFrameworks] = useState<string[]>([])\n  const [isOpen, setIsOpen] = useState(false)\n\n  const { contains } = useFilter({ sensitivity: \"base\" })\n\n  const { collection, filter } = useListCollection({\n    initialItems: [\n      { label: \"Linear.app\", value: \"linear\", type: \"applications\" },\n      { label: \"Notion\", value: \"notion\", type: \"applications\" },\n      { label: \"Figma\", value: \"figma\", type: \"applications\" },\n      { label: \"Slack\", value: \"slack\", type: \"applications\" },\n      { label: \"Cursor\", value: \"cursor\", type: \"applications\" },\n\n      { label: \"Open Terminal\", value: \"terminal\", type: \"commands\" },\n      { label: \"Search Files\", value: \"search\", type: \"commands\" },\n      { label: \"Git Status\", value: \"git-status\", type: \"commands\" },\n      { label: \"Run Tests\", value: \"run-tests\", type: \"commands\" },\n      { label: \"Deploy App\", value: \"deploy\", type: \"commands\" },\n    ],\n    filter: contains,\n    groupBy: (item) => item.type,\n    groupSort: [\"applications\", \"commands\"],\n  })\n\n  const handleSelectionChange = (details: any) => {\n    setSelectedFrameworks(details.value)\n    setIsOpen(false)\n    filter(\"\")\n  }\n\n  return (\n    <>\n      <Dialog.Root open={isOpen} onOpenChange={(e) => setIsOpen(e.open)}>\n        <Dialog.Trigger asChild>\n          <Button variant=\"outline\">Open Search</Button>\n        </Dialog.Trigger>\n\n        <Portal>\n          <Dialog.Backdrop />\n          <Dialog.Positioner>\n            <Dialog.Content>\n              <Listbox.Root\n                collection={collection}\n                value={selectedFrameworks}\n                onValueChange={handleSelectionChange}\n                variant=\"plain\"\n              >\n                <Dialog.Header>\n                  <Listbox.Input\n                    placeholder=\"Search for apps or command...\"\n                    minH=\"6\"\n                    outline=\"0\"\n                    width=\"full\"\n                    onChange={(e) => filter(e.currentTarget.value)}\n                  />\n                </Dialog.Header>\n\n                <Listbox.Content px=\"3\" maxH=\"300px\">\n                  {collection.group().map(([group, items]) => (\n                    <Listbox.ItemGroup key={group}>\n                      <Listbox.ItemGroupLabel textTransform=\"capitalize\">\n                        {group}\n                      </Listbox.ItemGroupLabel>\n                      {items.map((item) => (\n                        <Listbox.Item\n                          item={item}\n                          key={item.value}\n                          justifyContent=\"space-between\"\n                        >\n                          <Listbox.ItemText>{item.label}</Listbox.ItemText>\n                          <Span fontSize=\"xs\" color=\"fg.muted\">\n                            {item.type}\n                          </Span>\n                        </Listbox.Item>\n                      ))}\n                    </Listbox.ItemGroup>\n                  ))}\n                </Listbox.Content>\n\n                <Dialog.Footer textStyle=\"xs\" borderTopWidth=\"1px\">\n                  <CommandItem label=\"Press Esc to close\" keys={[\"Esc\"]} />\n                  <CommandItem label=\"Open Application\" keys={[\"⏎\"]} />\n                  <CommandItem label=\"Actions\" keys={[\"⌘\", \"K\"]} />\n                </Dialog.Footer>\n              </Listbox.Root>\n            </Dialog.Content>\n          </Dialog.Positioner>\n        </Portal>\n      </Dialog.Root>\n\n      {selectedFrameworks.length > 0 && (\n        <Text mt=\"3\" textStyle=\"sm\">\n          Selected: {JSON.stringify(selectedFrameworks, null, 2)}\n        </Text>\n      )}\n    </>\n  )\n}\n\nconst CommandItem = (props: { label: string; keys: string[] }) => {\n  return (\n    <HStack>\n      {props.label} <Kbd size=\"sm\">{props.keys.join(\" \")}</Kbd>\n    </HStack>\n  )\n}\n",
      "hasSnippet": false,
      "importPaths": [
        "import {\n  Button,\n  Dialog,\n  HStack,\n  Kbd,\n  Listbox,\n  Portal,\n  Span,\n  Text,\n  useFilter,\n  useListCollection,\n} from \"@chakra-ui/react\"",
        "import { useState } from \"react\""
      ],
      "importPath": "import { Listbox } from \"@chakra-ui/react\""
    },
    {
      "name": "listbox-with-emoji-grid",
      "content": "\"use client\"\ntype Emoji = (typeof emojibase)[number]\nconst emojis = emojibase\n  .filter((e) => !e.label.startsWith(\"regional indicator\"))\n  .slice(0, 200) as Emoji[]\n\nexport const ListboxWithEmojiGrid = () => {\n  const { contains } = useFilter({ sensitivity: \"base\" })\n\n  const [items, setItems] = useState(emojis)\n\n  const collection = useMemo(\n    () =>\n      createGridCollection({\n        columnCount: 8,\n        items: items,\n        itemToString(item) {\n          return `${item.label} (${item.shortcodes})`\n        },\n        itemToValue(item) {\n          return item.hexcode\n        },\n      }),\n    [items],\n  )\n\n  const filter = useCallback(\n    (value: string) => {\n      setItems(emojis.filter((e) => contains(e.label, value)))\n    },\n    [contains],\n  )\n\n  return (\n    <Listbox.Root collection={collection} maxW=\"min-content\">\n      <SelectedEmoji />\n      <Listbox.Input\n        as={Input}\n        placeholder=\"Type to filter frameworks...\"\n        onChange={(e) => filter(e.target.value)}\n      />\n      <Listbox.Content\n        w=\"374px\"\n        display=\"grid\"\n        gridTemplateColumns=\"repeat(8, 1fr)\"\n        gap=\"1\"\n      >\n        {collection.items.map((item, index) => (\n          <Listbox.Item\n            item={item}\n            key={index}\n            css={{\n              width: \"40px\",\n              height: \"40px\",\n              display: \"flex\",\n              alignItems: \"center\",\n              justifyContent: \"center\",\n              borderRadius: \"md\",\n              fontSize: \"22px\",\n            }}\n          >\n            {item.unicode}\n          </Listbox.Item>\n        ))}\n      </Listbox.Content>\n    </Listbox.Root>\n  )\n}\n\nconst SelectedEmoji = () => {\n  const listbox = useListboxContext()\n  const [item] = listbox.selectedItems as Emoji[]\n  return (\n    <Square size=\"40px\" bg=\"bg.muted\" rounded=\"sm\" textStyle=\"lg\">\n      {item ? item.unicode : <LuSmile />}\n    </Square>\n  )\n}\n",
      "hasSnippet": false,
      "importPaths": [
        "import {\n  Input,\n  Listbox,\n  Square,\n  createGridCollection,\n  useFilter,\n  useListboxContext,\n} from \"@chakra-ui/react\"",
        "import emojibase from \"emojibase-data/en/compact.json\"",
        "import { useCallback, useMemo, useState } from \"react\"",
        "import { LuSmile } from \"react-icons/lu\""
      ],
      "importPath": "import { Listbox } from \"@chakra-ui/react\"",
      "npmDependencies": [
        "emojibase-data",
        "react-icons"
      ]
    },
    {
      "name": "listbox-with-icon",
      "content": "\"use client\"\nexport const ListboxWithIcon = () => {\n  return (\n    <Listbox.Root collection={frameworks} maxW=\"320px\">\n      <Listbox.Label>Select framework</Listbox.Label>\n      <Listbox.Content>\n        {frameworks.items.map((framework) => (\n          <Listbox.Item item={framework} key={framework.value}>\n            <Box display=\"flex\" alignItems=\"center\" gap=\"3\" flex=\"1\">\n              <Box color=\"fg.muted\" flexShrink=\"0\">\n                {framework.icon}\n              </Box>\n              <Listbox.ItemText>{framework.label}</Listbox.ItemText>\n            </Box>\n            <Listbox.ItemIndicator />\n          </Listbox.Item>\n        ))}\n      </Listbox.Content>\n    </Listbox.Root>\n  )\n}\n\nconst frameworks = createListCollection({\n  items: [\n    { label: \"React.js\", value: \"react\", icon: <LuAtom size={16} /> },\n    { label: \"Vue.js\", value: \"vue\", icon: <LuPalette size={16} /> },\n    { label: \"Angular\", value: \"angular\", icon: <LuGlobe size={16} /> },\n    { label: \"Svelte\", value: \"svelte\", icon: <LuZap size={16} /> },\n  ],\n})\n",
      "hasSnippet": false,
      "importPaths": [
        "import { Box, Listbox, createListCollection } from \"@chakra-ui/react\"",
        "import { LuAtom, LuGlobe, LuPalette, LuZap } from \"react-icons/lu\""
      ],
      "importPath": "import { Listbox } from \"@chakra-ui/react\"",
      "npmDependencies": [
        "react-icons"
      ]
    },
    {
      "name": "listbox-with-input",
      "content": "\"use client\"\nexport const ListboxWithInput = () => {\n  const { contains } = useFilter({ sensitivity: \"base\" })\n\n  const { collection, filter } = useListCollection({\n    initialItems: [\n      { label: \"React.js\", value: \"react\" },\n      { label: \"Vue.js\", value: \"vue\" },\n      { label: \"Angular\", value: \"angular\" },\n      { label: \"Svelte\", value: \"svelte\" },\n      { label: \"Next.js\", value: \"nextjs\" },\n      { label: \"Nuxt.js\", value: \"nuxtjs\" },\n      { label: \"Remix\", value: \"remix\" },\n      { label: \"Gatsby\", value: \"gatsby\" },\n      { label: \"Ember.js\", value: \"ember\" },\n      { label: \"Preact\", value: \"preact\" },\n    ],\n    filter: contains,\n  })\n\n  return (\n    <Listbox.Root maxW=\"320px\" collection={collection}>\n      <Listbox.Label>Select Framework</Listbox.Label>\n      <Listbox.Input\n        as={Input}\n        placeholder=\"Type to filter frameworks...\"\n        onChange={(e) => filter(e.target.value)}\n      />\n      <Listbox.Content maxH=\"200px\">\n        {collection.items.map((framework) => (\n          <Listbox.Item item={framework} key={framework.value}>\n            <Listbox.ItemText>{framework.label}</Listbox.ItemText>\n            <Listbox.ItemIndicator />\n          </Listbox.Item>\n        ))}\n\n        <Listbox.Empty>No frameworks found</Listbox.Empty>\n      </Listbox.Content>\n    </Listbox.Root>\n  )\n}\n",
      "hasSnippet": false,
      "importPaths": [
        "import { Input, Listbox, useFilter, useListCollection } from \"@chakra-ui/react\""
      ],
      "importPath": "import { Listbox } from \"@chakra-ui/react\""
    },
    {
      "name": "listbox-with-popover",
      "content": "\"use client\"\nexport const ListboxWithPopover = () => {\n  const [inputValue, setInputValue] = useState(\"\")\n  const [open, setOpen] = useState(false)\n\n  const { contains } = useFilter({ sensitivity: \"base\" })\n  const triggerRef = useRef<HTMLButtonElement | null>(null)\n\n  const { collection, filter } = useListCollection({\n    initialItems: [\n      { label: \"React.js\", value: \"react\" },\n      { label: \"Vue.js\", value: \"vue\" },\n      { label: \"Angular\", value: \"angular\" },\n      { label: \"Svelte\", value: \"svelte\" },\n      { label: \"Next.js\", value: \"nextjs\" },\n      { label: \"Nuxt.js\", value: \"nuxtjs\" },\n    ],\n    filter: contains,\n  })\n\n  const listbox = useListbox({\n    collection,\n    onValueChange() {\n      setOpen(false)\n      setInputValueFn(\"\")\n      triggerRef.current?.focus()\n    },\n  })\n\n  const setInputValueFn = (value: string) => {\n    setInputValue(value)\n    filter(value)\n  }\n\n  const selectedItem = listbox.selectedItems[0]\n\n  return (\n    <Popover.Root open={open} onOpenChange={(e) => setOpen(e.open)}>\n      <Popover.Trigger asChild>\n        <Button size=\"sm\" ref={triggerRef} variant=\"outline\">\n          {selectedItem ? selectedItem.label : \"Select\"} <LuChevronDown />\n        </Button>\n      </Popover.Trigger>\n\n      <Portal>\n        <Popover.Positioner>\n          <Popover.Content _closed={{ animation: \"none\" }}>\n            <Popover.Body p=\"0\">\n              <Listbox.RootProvider value={listbox} gap=\"0\" overflow=\"hidden\">\n                <Listbox.Input\n                  minH=\"10\"\n                  px=\"3\"\n                  roundedTop=\"l2\"\n                  bg=\"transparent\"\n                  outline=\"0\"\n                  value={inputValue}\n                  onChange={(e) => setInputValueFn(e.currentTarget.value)}\n                />\n                <Listbox.Content\n                  borderWidth=\"0\"\n                  borderTopWidth=\"1px\"\n                  roundedTop=\"0\"\n                  gap=\"0\"\n                >\n                  {collection.items.map((framework) => (\n                    <Listbox.Item item={framework} key={framework.value}>\n                      <Listbox.ItemText>{framework.label}</Listbox.ItemText>\n                      <Listbox.ItemIndicator />\n                    </Listbox.Item>\n                  ))}\n                </Listbox.Content>\n              </Listbox.RootProvider>\n            </Popover.Body>\n          </Popover.Content>\n        </Popover.Positioner>\n      </Portal>\n    </Popover.Root>\n  )\n}\n",
      "hasSnippet": false,
      "importPaths": [
        "import {\n  Button,\n  Listbox,\n  Popover,\n  Portal,\n  useFilter,\n  useListCollection,\n  useListbox,\n} from \"@chakra-ui/react\"",
        "import { useRef, useState } from \"react\"",
        "import { LuChevronDown } from \"react-icons/lu\""
      ],
      "importPath": "import { Listbox } from \"@chakra-ui/react\"",
      "npmDependencies": [
        "react-icons"
      ]
    },
    {
      "name": "listbox-with-store",
      "content": "\"use client\"\nexport const ListboxWithStore = () => {\n  const listbox = useListbox({ collection: frameworks })\n\n  return (\n    <Stack maxWidth=\"320px\" width=\"full\" gap=\"4\">\n      <Listbox.RootProvider value={listbox}>\n        <Listbox.Label>Select framework</Listbox.Label>\n        <Listbox.Content>\n          {frameworks.items.map((framework) => (\n            <Listbox.Item item={framework} key={framework.value}>\n              <Listbox.ItemText>{framework.label}</Listbox.ItemText>\n              <Listbox.ItemIndicator />\n            </Listbox.Item>\n          ))}\n        </Listbox.Content>\n      </Listbox.RootProvider>\n\n      <Code alignSelf=\"flex-start\">\n        Selected: {JSON.stringify(listbox.value, null, 2)}\n      </Code>\n    </Stack>\n  )\n}\n\nconst frameworks = createListCollection({\n  items: [\n    { label: \"React.js\", value: \"react\" },\n    { label: \"Vue.js\", value: \"vue\" },\n    { label: \"Angular\", value: \"angular\" },\n    { label: \"Svelte\", value: \"svelte\" },\n  ],\n})\n",
      "hasSnippet": false,
      "importPaths": [
        "import {\n  Code,\n  Listbox,\n  Stack,\n  createListCollection,\n  useListbox,\n} from \"@chakra-ui/react\""
      ],
      "importPath": "import { Listbox } from \"@chakra-ui/react\""
    }
  ]
}