{
  "name": "tree-view",
  "snippet": null,
  "examples": [
    {
      "name": "tree-view-async",
      "content": "\"use client\"\n// mock api result\nconst response: Record<string, Node[]> = {\n  node_modules: [\n    { id: \"zag-js\", name: \"zag-js\" },\n    { id: \"pandacss\", name: \"panda\" },\n    { id: \"@types\", name: \"@types\", childrenCount: 2 },\n  ],\n  \"node_modules/@types\": [\n    { id: \"react\", name: \"react\" },\n    { id: \"react-dom\", name: \"react-dom\" },\n  ],\n  src: [\n    { id: \"app.tsx\", name: \"app.tsx\" },\n    { id: \"index.ts\", name: \"index.ts\" },\n  ],\n}\n\n// function to load children of a node\nfunction loadChildren(\n  details: TreeView.LoadChildrenDetails<Node>,\n): Promise<Node[]> {\n  const value = details.valuePath.join(\"/\")\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      resolve(response[value] ?? [])\n    }, 1200)\n  })\n}\n\nexport const TreeViewAsync = () => {\n  const [collection, setCollection] = useState(initialCollection)\n  return (\n    <TreeView.Root\n      collection={collection}\n      loadChildren={loadChildren}\n      onLoadChildrenComplete={(e) => setCollection(e.collection)}\n    >\n      <TreeView.Label>Tree</TreeView.Label>\n      <TreeView.Tree>\n        <TreeView.Node<Node>\n          indentGuide={<TreeView.BranchIndentGuide />}\n          render={({ node, nodeState }) =>\n            nodeState.isBranch ? (\n              <TreeView.BranchControl>\n                {nodeState.loading ? (\n                  <LuLoaderCircle style={{ animation: \"spin 1s infinite\" }} />\n                ) : (\n                  <LuFolder />\n                )}\n                <TreeView.BranchText>{node.name}</TreeView.BranchText>\n              </TreeView.BranchControl>\n            ) : (\n              <TreeView.Item>\n                <LuFile />\n                <TreeView.ItemText>{node.name}</TreeView.ItemText>\n              </TreeView.Item>\n            )\n          }\n        />\n      </TreeView.Tree>\n    </TreeView.Root>\n  )\n}\n\ninterface Node {\n  id: string\n  name: string\n  children?: Node[]\n  childrenCount?: number\n}\n\nconst initialCollection = createTreeCollection<Node>({\n  nodeToValue: (node) => node.id,\n  nodeToString: (node) => node.name,\n  rootNode: {\n    id: \"ROOT\",\n    name: \"\",\n    children: [\n      { id: \"node_modules\", name: \"node_modules\", childrenCount: 3 },\n      { id: \"src\", name: \"src\", childrenCount: 2 },\n      { id: \"panda.config\", name: \"panda.config.ts\" },\n      { id: \"package.json\", name: \"package.json\" },\n      { id: \"renovate.json\", name: \"renovate.json\" },\n      { id: \"readme.md\", name: \"README.md\" },\n    ],\n  },\n})\n",
      "hasSnippet": false,
      "importPaths": [
        "import { TreeView, createTreeCollection } from \"@chakra-ui/react\"",
        "import { useState } from \"react\"",
        "import { LuFile, LuFolder, LuLoaderCircle } from \"react-icons/lu\""
      ],
      "importPath": "import { TreeView } from \"@chakra-ui/react\"",
      "npmDependencies": [
        "react-icons"
      ]
    },
    {
      "name": "tree-view-basic",
      "content": "\"use client\"\nexport const TreeViewBasic = () => {\n  return (\n    <TreeView.Root collection={collection} maxW=\"sm\">\n      <TreeView.Label>Tree</TreeView.Label>\n      <TreeView.Tree>\n        <TreeView.Node\n          indentGuide={<TreeView.BranchIndentGuide />}\n          render={({ node, nodeState }) =>\n            nodeState.isBranch ? (\n              <TreeView.BranchControl>\n                <LuFolder />\n                <TreeView.BranchText>{node.name}</TreeView.BranchText>\n              </TreeView.BranchControl>\n            ) : (\n              <TreeView.Item>\n                <LuFile />\n                <TreeView.ItemText>{node.name}</TreeView.ItemText>\n              </TreeView.Item>\n            )\n          }\n        />\n      </TreeView.Tree>\n    </TreeView.Root>\n  )\n}\n\ninterface Node {\n  id: string\n  name: string\n  children?: Node[]\n}\n\nconst collection = createTreeCollection<Node>({\n  nodeToValue: (node) => node.id,\n  nodeToString: (node) => node.name,\n  rootNode: {\n    id: \"ROOT\",\n    name: \"\",\n    children: [\n      {\n        id: \"node_modules\",\n        name: \"node_modules\",\n        children: [\n          { id: \"node_modules/zag-js\", name: \"zag-js\" },\n          { id: \"node_modules/pandacss\", name: \"panda\" },\n          {\n            id: \"node_modules/@types\",\n            name: \"@types\",\n            children: [\n              { id: \"node_modules/@types/react\", name: \"react\" },\n              { id: \"node_modules/@types/react-dom\", name: \"react-dom\" },\n            ],\n          },\n        ],\n      },\n      {\n        id: \"src\",\n        name: \"src\",\n        children: [\n          { id: \"src/app.tsx\", name: \"app.tsx\" },\n          { id: \"src/index.ts\", name: \"index.ts\" },\n        ],\n      },\n      { id: \"panda.config\", name: \"panda.config.ts\" },\n      { id: \"package.json\", name: \"package.json\" },\n      { id: \"renovate.json\", name: \"renovate.json\" },\n      { id: \"readme.md\", name: \"README.md\" },\n    ],\n  },\n})\n",
      "hasSnippet": false,
      "importPaths": [
        "import { TreeView, createTreeCollection } from \"@chakra-ui/react\"",
        "import { LuFile, LuFolder } from \"react-icons/lu\""
      ],
      "importPath": "import { TreeView } from \"@chakra-ui/react\"",
      "npmDependencies": [
        "react-icons"
      ]
    },
    {
      "name": "tree-view-checkbox",
      "content": "\"use client\"\nconst TreeNodeCheckbox = (props: TreeView.NodeCheckboxProps) => {\n  const nodeState = useTreeViewNodeContext()\n  return (\n    <TreeView.NodeCheckbox aria-label=\"check node\" {...props}>\n      <Checkmark\n        bg={{\n          base: \"bg\",\n          _checked: \"colorPalette.solid\",\n          _indeterminate: \"colorPalette.solid\",\n        }}\n        size=\"sm\"\n        checked={nodeState.checked === true}\n        indeterminate={nodeState.checked === \"indeterminate\"}\n      />\n    </TreeView.NodeCheckbox>\n  )\n}\n\nexport const TreeViewCheckbox = () => {\n  return (\n    <TreeView.Root collection={collection} maxW=\"sm\" defaultCheckedValue={[]}>\n      <TreeView.Label>Tree</TreeView.Label>\n      <TreeView.Tree>\n        <TreeView.Node\n          render={({ node, nodeState }) =>\n            nodeState.isBranch ? (\n              <TreeView.BranchControl role=\"none\">\n                <TreeNodeCheckbox />\n                <LuFolder />\n                <TreeView.BranchText>{node.name}</TreeView.BranchText>\n              </TreeView.BranchControl>\n            ) : (\n              <TreeView.Item>\n                <TreeNodeCheckbox />\n                <LuFile />\n                <TreeView.ItemText>{node.name}</TreeView.ItemText>\n              </TreeView.Item>\n            )\n          }\n        />\n      </TreeView.Tree>\n    </TreeView.Root>\n  )\n}\n\ninterface Node {\n  id: string\n  name: string\n  children?: Node[]\n}\n\nconst collection = createTreeCollection<Node>({\n  nodeToValue: (node) => node.id,\n  nodeToString: (node) => node.name,\n  rootNode: {\n    id: \"ROOT\",\n    name: \"\",\n    children: [\n      {\n        id: \"node_modules\",\n        name: \"node_modules\",\n        children: [\n          { id: \"node_modules/zag-js\", name: \"zag-js\" },\n          { id: \"node_modules/pandacss\", name: \"panda\" },\n          {\n            id: \"node_modules/@types\",\n            name: \"@types\",\n            children: [\n              { id: \"node_modules/@types/react\", name: \"react\" },\n              { id: \"node_modules/@types/react-dom\", name: \"react-dom\" },\n            ],\n          },\n        ],\n      },\n      {\n        id: \"src\",\n        name: \"src\",\n        children: [\n          { id: \"src/app.tsx\", name: \"app.tsx\" },\n          { id: \"src/index.ts\", name: \"index.ts\" },\n        ],\n      },\n      { id: \"panda.config\", name: \"panda.config.ts\" },\n      { id: \"package.json\", name: \"package.json\" },\n      { id: \"renovate.json\", name: \"renovate.json\" },\n      { id: \"readme.md\", name: \"README.md\" },\n    ],\n  },\n})\n",
      "hasSnippet": false,
      "importPaths": [
        "import {\n  Checkmark,\n  TreeView,\n  createTreeCollection,\n  useTreeViewNodeContext,\n} from \"@chakra-ui/react\"",
        "import { LuFile, LuFolder } from \"react-icons/lu\""
      ],
      "importPath": "import { TreeView } from \"@chakra-ui/react\"",
      "npmDependencies": [
        "react-icons"
      ]
    },
    {
      "name": "tree-view-collapse-animation",
      "content": "\"use client\"\nexport const TreeViewCollapseAnimation = () => {\n  return (\n    <TreeView.Root collection={collection} maxW=\"sm\" animateContent>\n      <TreeView.Label>Tree</TreeView.Label>\n      <TreeView.Tree>\n        <TreeView.Node\n          indentGuide={<TreeView.BranchIndentGuide />}\n          render={({ node, nodeState }) =>\n            nodeState.isBranch ? (\n              <TreeView.BranchControl>\n                <LuFolder />\n                <TreeView.BranchText>{node.name}</TreeView.BranchText>\n              </TreeView.BranchControl>\n            ) : (\n              <TreeView.Item>\n                <LuFile />\n                <TreeView.ItemText>{node.name}</TreeView.ItemText>\n              </TreeView.Item>\n            )\n          }\n        />\n      </TreeView.Tree>\n    </TreeView.Root>\n  )\n}\n\ninterface Node {\n  id: string\n  name: string\n  children?: Node[]\n}\n\nconst collection = createTreeCollection<Node>({\n  nodeToValue: (node) => node.id,\n  nodeToString: (node) => node.name,\n  rootNode: {\n    id: \"ROOT\",\n    name: \"\",\n    children: [\n      {\n        id: \"node_modules\",\n        name: \"node_modules\",\n        children: [\n          { id: \"node_modules/zag-js\", name: \"zag-js\" },\n          { id: \"node_modules/pandacss\", name: \"panda\" },\n          {\n            id: \"node_modules/@types\",\n            name: \"@types\",\n            children: [\n              { id: \"node_modules/@types/react\", name: \"react\" },\n              { id: \"node_modules/@types/react-dom\", name: \"react-dom\" },\n            ],\n          },\n        ],\n      },\n      {\n        id: \"src\",\n        name: \"src\",\n        children: [\n          { id: \"src/app.tsx\", name: \"app.tsx\" },\n          { id: \"src/index.ts\", name: \"index.ts\" },\n        ],\n      },\n      { id: \"panda.config\", name: \"panda.config.ts\" },\n      { id: \"package.json\", name: \"package.json\" },\n      { id: \"renovate.json\", name: \"renovate.json\" },\n      { id: \"readme.md\", name: \"README.md\" },\n    ],\n  },\n})\n",
      "hasSnippet": false,
      "importPaths": [
        "import { TreeView, createTreeCollection } from \"@chakra-ui/react\"",
        "import { LuFile, LuFolder } from \"react-icons/lu\""
      ],
      "importPath": "import { TreeView } from \"@chakra-ui/react\"",
      "npmDependencies": [
        "react-icons"
      ]
    },
    {
      "name": "tree-view-context-menu",
      "content": "\"use client\"\n\ninterface TreeNodeContextMenuProps extends Menu.RootProps {\n  uid: string\n  node: Node\n  children: React.ReactNode\n}\n\nconst TreeNodeContextMenu = (props: TreeNodeContextMenuProps) => {\n  const { children, uid, node, ...rest } = props\n\n  const treeView = useTreeViewContext()\n  const treeStyles = useTreeViewStyles()\n  const nodeState = useTreeViewNodeContext()\n\n  const attrs = nodeState.isBranch\n    ? treeView.getBranchControlProps({ node, indexPath: nodeState.indexPath })\n    : treeView.getItemProps({ node, indexPath: nodeState.indexPath })\n\n  const styles = nodeState.isBranch ? treeStyles.branchControl : treeStyles.item\n\n  return (\n    <Menu.Root {...rest} ids={{ contextTrigger: getNodeId(uid, node.id) }}>\n      <Menu.ContextTrigger as=\"div\" {...attrs} css={styles}>\n        {children}\n      </Menu.ContextTrigger>\n      <Portal>\n        <Menu.Positioner>\n          <Menu.Content>\n            <Menu.Item value=\"rename\">Rename</Menu.Item>\n            <Menu.Item value=\"delete\">Delete</Menu.Item>\n          </Menu.Content>\n        </Menu.Positioner>\n      </Portal>\n    </Menu.Root>\n  )\n}\n\nconst getNodeId = (uid: string, node: string) => `${uid}/${node}`\n\nexport const TreeViewContextMenu = () => {\n  const uid = useId()\n  return (\n    <TreeView.Root\n      collection={collection}\n      maxW=\"sm\"\n      ids={{ node: (value) => getNodeId(uid, value) }}\n    >\n      <TreeView.Label>Tree</TreeView.Label>\n      <TreeView.Tree>\n        <TreeView.Node\n          indentGuide={<TreeView.BranchIndentGuide />}\n          render={({ node, nodeState }) =>\n            nodeState.isBranch ? (\n              <TreeNodeContextMenu uid={uid} node={node}>\n                <LuFolder />\n                <TreeView.BranchText>{node.name}</TreeView.BranchText>\n              </TreeNodeContextMenu>\n            ) : (\n              <TreeNodeContextMenu uid={uid} node={node}>\n                <LuFile />\n                <TreeView.ItemText>{node.name}</TreeView.ItemText>\n              </TreeNodeContextMenu>\n            )\n          }\n        />\n      </TreeView.Tree>\n    </TreeView.Root>\n  )\n}\n\ninterface Node {\n  id: string\n  name: string\n  children?: Node[]\n}\n\nconst collection = createTreeCollection<Node>({\n  nodeToValue: (node) => node.id,\n  nodeToString: (node) => node.name,\n  rootNode: {\n    id: \"ROOT\",\n    name: \"\",\n    children: [\n      {\n        id: \"node_modules\",\n        name: \"node_modules\",\n        children: [\n          { id: \"node_modules/zag-js\", name: \"zag-js\" },\n          { id: \"node_modules/pandacss\", name: \"panda\" },\n          {\n            id: \"node_modules/@types\",\n            name: \"@types\",\n            children: [\n              { id: \"node_modules/@types/react\", name: \"react\" },\n              { id: \"node_modules/@types/react-dom\", name: \"react-dom\" },\n            ],\n          },\n        ],\n      },\n      {\n        id: \"src\",\n        name: \"src\",\n        children: [\n          { id: \"src/app.tsx\", name: \"app.tsx\" },\n          { id: \"src/index.ts\", name: \"index.ts\" },\n        ],\n      },\n      { id: \"panda.config\", name: \"panda.config.ts\" },\n      { id: \"package.json\", name: \"package.json\" },\n      { id: \"renovate.json\", name: \"renovate.json\" },\n      { id: \"readme.md\", name: \"README.md\" },\n    ],\n  },\n})\n",
      "hasSnippet": false,
      "importPaths": [
        "import {\n  Menu,\n  Portal,\n  TreeView,\n  createTreeCollection,\n  useTreeViewContext,\n  useTreeViewNodeContext,\n  useTreeViewStyles,\n} from \"@chakra-ui/react\"",
        "import { useId } from \"react\"",
        "import { LuFile, LuFolder } from \"react-icons/lu\""
      ],
      "importPath": "import { TreeView } from \"@chakra-ui/react\"",
      "npmDependencies": [
        "react-icons"
      ]
    },
    {
      "name": "tree-view-controlled-expansion",
      "content": "\"use client\"\nexport const TreeViewControlledExpansion = () => {\n  const [expandedValue, setExpandedValue] = useState<string[]>([\"node_modules\"])\n  return (\n    <TreeView.Root\n      collection={collection}\n      expandedValue={expandedValue}\n      onExpandedChange={(e) => setExpandedValue(e.expandedValue)}\n    >\n      <TreeView.Label>Tree</TreeView.Label>\n      <TreeView.Tree>\n        <TreeView.Node<Node>\n          indentGuide={<TreeView.BranchIndentGuide />}\n          render={({ node }) =>\n            node.children ? (\n              <TreeView.BranchControl>\n                <LuFolder />\n                <TreeView.BranchText>{node.name}</TreeView.BranchText>\n              </TreeView.BranchControl>\n            ) : (\n              <TreeView.Item>\n                <LuFile />\n                <TreeView.ItemText>{node.name}</TreeView.ItemText>\n              </TreeView.Item>\n            )\n          }\n        />\n      </TreeView.Tree>\n    </TreeView.Root>\n  )\n}\n\ninterface Node {\n  id: string\n  name: string\n  children?: Node[]\n}\n\nconst collection = createTreeCollection<Node>({\n  nodeToValue: (node) => node.id,\n  nodeToString: (node) => node.name,\n  rootNode: {\n    id: \"ROOT\",\n    name: \"\",\n    children: [\n      {\n        id: \"node_modules\",\n        name: \"node_modules\",\n        children: [\n          { id: \"node_modules/zag-js\", name: \"zag-js\" },\n          { id: \"node_modules/pandacss\", name: \"panda\" },\n          {\n            id: \"node_modules/@types\",\n            name: \"@types\",\n            children: [\n              { id: \"node_modules/@types/react\", name: \"react\" },\n              { id: \"node_modules/@types/react-dom\", name: \"react-dom\" },\n            ],\n          },\n        ],\n      },\n      {\n        id: \"src\",\n        name: \"src\",\n        children: [\n          { id: \"src/app.tsx\", name: \"app.tsx\" },\n          { id: \"src/index.ts\", name: \"index.ts\" },\n        ],\n      },\n      { id: \"panda.config\", name: \"panda.config.ts\" },\n      { id: \"package.json\", name: \"package.json\" },\n      { id: \"renovate.json\", name: \"renovate.json\" },\n      { id: \"readme.md\", name: \"README.md\" },\n    ],\n  },\n})\n",
      "hasSnippet": false,
      "importPaths": [
        "import { TreeView, createTreeCollection } from \"@chakra-ui/react\"",
        "import { useState } from \"react\"",
        "import { LuFile, LuFolder } from \"react-icons/lu\""
      ],
      "importPath": "import { TreeView } from \"@chakra-ui/react\"",
      "npmDependencies": [
        "react-icons"
      ]
    },
    {
      "name": "tree-view-custom-icon",
      "content": "\"use client\"\nexport const TreeViewCustomIcon = () => {\n  return (\n    <TreeView.Root\n      collection={collection}\n      maxW=\"sm\"\n      size=\"sm\"\n      defaultExpandedValue={[\"ROOT\"]}\n    >\n      <TreeView.Label srOnly>Tree</TreeView.Label>\n      <TreeView.Tree>\n        <TreeView.Node\n          render={({ node, nodeState }) =>\n            nodeState.isBranch ? (\n              <TreeView.BranchControl>\n                <TreeViewNodeIcon type={node.type} />\n                <TreeView.BranchText fontWeight=\"medium\">\n                  {node.name}\n                </TreeView.BranchText>\n              </TreeView.BranchControl>\n            ) : (\n              <TreeView.Item>\n                <TreeViewNodeIcon type={node.type} />\n                <TreeView.ItemText>{node.name}</TreeView.ItemText>\n              </TreeView.Item>\n            )\n          }\n        />\n      </TreeView.Tree>\n    </TreeView.Root>\n  )\n}\n\nconst TreeViewNodeIcon = (props: { type: Node[\"type\"] }) => {\n  switch (props.type) {\n    case \"text\":\n      return <RxText />\n    case \"image\":\n      return <RxImage />\n    case \"frame\":\n      return <RxFrame />\n    case \"rectangle\":\n      return <RxSquare />\n    default:\n      return null\n  }\n}\n\ninterface Node {\n  type: \"text\" | \"image\" | \"frame\" | \"rectangle\"\n  id: string\n  name: string\n  children?: Node[]\n}\n\nconst collection = createTreeCollection<Node>({\n  nodeToValue: (node) => node.id,\n  nodeToString: (node) => node.name,\n  rootNode: {\n    id: \"ROOT\",\n    name: \"\",\n    type: \"frame\",\n    children: [\n      {\n        id: \"page\",\n        name: \"Page\",\n        type: \"frame\",\n        children: [\n          {\n            id: \"header\",\n            name: \"Header\",\n            type: \"frame\",\n            children: [\n              { id: \"logo\", name: \"Logo\", type: \"image\" },\n              { id: \"nav\", name: \"Navigation\", type: \"text\" },\n            ],\n          },\n        ],\n      },\n      { id: \"footer\", name: \"Footer\", type: \"text\" },\n      {\n        id: \"main\",\n        name: \"Main\",\n        type: \"frame\",\n        children: [\n          { id: \"hero\", name: \"Hero Section\", type: \"text\" },\n          { id: \"features\", name: \"Features\", type: \"text\" },\n        ],\n      },\n    ],\n  },\n})\n",
      "hasSnippet": false,
      "importPaths": [
        "import { TreeView, createTreeCollection } from \"@chakra-ui/react\"",
        "import { RxFrame, RxImage, RxSquare, RxText } from \"react-icons/rx\""
      ],
      "importPath": "import { TreeView } from \"@chakra-ui/react\"",
      "npmDependencies": [
        "react-icons"
      ]
    },
    {
      "name": "tree-view-default-expanded",
      "content": "\"use client\"\nexport const TreeViewDefaultExpanded = () => {\n  return (\n    <TreeView.Root\n      collection={collection}\n      maxW=\"sm\"\n      defaultExpandedValue={[\"node_modules\", \"node_modules/@types\"]}\n    >\n      <TreeView.Label>Tree</TreeView.Label>\n      <TreeView.Tree>\n        <TreeView.Node\n          render={({ node, nodeState }) =>\n            nodeState.isBranch ? (\n              <TreeView.BranchControl>\n                <LuFolder />\n                <TreeView.BranchText>{node.name}</TreeView.BranchText>\n              </TreeView.BranchControl>\n            ) : (\n              <TreeView.Item>\n                <LuFile />\n                <TreeView.ItemText>{node.name}</TreeView.ItemText>\n              </TreeView.Item>\n            )\n          }\n        />\n      </TreeView.Tree>\n    </TreeView.Root>\n  )\n}\n\ninterface Node {\n  id: string\n  name: string\n  children?: Node[]\n}\n\nconst collection = createTreeCollection<Node>({\n  nodeToValue: (node) => node.id,\n  nodeToString: (node) => node.name,\n  rootNode: {\n    id: \"ROOT\",\n    name: \"\",\n    children: [\n      {\n        id: \"node_modules\",\n        name: \"node_modules\",\n        children: [\n          { id: \"node_modules/zag-js\", name: \"zag-js\" },\n          { id: \"node_modules/pandacss\", name: \"panda\" },\n          {\n            id: \"node_modules/@types\",\n            name: \"@types\",\n            children: [\n              { id: \"node_modules/@types/react\", name: \"react\" },\n              { id: \"node_modules/@types/react-dom\", name: \"react-dom\" },\n            ],\n          },\n        ],\n      },\n      {\n        id: \"src\",\n        name: \"src\",\n        children: [\n          { id: \"src/app.tsx\", name: \"app.tsx\" },\n          { id: \"src/index.ts\", name: \"index.ts\" },\n        ],\n      },\n      { id: \"panda.config\", name: \"panda.config.ts\" },\n      { id: \"package.json\", name: \"package.json\" },\n      { id: \"renovate.json\", name: \"renovate.json\" },\n      { id: \"readme.md\", name: \"README.md\" },\n    ],\n  },\n})\n",
      "hasSnippet": false,
      "importPaths": [
        "import { TreeView, createTreeCollection } from \"@chakra-ui/react\"",
        "import { LuFile, LuFolder } from \"react-icons/lu\""
      ],
      "importPath": "import { TreeView } from \"@chakra-ui/react\"",
      "npmDependencies": [
        "react-icons"
      ]
    },
    {
      "name": "tree-view-disabled-node",
      "content": "\"use client\"\nexport const TreeViewDisabledNode = () => {\n  return (\n    <TreeView.Root collection={collection} maxW=\"sm\">\n      <TreeView.Label>Tree</TreeView.Label>\n      <TreeView.Tree>\n        <TreeView.Node\n          indentGuide={<TreeView.BranchIndentGuide />}\n          render={({ node, nodeState }) =>\n            nodeState.isBranch ? (\n              <TreeView.BranchControl>\n                <LuFolder />\n                <TreeView.BranchText>{node.name}</TreeView.BranchText>\n              </TreeView.BranchControl>\n            ) : (\n              <TreeView.Item>\n                <LuFile />\n                <TreeView.ItemText>{node.name}</TreeView.ItemText>\n              </TreeView.Item>\n            )\n          }\n        />\n      </TreeView.Tree>\n    </TreeView.Root>\n  )\n}\n\ninterface Node {\n  id: string\n  name: string\n  disabled?: boolean\n  children?: Node[]\n}\n\nconst collection = createTreeCollection<Node>({\n  nodeToValue: (node) => node.id,\n  nodeToString: (node) => node.name,\n  rootNode: {\n    id: \"ROOT\",\n    name: \"\",\n    children: [\n      {\n        id: \"node_modules\",\n        name: \"node_modules\",\n        children: [\n          { id: \"node_modules/zag-js\", name: \"zag-js\" },\n          { id: \"node_modules/pandacss\", name: \"panda\" },\n          {\n            id: \"node_modules/@types\",\n            name: \"@types\",\n            children: [\n              { id: \"node_modules/@types/react\", name: \"react\" },\n              { id: \"node_modules/@types/react-dom\", name: \"react-dom\" },\n            ],\n          },\n        ],\n      },\n      {\n        id: \"src\",\n        name: \"src\",\n        children: [\n          { id: \"src/app.tsx\", name: \"app.tsx\" },\n          { id: \"src/index.ts\", name: \"index.ts\" },\n        ],\n      },\n      { id: \"panda.config\", name: \"panda.config.ts\" },\n      { id: \"package.json\", name: \"package.json\" },\n      { id: \"renovate.json\", name: \"renovate.json\", disabled: true },\n      { id: \"readme.md\", name: \"README.md\" },\n    ],\n  },\n})\n",
      "hasSnippet": false,
      "importPaths": [
        "import { TreeView, createTreeCollection } from \"@chakra-ui/react\"",
        "import { LuFile, LuFolder } from \"react-icons/lu\""
      ],
      "importPath": "import { TreeView } from \"@chakra-ui/react\"",
      "npmDependencies": [
        "react-icons"
      ]
    },
    {
      "name": "tree-view-expand-collapse-all",
      "content": "\"use client\"\nconst ExpandCollapseAll = () => {\n  const tree = useTreeViewContext()\n  const isAllExpanded = useMemo(\n    () => isEqual(tree.expandedValue, tree.collection.getBranchValues()),\n    [tree.expandedValue, tree.collection],\n  )\n  return (\n    <ButtonGroup size=\"2xs\" variant=\"outline\">\n      <Button\n        aria-label=\"Expand all\"\n        onClick={() => tree.expand()}\n        hidden={isAllExpanded}\n      >\n        Expand all\n      </Button>\n      <Button\n        aria-label=\"Collapse all\"\n        onClick={() => tree.collapse()}\n        hidden={!isAllExpanded}\n      >\n        Collapse all\n      </Button>\n    </ButtonGroup>\n  )\n}\n\nexport const TreeViewExpandCollapseAll = () => {\n  return (\n    <TreeView.Root collection={collection} maxW=\"sm\">\n      <HStack justify=\"space-between\">\n        <TreeView.Label>Tree</TreeView.Label>\n        <ExpandCollapseAll />\n      </HStack>\n      <TreeView.Tree>\n        <TreeView.Node\n          indentGuide={<TreeView.BranchIndentGuide />}\n          render={({ node, nodeState }) =>\n            nodeState.isBranch ? (\n              <TreeView.BranchControl>\n                <LuFolder />\n                <TreeView.BranchText>{node.name}</TreeView.BranchText>\n              </TreeView.BranchControl>\n            ) : (\n              <TreeView.Item>\n                <LuFile />\n                <TreeView.ItemText>{node.name}</TreeView.ItemText>\n              </TreeView.Item>\n            )\n          }\n        />\n      </TreeView.Tree>\n    </TreeView.Root>\n  )\n}\n\ninterface Node {\n  id: string\n  name: string\n  children?: Node[]\n}\n\nconst collection = createTreeCollection<Node>({\n  nodeToValue: (node) => node.id,\n  nodeToString: (node) => node.name,\n  rootNode: {\n    id: \"ROOT\",\n    name: \"\",\n    children: [\n      {\n        id: \"node_modules\",\n        name: \"node_modules\",\n        children: [\n          { id: \"node_modules/zag-js\", name: \"zag-js\" },\n          { id: \"node_modules/pandacss\", name: \"panda\" },\n          {\n            id: \"node_modules/@types\",\n            name: \"@types\",\n            children: [\n              { id: \"node_modules/@types/react\", name: \"react\" },\n              { id: \"node_modules/@types/react-dom\", name: \"react-dom\" },\n            ],\n          },\n        ],\n      },\n      {\n        id: \"src\",\n        name: \"src\",\n        children: [\n          { id: \"src/app.tsx\", name: \"app.tsx\" },\n          { id: \"src/index.ts\", name: \"index.ts\" },\n        ],\n      },\n      { id: \"panda.config\", name: \"panda.config.ts\" },\n      { id: \"package.json\", name: \"package.json\" },\n      { id: \"renovate.json\", name: \"renovate.json\" },\n      { id: \"readme.md\", name: \"README.md\" },\n    ],\n  },\n})\n",
      "hasSnippet": false,
      "importPaths": [
        "import {\n  Button,\n  ButtonGroup,\n  HStack,\n  TreeView,\n  createTreeCollection,\n  useTreeViewContext,\n} from \"@chakra-ui/react\"",
        "import { isEqual } from \"es-toolkit\"",
        "import { useMemo } from \"react\"",
        "import { LuFile, LuFolder } from \"react-icons/lu\""
      ],
      "importPath": "import { TreeView } from \"@chakra-ui/react\"",
      "npmDependencies": [
        "es-toolkit",
        "react-icons"
      ]
    },
    {
      "name": "tree-view-expand-icon",
      "content": "\"use client\"\nexport const TreeViewExpandIcon = () => {\n  return (\n    <TreeView.Root collection={collection} maxW=\"sm\">\n      <TreeView.Label>Tree</TreeView.Label>\n      <TreeView.Tree>\n        <TreeView.Node\n          render={({ node, nodeState }) =>\n            nodeState.isBranch ? (\n              <TreeView.BranchControl>\n                {nodeState.expanded ? <LuSquareMinus /> : <LuSquarePlus />}\n                <TreeView.BranchText>{node.name}</TreeView.BranchText>\n              </TreeView.BranchControl>\n            ) : (\n              <TreeView.Item>{node.name}</TreeView.Item>\n            )\n          }\n        />\n      </TreeView.Tree>\n    </TreeView.Root>\n  )\n}\n\ninterface Node {\n  id: string\n  name: string\n  children?: Node[]\n}\n\nconst collection = createTreeCollection<Node>({\n  nodeToValue: (node) => node.id,\n  nodeToString: (node) => node.name,\n  rootNode: {\n    id: \"ROOT\",\n    name: \"\",\n    children: [\n      {\n        id: \"node_modules\",\n        name: \"node_modules\",\n        children: [\n          { id: \"node_modules/zag-js\", name: \"zag-js\" },\n          { id: \"node_modules/pandacss\", name: \"panda\" },\n          {\n            id: \"node_modules/@types\",\n            name: \"@types\",\n            children: [\n              { id: \"node_modules/@types/react\", name: \"react\" },\n              { id: \"node_modules/@types/react-dom\", name: \"react-dom\" },\n            ],\n          },\n        ],\n      },\n      {\n        id: \"src\",\n        name: \"src\",\n        children: [\n          { id: \"src/app.tsx\", name: \"app.tsx\" },\n          { id: \"src/index.ts\", name: \"index.ts\" },\n        ],\n      },\n      { id: \"panda.config\", name: \"panda.config.ts\" },\n      { id: \"package.json\", name: \"package.json\" },\n      { id: \"renovate.json\", name: \"renovate.json\" },\n      { id: \"readme.md\", name: \"README.md\" },\n    ],\n  },\n})\n",
      "hasSnippet": false,
      "importPaths": [
        "import { TreeView, createTreeCollection } from \"@chakra-ui/react\"",
        "import { LuSquareMinus, LuSquarePlus } from \"react-icons/lu\""
      ],
      "importPath": "import { TreeView } from \"@chakra-ui/react\"",
      "npmDependencies": [
        "react-icons"
      ]
    },
    {
      "name": "tree-view-expanded-styling",
      "content": "\"use client\"\nexport const TreeViewExpandedStyling = () => {\n  return (\n    <TreeView.Root\n      collection={collection}\n      maxW=\"sm\"\n      variant=\"solid\"\n      colorPalette=\"teal\"\n      defaultExpandedValue={[\"node_modules\"]}\n    >\n      <TreeView.Label>Tree</TreeView.Label>\n      <TreeView.Tree>\n        <TreeView.Node\n          branchProps={{\n            _expanded: { bg: \"teal.subtle/30\" },\n          }}\n          render={({ node, nodeState }) =>\n            nodeState.isBranch ? (\n              <TreeView.BranchControl>\n                {nodeState.expanded ? <LuSquareMinus /> : <LuSquarePlus />}\n                <TreeView.BranchText>{node.name}</TreeView.BranchText>\n              </TreeView.BranchControl>\n            ) : (\n              <TreeView.Item>{node.name}</TreeView.Item>\n            )\n          }\n        />\n      </TreeView.Tree>\n    </TreeView.Root>\n  )\n}\n\ninterface Node {\n  id: string\n  name: string\n  children?: Node[]\n}\n\nconst collection = createTreeCollection<Node>({\n  nodeToValue: (node) => node.id,\n  nodeToString: (node) => node.name,\n  rootNode: {\n    id: \"ROOT\",\n    name: \"\",\n    children: [\n      {\n        id: \"node_modules\",\n        name: \"node_modules\",\n        children: [\n          { id: \"node_modules/zag-js\", name: \"zag-js\" },\n          { id: \"node_modules/pandacss\", name: \"panda\" },\n          {\n            id: \"node_modules/@types\",\n            name: \"@types\",\n            children: [\n              { id: \"node_modules/@types/react\", name: \"react\" },\n              { id: \"node_modules/@types/react-dom\", name: \"react-dom\" },\n            ],\n          },\n        ],\n      },\n      {\n        id: \"src\",\n        name: \"src\",\n        children: [\n          { id: \"src/app.tsx\", name: \"app.tsx\" },\n          { id: \"src/index.ts\", name: \"index.ts\" },\n        ],\n      },\n      { id: \"panda.config\", name: \"panda.config.ts\" },\n      { id: \"package.json\", name: \"package.json\" },\n      { id: \"renovate.json\", name: \"renovate.json\" },\n      { id: \"readme.md\", name: \"README.md\" },\n    ],\n  },\n})\n",
      "hasSnippet": false,
      "importPaths": [
        "import { TreeView, createTreeCollection } from \"@chakra-ui/react\"",
        "import { LuSquareMinus, LuSquarePlus } from \"react-icons/lu\""
      ],
      "importPath": "import { TreeView } from \"@chakra-ui/react\"",
      "npmDependencies": [
        "react-icons"
      ]
    },
    {
      "name": "tree-view-explicit-expand",
      "content": "\"use client\"\nexport const TreeViewExplicitExpand = () => {\n  return (\n    <TreeView.Root collection={collection} maxW=\"sm\" expandOnClick={false}>\n      <TreeView.Label>Tree</TreeView.Label>\n      <TreeView.Tree>\n        <TreeView.Node\n          indentGuide={<TreeView.BranchIndentGuide />}\n          render={({ node, nodeState }) =>\n            nodeState.isBranch ? (\n              <TreeView.BranchControl>\n                <TreeView.BranchTrigger>\n                  <TreeView.BranchIndicator asChild>\n                    <LuChevronRight />\n                  </TreeView.BranchIndicator>\n                </TreeView.BranchTrigger>\n                <LuFolder />\n                <TreeView.BranchText>{node.name}</TreeView.BranchText>\n              </TreeView.BranchControl>\n            ) : (\n              <TreeView.Item>\n                <LuFile />\n                <TreeView.ItemText>{node.name}</TreeView.ItemText>\n              </TreeView.Item>\n            )\n          }\n        />\n      </TreeView.Tree>\n    </TreeView.Root>\n  )\n}\n\ninterface Node {\n  id: string\n  name: string\n  children?: Node[]\n}\n\nconst collection = createTreeCollection<Node>({\n  nodeToValue: (node) => node.id,\n  nodeToString: (node) => node.name,\n  rootNode: {\n    id: \"ROOT\",\n    name: \"\",\n    children: [\n      {\n        id: \"node_modules\",\n        name: \"node_modules\",\n        children: [\n          { id: \"node_modules/zag-js\", name: \"zag-js\" },\n          { id: \"node_modules/pandacss\", name: \"panda\" },\n          {\n            id: \"node_modules/@types\",\n            name: \"@types\",\n            children: [\n              { id: \"node_modules/@types/react\", name: \"react\" },\n              { id: \"node_modules/@types/react-dom\", name: \"react-dom\" },\n            ],\n          },\n        ],\n      },\n      {\n        id: \"src\",\n        name: \"src\",\n        children: [\n          { id: \"src/app.tsx\", name: \"app.tsx\" },\n          { id: \"src/index.ts\", name: \"index.ts\" },\n        ],\n      },\n      { id: \"panda.config\", name: \"panda.config.ts\" },\n      { id: \"package.json\", name: \"package.json\" },\n      { id: \"renovate.json\", name: \"renovate.json\" },\n      { id: \"readme.md\", name: \"README.md\" },\n    ],\n  },\n})\n",
      "hasSnippet": false,
      "importPaths": [
        "import { TreeView, createTreeCollection } from \"@chakra-ui/react\"",
        "import { LuChevronRight, LuFile, LuFolder } from \"react-icons/lu\""
      ],
      "importPath": "import { TreeView } from \"@chakra-ui/react\"",
      "npmDependencies": [
        "react-icons"
      ]
    },
    {
      "name": "tree-view-lazy-mount",
      "content": "\"use client\"\nexport const TreeViewLazyMount = () => {\n  return (\n    <TreeView.Root collection={collection} maxW=\"sm\" lazyMount unmountOnExit>\n      <TreeView.Label>Tree</TreeView.Label>\n      <TreeView.Tree>\n        <TreeView.Node\n          indentGuide={<TreeView.BranchIndentGuide />}\n          render={({ node, nodeState }) =>\n            nodeState.isBranch ? (\n              <TreeView.BranchControl>\n                <LuFolder />\n                <TreeView.BranchText>{node.name}</TreeView.BranchText>\n              </TreeView.BranchControl>\n            ) : (\n              <TreeView.Item>\n                <LuFile />\n                <TreeView.ItemText>{node.name}</TreeView.ItemText>\n              </TreeView.Item>\n            )\n          }\n        />\n      </TreeView.Tree>\n    </TreeView.Root>\n  )\n}\n\ninterface Node {\n  id: string\n  name: string\n  children?: Node[]\n}\n\nconst collection = createTreeCollection<Node>({\n  nodeToValue: (node) => node.id,\n  nodeToString: (node) => node.name,\n  rootNode: {\n    id: \"ROOT\",\n    name: \"\",\n    children: [\n      {\n        id: \"node_modules\",\n        name: \"node_modules\",\n        children: [\n          { id: \"node_modules/zag-js\", name: \"zag-js\" },\n          { id: \"node_modules/pandacss\", name: \"panda\" },\n          {\n            id: \"node_modules/@types\",\n            name: \"@types\",\n            children: [\n              { id: \"node_modules/@types/react\", name: \"react\" },\n              { id: \"node_modules/@types/react-dom\", name: \"react-dom\" },\n            ],\n          },\n        ],\n      },\n      {\n        id: \"src\",\n        name: \"src\",\n        children: [\n          { id: \"src/app.tsx\", name: \"app.tsx\" },\n          { id: \"src/index.ts\", name: \"index.ts\" },\n        ],\n      },\n      { id: \"panda.config\", name: \"panda.config.ts\" },\n      { id: \"package.json\", name: \"package.json\" },\n      { id: \"renovate.json\", name: \"renovate.json\" },\n      { id: \"readme.md\", name: \"README.md\" },\n    ],\n  },\n})\n",
      "hasSnippet": false,
      "importPaths": [
        "import { TreeView, createTreeCollection } from \"@chakra-ui/react\"",
        "import { LuFile, LuFolder } from \"react-icons/lu\""
      ],
      "importPath": "import { TreeView } from \"@chakra-ui/react\"",
      "npmDependencies": [
        "react-icons"
      ]
    },
    {
      "name": "tree-view-multi-select",
      "content": "\"use client\"\nexport const TreeViewMultiSelect = () => {\n  return (\n    <TreeView.Root collection={collection} selectionMode=\"multiple\">\n      <TreeView.Label>Tree</TreeView.Label>\n      <TreeView.Tree>\n        <TreeView.Node<Node>\n          indentGuide={<TreeView.BranchIndentGuide />}\n          render={({ node }) =>\n            node.children ? (\n              <TreeView.BranchControl>\n                <LuFolder />\n                <TreeView.BranchText>{node.name}</TreeView.BranchText>\n              </TreeView.BranchControl>\n            ) : (\n              <TreeView.Item>\n                <LuFile />\n                <TreeView.ItemText>{node.name}</TreeView.ItemText>\n              </TreeView.Item>\n            )\n          }\n        />\n      </TreeView.Tree>\n    </TreeView.Root>\n  )\n}\n\ninterface Node {\n  id: string\n  name: string\n  children?: Node[]\n}\n\nconst collection = createTreeCollection<Node>({\n  nodeToValue: (node) => node.id,\n  nodeToString: (node) => node.name,\n  rootNode: {\n    id: \"ROOT\",\n    name: \"\",\n    children: [\n      {\n        id: \"node_modules\",\n        name: \"node_modules\",\n        children: [\n          { id: \"node_modules/zag-js\", name: \"zag-js\" },\n          { id: \"node_modules/pandacss\", name: \"panda\" },\n          {\n            id: \"node_modules/@types\",\n            name: \"@types\",\n            children: [\n              { id: \"node_modules/@types/react\", name: \"react\" },\n              { id: \"node_modules/@types/react-dom\", name: \"react-dom\" },\n            ],\n          },\n        ],\n      },\n      {\n        id: \"src\",\n        name: \"src\",\n        children: [\n          { id: \"src/app.tsx\", name: \"app.tsx\" },\n          { id: \"src/index.ts\", name: \"index.ts\" },\n        ],\n      },\n      { id: \"panda.config\", name: \"panda.config.ts\" },\n      { id: \"package.json\", name: \"package.json\" },\n      { id: \"renovate.json\", name: \"renovate.json\" },\n      { id: \"readme.md\", name: \"README.md\" },\n    ],\n  },\n})\n",
      "hasSnippet": false,
      "importPaths": [
        "import { TreeView, createTreeCollection } from \"@chakra-ui/react\"",
        "import { LuFile, LuFolder } from \"react-icons/lu\""
      ],
      "importPath": "import { TreeView } from \"@chakra-ui/react\"",
      "npmDependencies": [
        "react-icons"
      ]
    },
    {
      "name": "tree-view-mutation",
      "content": "\"use client\"\nexport const TreeViewMutation = () => {\n  const [collection, setCollection] = useState(initialCollection)\n\n  const removeNode = (props: TreeNodeProps) => {\n    setCollection(collection.remove([props.indexPath]))\n  }\n\n  const addNode = (props: TreeNodeProps) => {\n    const { node, indexPath } = props\n    if (!collection.isBranchNode(node)) return\n    const children = [\n      {\n        id: `untitled-${Date.now()}`,\n        name: `untitled-${node.children?.length}.tsx`,\n      },\n      ...(node.children || []),\n    ]\n    setCollection(collection.replace(indexPath, { ...node, children }))\n  }\n\n  return (\n    <TreeView.Root collection={collection} maxW=\"sm\">\n      <TreeView.Label>Tree</TreeView.Label>\n      <TreeView.Tree>\n        <TreeView.Node\n          indentGuide={<TreeView.BranchIndentGuide />}\n          render={({ node, nodeState, indexPath }) =>\n            nodeState.isBranch ? (\n              <TreeView.BranchControl role=\"\">\n                <LuFolder />\n                <TreeView.BranchText>{node.name}</TreeView.BranchText>\n                <TreeNodeActions\n                  node={node}\n                  indexPath={indexPath}\n                  onRemove={removeNode}\n                  onAdd={addNode}\n                />\n              </TreeView.BranchControl>\n            ) : (\n              <TreeView.Item>\n                <LuFile />\n                <TreeView.ItemText>{node.name}</TreeView.ItemText>\n                <TreeNodeActions\n                  node={node}\n                  indexPath={indexPath}\n                  onRemove={removeNode}\n                  onAdd={addNode}\n                />\n              </TreeView.Item>\n            )\n          }\n        />\n      </TreeView.Tree>\n    </TreeView.Root>\n  )\n}\n\ninterface TreeNodeProps extends TreeView.NodeProviderProps<Node> {\n  onRemove?: (props: TreeView.NodeProviderProps<Node>) => void\n  onAdd?: (props: TreeView.NodeProviderProps<Node>) => void\n}\n\nconst TreeNodeActions = (props: TreeNodeProps) => {\n  const { onRemove, onAdd, node } = props\n  const tree = useTreeViewContext()\n  const isBranch = tree.collection.isBranchNode(node)\n  return (\n    <HStack\n      gap=\"0.5\"\n      position=\"absolute\"\n      right=\"0\"\n      top=\"0\"\n      scale=\"0.8\"\n      css={{\n        opacity: 0,\n        \"[role=treeitem]:hover &\": { opacity: 1 },\n      }}\n    >\n      <IconButton\n        size=\"xs\"\n        variant=\"ghost\"\n        aria-label=\"Remove node\"\n        onClick={(e) => {\n          e.stopPropagation()\n          onRemove?.(props)\n        }}\n      >\n        <LuTrash />\n      </IconButton>\n      {isBranch && (\n        <IconButton\n          size=\"xs\"\n          variant=\"ghost\"\n          aria-label=\"Add node\"\n          onClick={(e) => {\n            e.stopPropagation()\n            onAdd?.(props)\n            tree.expand([node.id])\n          }}\n        >\n          <LuPlus />\n        </IconButton>\n      )}\n    </HStack>\n  )\n}\n\ninterface Node {\n  id: string\n  name: string\n  children?: Node[]\n  childrenCount?: number\n}\n\nconst initialCollection = createTreeCollection<Node>({\n  nodeToValue: (node) => node.id,\n  nodeToString: (node) => node.name,\n  rootNode: {\n    id: \"ROOT\",\n    name: \"\",\n    children: [\n      {\n        id: \"node_modules\",\n        name: \"node_modules\",\n        children: [\n          { id: \"node_modules/zag-js\", name: \"zag-js\" },\n          { id: \"node_modules/pandacss\", name: \"panda\" },\n          {\n            id: \"node_modules/@types\",\n            name: \"@types\",\n            children: [\n              { id: \"node_modules/@types/react\", name: \"react\" },\n              { id: \"node_modules/@types/react-dom\", name: \"react-dom\" },\n            ],\n          },\n        ],\n      },\n      {\n        id: \"src\",\n        name: \"src\",\n        children: [\n          { id: \"src/app.tsx\", name: \"app.tsx\" },\n          { id: \"src/index.ts\", name: \"index.ts\" },\n        ],\n      },\n      { id: \"panda.config\", name: \"panda.config.ts\" },\n      { id: \"package.json\", name: \"package.json\" },\n      { id: \"renovate.json\", name: \"renovate.json\" },\n      { id: \"readme.md\", name: \"README.md\" },\n    ],\n  },\n})\n",
      "hasSnippet": false,
      "importPaths": [
        "import {\n  HStack,\n  IconButton,\n  TreeView,\n  createTreeCollection,\n  useTreeViewContext,\n} from \"@chakra-ui/react\"",
        "import { useState } from \"react\"",
        "import { LuFile, LuFolder, LuPlus, LuTrash } from \"react-icons/lu\""
      ],
      "importPath": "import { TreeView } from \"@chakra-ui/react\"",
      "npmDependencies": [
        "react-icons"
      ]
    },
    {
      "name": "tree-view-remove-indentation",
      "content": "\"use client\"\nexport const TreeViewRemoveIndentation = () => {\n  return (\n    <TreeView.Root collection={collection} maxW=\"sm\">\n      <TreeView.Label>Tree</TreeView.Label>\n      <TreeView.Tree css={{ \"--tree-indentation\": \"0px\" }}>\n        <TreeView.Node\n          render={({ node, nodeState }) =>\n            nodeState.isBranch ? (\n              <TreeView.BranchControl>\n                <LuFolder />\n                <TreeView.BranchText>{node.name}</TreeView.BranchText>\n              </TreeView.BranchControl>\n            ) : (\n              <TreeView.Item>\n                <LuFile />\n                <TreeView.ItemText>{node.name}</TreeView.ItemText>\n              </TreeView.Item>\n            )\n          }\n        />\n      </TreeView.Tree>\n    </TreeView.Root>\n  )\n}\n\ninterface Node {\n  id: string\n  name: string\n  children?: Node[]\n}\n\nconst collection = createTreeCollection<Node>({\n  nodeToValue: (node) => node.id,\n  nodeToString: (node) => node.name,\n  rootNode: {\n    id: \"ROOT\",\n    name: \"\",\n    children: [\n      {\n        id: \"node_modules\",\n        name: \"node_modules\",\n        children: [\n          { id: \"node_modules/zag-js\", name: \"zag-js\" },\n          { id: \"node_modules/pandacss\", name: \"panda\" },\n          {\n            id: \"node_modules/@types\",\n            name: \"@types\",\n            children: [\n              { id: \"node_modules/@types/react\", name: \"react\" },\n              { id: \"node_modules/@types/react-dom\", name: \"react-dom\" },\n            ],\n          },\n        ],\n      },\n      {\n        id: \"src\",\n        name: \"src\",\n        children: [\n          { id: \"src/app.tsx\", name: \"app.tsx\" },\n          { id: \"src/index.ts\", name: \"index.ts\" },\n        ],\n      },\n      { id: \"panda.config\", name: \"panda.config.ts\" },\n      { id: \"package.json\", name: \"package.json\" },\n      { id: \"renovate.json\", name: \"renovate.json\" },\n      { id: \"readme.md\", name: \"README.md\" },\n    ],\n  },\n})\n",
      "hasSnippet": false,
      "importPaths": [
        "import { TreeView, createTreeCollection } from \"@chakra-ui/react\"",
        "import { LuFile, LuFolder } from \"react-icons/lu\""
      ],
      "importPath": "import { TreeView } from \"@chakra-ui/react\"",
      "npmDependencies": [
        "react-icons"
      ]
    },
    {
      "name": "tree-view-with-colors",
      "content": "\"use client\"\nexport const TreeViewWithColors = () => {\n  return (\n    <Wrap gap=\"8\">\n      <For each={colorPalettes}>\n        {(colorPalette) => (\n          <TreeView.Root\n            key={colorPalette}\n            collection={collection}\n            maxW=\"xs\"\n            size=\"sm\"\n            colorPalette={colorPalette}\n            defaultSelectedValue={[\"node_modules\"]}\n          >\n            <TreeView.Label>Tree (colorPalette={colorPalette})</TreeView.Label>\n            <TreeView.Tree>\n              <TreeView.Node\n                render={({ node, nodeState }) =>\n                  nodeState.isBranch ? (\n                    <TreeView.BranchControl>\n                      <LuFolder />\n                      <TreeView.BranchText>{node.name}</TreeView.BranchText>\n                    </TreeView.BranchControl>\n                  ) : (\n                    <TreeView.Item>\n                      <LuFile />\n                      <TreeView.ItemText>{node.name}</TreeView.ItemText>\n                    </TreeView.Item>\n                  )\n                }\n              />\n            </TreeView.Tree>\n          </TreeView.Root>\n        )}\n      </For>\n    </Wrap>\n  )\n}\n\ninterface Node {\n  id: string\n  name: string\n  children?: Node[]\n}\n\nconst collection = createTreeCollection<Node>({\n  nodeToValue: (node) => node.id,\n  nodeToString: (node) => node.name,\n  rootNode: {\n    id: \"ROOT\",\n    name: \"\",\n    children: [\n      {\n        id: \"node_modules\",\n        name: \"node_modules\",\n        children: [\n          { id: \"node_modules/zag-js\", name: \"zag-js\" },\n          { id: \"node_modules/pandacss\", name: \"panda\" },\n          {\n            id: \"node_modules/@types\",\n            name: \"@types\",\n            children: [\n              { id: \"node_modules/@types/react\", name: \"react\" },\n              { id: \"node_modules/@types/react-dom\", name: \"react-dom\" },\n            ],\n          },\n        ],\n      },\n      {\n        id: \"src\",\n        name: \"src\",\n        children: [\n          { id: \"src/app.tsx\", name: \"app.tsx\" },\n          { id: \"src/index.ts\", name: \"index.ts\" },\n        ],\n      },\n      { id: \"panda.config\", name: \"panda.config.ts\" },\n      { id: \"package.json\", name: \"package.json\" },\n      { id: \"renovate.json\", name: \"renovate.json\" },\n      { id: \"readme.md\", name: \"README.md\" },\n    ],\n  },\n})\n",
      "hasSnippet": false,
      "importPaths": [
        "import { For, TreeView, Wrap, createTreeCollection } from \"@chakra-ui/react\"",
        "import { colorPalettes } from \"compositions/lib/color-palettes\"",
        "import { LuFile, LuFolder } from \"react-icons/lu\""
      ],
      "importPath": "import { TreeView } from \"@chakra-ui/react\"",
      "npmDependencies": [
        "react-icons"
      ]
    },
    {
      "name": "tree-view-with-filter",
      "content": "\"use client\"\nexport const TreeViewWithFilter = () => {\n  const [collection, setCollection] = useState(initialCollection)\n  const [expanded, setExpanded] = useState<string[]>([])\n  const [query, setQuery] = useState(\"\")\n\n  const { contains } = useFilter({ sensitivity: \"base\" })\n\n  const search = (search: string) => {\n    setQuery(search)\n    const nextCollection = initialCollection.filter((node) =>\n      contains(node.name, search),\n    )\n\n    // update collection\n    setCollection(nextCollection)\n\n    // expand all branches\n    setExpanded(nextCollection.getBranchValues())\n  }\n\n  return (\n    <Stack gap=\"3\">\n      <Input\n        size=\"sm\"\n        placeholder=\"Search for files: 'react'\"\n        onChange={(e) => search(e.target.value)}\n      />\n\n      <TreeView.Root\n        collection={collection}\n        expandedValue={expanded}\n        onExpandedChange={(details) => setExpanded(details.expandedValue)}\n      >\n        <TreeView.Label srOnly>Tree</TreeView.Label>\n        <TreeView.Tree>\n          <TreeView.Node\n            indentGuide={<TreeView.BranchIndentGuide />}\n            render={({ node, nodeState }) =>\n              nodeState.isBranch ? (\n                <TreeView.BranchControl>\n                  <LuFolder />\n                  <TreeView.BranchText>\n                    <Highlight\n                      query={[query]}\n                      styles={{ bg: \"gray.emphasized\" }}\n                    >\n                      {node.name}\n                    </Highlight>\n                  </TreeView.BranchText>\n                </TreeView.BranchControl>\n              ) : (\n                <TreeView.Item>\n                  <LuFile />\n                  <TreeView.ItemText>\n                    <Highlight\n                      query={[query]}\n                      styles={{ bg: \"gray.emphasized\" }}\n                    >\n                      {node.name}\n                    </Highlight>\n                  </TreeView.ItemText>\n                </TreeView.Item>\n              )\n            }\n          />\n        </TreeView.Tree>\n      </TreeView.Root>\n    </Stack>\n  )\n}\n\ninterface Node {\n  id: string\n  name: string\n  children?: Node[]\n}\n\nconst initialCollection = createTreeCollection<Node>({\n  nodeToValue: (node) => node.id,\n  nodeToString: (node) => node.name,\n  rootNode: {\n    id: \"ROOT\",\n    name: \"\",\n    children: [\n      {\n        id: \"node_modules\",\n        name: \"node_modules\",\n        children: [\n          { id: \"node_modules/zag-js\", name: \"zag-js\" },\n          { id: \"node_modules/pandacss\", name: \"panda\" },\n          {\n            id: \"node_modules/@types\",\n            name: \"@types\",\n            children: [\n              { id: \"node_modules/@types/react\", name: \"react\" },\n              { id: \"node_modules/@types/react-dom\", name: \"react-dom\" },\n            ],\n          },\n        ],\n      },\n      {\n        id: \"src\",\n        name: \"src\",\n        children: [\n          { id: \"src/app.tsx\", name: \"app.tsx\" },\n          { id: \"src/index.ts\", name: \"index.ts\" },\n        ],\n      },\n      { id: \"panda.config\", name: \"panda.config.ts\" },\n      { id: \"package.json\", name: \"package.json\" },\n      { id: \"renovate.json\", name: \"renovate.json\" },\n      { id: \"readme.md\", name: \"README.md\" },\n    ],\n  },\n})\n",
      "hasSnippet": false,
      "importPaths": [
        "import {\n  Highlight,\n  Input,\n  Stack,\n  TreeView,\n  createTreeCollection,\n  useFilter,\n} from \"@chakra-ui/react\"",
        "import { useState } from \"react\"",
        "import { LuFile, LuFolder } from \"react-icons/lu\""
      ],
      "importPath": "import { TreeView } from \"@chakra-ui/react\"",
      "npmDependencies": [
        "react-icons"
      ]
    },
    {
      "name": "tree-view-with-links",
      "content": "\"use client\"\nexport const TreeViewWithLinks = () => {\n  return (\n    <TreeView.Root collection={collection} maxW=\"2xs\">\n      <TreeView.Tree>\n        <TreeView.Node\n          render={({ node, nodeState }) =>\n            nodeState.isBranch ? (\n              <TreeView.BranchControl>\n                <TreeView.BranchText>{node.name}</TreeView.BranchText>\n                <TreeView.BranchIndicator>\n                  <LuChevronRight />\n                </TreeView.BranchIndicator>\n              </TreeView.BranchControl>\n            ) : (\n              <TreeView.Item asChild>\n                <a href={node.href}>\n                  <LuFile />\n                  <TreeView.ItemText>{node.name}</TreeView.ItemText>\n                  {node.href?.startsWith(\"http\") && (\n                    <LuExternalLink size={12} />\n                  )}\n                </a>\n              </TreeView.Item>\n            )\n          }\n        />\n      </TreeView.Tree>\n    </TreeView.Root>\n  )\n}\n\ninterface Node {\n  id: string\n  name: string\n  href?: string\n  children?: Node[]\n}\n\nconst collection = createTreeCollection<Node>({\n  nodeToValue: (node) => node.id,\n  nodeToString: (node) => node.name,\n  rootNode: {\n    id: \"ROOT\",\n    name: \"\",\n    children: [\n      {\n        id: \"docs\",\n        name: \"Documentation\",\n        children: [\n          {\n            id: \"docs/getting-started\",\n            name: \"Getting Started\",\n            href: \"/docs/getting-started\",\n          },\n          {\n            id: \"docs/installation\",\n            name: \"Installation\",\n            href: \"/docs/installation\",\n          },\n          {\n            id: \"docs/components\",\n            name: \"Components\",\n            children: [\n              {\n                id: \"docs/components/accordion\",\n                name: \"Accordion\",\n                href: \"/docs/components/accordion\",\n              },\n              {\n                id: \"docs/components/dialog\",\n                name: \"Dialog\",\n                href: \"/docs/components/dialog\",\n              },\n              {\n                id: \"docs/components/menu\",\n                name: \"Menu\",\n                href: \"/docs/components/menu\",\n              },\n            ],\n          },\n        ],\n      },\n      {\n        id: \"examples\",\n        name: \"Examples\",\n        children: [\n          {\n            id: \"examples/react\",\n            name: \"React Examples\",\n            href: \"/examples/react\",\n          },\n          { id: \"examples/vue\", name: \"Vue Examples\", href: \"/examples/vue\" },\n          {\n            id: \"examples/solid\",\n            name: \"Solid Examples\",\n            href: \"/examples/solid\",\n          },\n        ],\n      },\n      {\n        id: \"external\",\n        name: \"External Links\",\n        children: [\n          {\n            id: \"external/github\",\n            name: \"GitHub Repository\",\n            href: \"https://github.com/chakra-ui/zag\",\n          },\n          {\n            id: \"external/npm\",\n            name: \"NPM Package\",\n            href: \"https://www.npmjs.com/package/@zag-js/core\",\n          },\n          {\n            id: \"external/docs\",\n            name: \"Official Docs\",\n            href: \"https://zagjs.com\",\n          },\n        ],\n      },\n      { id: \"readme.md\", name: \"README.md\", href: \"/readme\" },\n      { id: \"license\", name: \"LICENSE\", href: \"/license\" },\n    ],\n  },\n})\n",
      "hasSnippet": false,
      "importPaths": [
        "import { TreeView, createTreeCollection } from \"@chakra-ui/react\"",
        "import { LuChevronRight, LuExternalLink, LuFile } from \"react-icons/lu\""
      ],
      "importPath": "import { TreeView } from \"@chakra-ui/react\"",
      "npmDependencies": [
        "react-icons"
      ]
    },
    {
      "name": "tree-view-with-sizes",
      "content": "\"use client\"\nexport const TreeViewWithSizes = () => {\n  return (\n    <Stack gap=\"8\">\n      <For each={[\"xs\", \"sm\", \"md\"]}>\n        {(size) => (\n          <TreeView.Root\n            collection={collection}\n            maxW=\"sm\"\n            size={size}\n            key={size}\n          >\n            <TreeView.Label>Tree (size={size})</TreeView.Label>\n            <TreeView.Tree>\n              <TreeView.Node\n                indentGuide={<TreeView.BranchIndentGuide />}\n                render={({ node, nodeState }) =>\n                  nodeState.isBranch ? (\n                    <TreeView.BranchControl>\n                      <LuFolder />\n                      <TreeView.BranchText>{node.name}</TreeView.BranchText>\n                    </TreeView.BranchControl>\n                  ) : (\n                    <TreeView.Item>\n                      <LuFile />\n                      <TreeView.ItemText>{node.name}</TreeView.ItemText>\n                    </TreeView.Item>\n                  )\n                }\n              />\n            </TreeView.Tree>\n          </TreeView.Root>\n        )}\n      </For>\n    </Stack>\n  )\n}\n\ninterface Node {\n  id: string\n  name: string\n  children?: Node[]\n}\n\nconst collection = createTreeCollection<Node>({\n  nodeToValue: (node) => node.id,\n  nodeToString: (node) => node.name,\n  rootNode: {\n    id: \"ROOT\",\n    name: \"\",\n    children: [\n      {\n        id: \"node_modules\",\n        name: \"node_modules\",\n        children: [\n          { id: \"node_modules/zag-js\", name: \"zag-js\" },\n          { id: \"node_modules/pandacss\", name: \"panda\" },\n          {\n            id: \"node_modules/@types\",\n            name: \"@types\",\n            children: [\n              { id: \"node_modules/@types/react\", name: \"react\" },\n              { id: \"node_modules/@types/react-dom\", name: \"react-dom\" },\n            ],\n          },\n        ],\n      },\n      {\n        id: \"src\",\n        name: \"src\",\n        children: [\n          { id: \"src/app.tsx\", name: \"app.tsx\" },\n          { id: \"src/index.ts\", name: \"index.ts\" },\n        ],\n      },\n      { id: \"panda.config\", name: \"panda.config.ts\" },\n      { id: \"package.json\", name: \"package.json\" },\n      { id: \"renovate.json\", name: \"renovate.json\" },\n      { id: \"readme.md\", name: \"README.md\" },\n    ],\n  },\n})\n",
      "hasSnippet": false,
      "importPaths": [
        "import { For, Stack, TreeView, createTreeCollection } from \"@chakra-ui/react\"",
        "import { LuFile, LuFolder } from \"react-icons/lu\""
      ],
      "importPath": "import { TreeView } from \"@chakra-ui/react\"",
      "npmDependencies": [
        "react-icons"
      ]
    },
    {
      "name": "tree-view-with-store",
      "content": "\"use client\"\nexport const TreeViewWithStore = () => {\n  const store = useTreeView({\n    collection,\n    defaultExpandedValue: [],\n  })\n\n  return (\n    <TreeView.RootProvider value={store}>\n      <TreeView.Label>Tree</TreeView.Label>\n      <pre>{JSON.stringify(store.expandedValue)}</pre>\n      <TreeView.Tree>\n        <TreeView.Node<Node>\n          indentGuide={<TreeView.BranchIndentGuide />}\n          render={({ node }) =>\n            node.children ? (\n              <TreeView.BranchControl>\n                <LuFolder />\n                <TreeView.BranchText>{node.name}</TreeView.BranchText>\n              </TreeView.BranchControl>\n            ) : (\n              <TreeView.Item>\n                <LuFile />\n                <TreeView.ItemText>{node.name}</TreeView.ItemText>\n              </TreeView.Item>\n            )\n          }\n        />\n      </TreeView.Tree>\n    </TreeView.RootProvider>\n  )\n}\n\ninterface Node {\n  id: string\n  name: string\n  children?: Node[]\n}\n\nconst collection = createTreeCollection<Node>({\n  nodeToValue: (node) => node.id,\n  nodeToString: (node) => node.name,\n  rootNode: {\n    id: \"ROOT\",\n    name: \"\",\n    children: [\n      {\n        id: \"node_modules\",\n        name: \"node_modules\",\n        children: [\n          { id: \"node_modules/zag-js\", name: \"zag-js\" },\n          { id: \"node_modules/pandacss\", name: \"panda\" },\n          {\n            id: \"node_modules/@types\",\n            name: \"@types\",\n            children: [\n              { id: \"node_modules/@types/react\", name: \"react\" },\n              { id: \"node_modules/@types/react-dom\", name: \"react-dom\" },\n            ],\n          },\n        ],\n      },\n      {\n        id: \"src\",\n        name: \"src\",\n        children: [\n          { id: \"src/app.tsx\", name: \"app.tsx\" },\n          { id: \"src/index.ts\", name: \"index.ts\" },\n        ],\n      },\n      { id: \"panda.config\", name: \"panda.config.ts\" },\n      { id: \"package.json\", name: \"package.json\" },\n      { id: \"renovate.json\", name: \"renovate.json\" },\n      { id: \"readme.md\", name: \"README.md\" },\n    ],\n  },\n})\n",
      "hasSnippet": false,
      "importPaths": [
        "import { TreeView, createTreeCollection, useTreeView } from \"@chakra-ui/react\"",
        "import { LuFile, LuFolder } from \"react-icons/lu\""
      ],
      "importPath": "import { TreeView } from \"@chakra-ui/react\"",
      "npmDependencies": [
        "react-icons"
      ]
    },
    {
      "name": "tree-view-with-variants",
      "content": "\"use client\"\nexport const TreeViewWithVariants = () => {\n  return (\n    <Stack gap=\"8\">\n      <For each={[\"subtle\", \"solid\"]}>\n        {(variant) => (\n          <TreeView.Root\n            key={variant}\n            collection={collection}\n            maxW=\"sm\"\n            size=\"sm\"\n            variant={variant}\n            colorPalette=\"teal\"\n            defaultSelectedValue={[\"node_modules\"]}\n          >\n            <TreeView.Label>Tree (variant={variant})</TreeView.Label>\n            <TreeView.Tree>\n              <TreeView.Node\n                render={({ node, nodeState }) =>\n                  nodeState.isBranch ? (\n                    <TreeView.BranchControl>\n                      <LuFolder />\n                      <TreeView.BranchText>{node.name}</TreeView.BranchText>\n                    </TreeView.BranchControl>\n                  ) : (\n                    <TreeView.Item>\n                      <LuFile />\n                      <TreeView.ItemText>{node.name}</TreeView.ItemText>\n                    </TreeView.Item>\n                  )\n                }\n              />\n            </TreeView.Tree>\n          </TreeView.Root>\n        )}\n      </For>\n    </Stack>\n  )\n}\n\ninterface Node {\n  id: string\n  name: string\n  children?: Node[]\n}\n\nconst collection = createTreeCollection<Node>({\n  nodeToValue: (node) => node.id,\n  nodeToString: (node) => node.name,\n  rootNode: {\n    id: \"ROOT\",\n    name: \"\",\n    children: [\n      {\n        id: \"node_modules\",\n        name: \"node_modules\",\n        children: [\n          { id: \"node_modules/zag-js\", name: \"zag-js\" },\n          { id: \"node_modules/pandacss\", name: \"panda\" },\n          {\n            id: \"node_modules/@types\",\n            name: \"@types\",\n            children: [\n              { id: \"node_modules/@types/react\", name: \"react\" },\n              { id: \"node_modules/@types/react-dom\", name: \"react-dom\" },\n            ],\n          },\n        ],\n      },\n      {\n        id: \"src\",\n        name: \"src\",\n        children: [\n          { id: \"src/app.tsx\", name: \"app.tsx\" },\n          { id: \"src/index.ts\", name: \"index.ts\" },\n        ],\n      },\n      { id: \"panda.config\", name: \"panda.config.ts\" },\n      { id: \"package.json\", name: \"package.json\" },\n      { id: \"renovate.json\", name: \"renovate.json\" },\n      { id: \"readme.md\", name: \"README.md\" },\n    ],\n  },\n})\n",
      "hasSnippet": false,
      "importPaths": [
        "import { For, Stack, TreeView, createTreeCollection } from \"@chakra-ui/react\"",
        "import { LuFile, LuFolder } from \"react-icons/lu\""
      ],
      "importPath": "import { TreeView } from \"@chakra-ui/react\"",
      "npmDependencies": [
        "react-icons"
      ]
    }
  ]
}