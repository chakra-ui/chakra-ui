{
  "name": "pin-input",
  "file": "compositions/ui/pin-input",
  "snippet": "import { PinInput as ChakraPinInput, Group } from \"@chakra-ui/react\"\nimport * as React from \"react\"\n\nexport interface PinInputProps extends ChakraPinInput.RootProps {\n  rootRef?: React.RefObject<HTMLDivElement | null>\n  count?: number\n  inputProps?: React.InputHTMLAttributes<HTMLInputElement>\n  attached?: boolean\n}\n\nexport const PinInput = React.forwardRef<HTMLInputElement, PinInputProps>(\n  function PinInput(props, ref) {\n    const { count = 4, inputProps, rootRef, attached, ...rest } = props\n    return (\n      <ChakraPinInput.Root ref={rootRef} {...rest}>\n        <ChakraPinInput.HiddenInput ref={ref} {...inputProps} />\n        <ChakraPinInput.Control>\n          <Group attached={attached}>\n            {Array.from({ length: count }).map((_, index) => (\n              <ChakraPinInput.Input key={index} index={index} />\n            ))}\n          </Group>\n        </ChakraPinInput.Control>\n      </ChakraPinInput.Root>\n    )\n  },\n)\n",
  "examples": [
    {
      "name": "pin-input-alphanumeric",
      "content": "export const PinInputAlphanumeric = () => {\n  return (\n    <PinInput.Root type=\"alphanumeric\">\n      <PinInput.HiddenInput />\n      <PinInput.Control>\n        <PinInput.Input index={0} />\n        <PinInput.Input index={1} />\n        <PinInput.Input index={2} />\n        <PinInput.Input index={3} />\n      </PinInput.Control>\n    </PinInput.Root>\n  )\n}\n",
      "hasSnippet": false,
      "importPaths": [
        "import { PinInput } from \"@chakra-ui/react\""
      ],
      "importPath": "import { PinInput } from \"@chakra-ui/react\""
    },
    {
      "name": "pin-input-attached",
      "content": "export const PinInputAttached = () => {\n  return (\n    <PinInput.Root attached>\n      <PinInput.HiddenInput />\n      <PinInput.Control>\n        <PinInput.Input index={0} />\n        <PinInput.Input index={1} />\n        <PinInput.Input index={2} />\n        <PinInput.Input index={3} />\n      </PinInput.Control>\n    </PinInput.Root>\n  )\n}\n",
      "hasSnippet": false,
      "importPaths": [
        "import { PinInput } from \"@chakra-ui/react\""
      ],
      "importPath": "import { PinInput } from \"@chakra-ui/react\""
    },
    {
      "name": "pin-input-basic",
      "content": "export const PinInputBasic = () => {\n  return (\n    <PinInput.Root>\n      <PinInput.HiddenInput />\n      <PinInput.Control>\n        <PinInput.Input index={0} />\n        <PinInput.Input index={1} />\n        <PinInput.Input index={2} />\n        <PinInput.Input index={3} />\n      </PinInput.Control>\n    </PinInput.Root>\n  )\n}\n",
      "hasSnippet": false,
      "importPaths": [
        "import { PinInput } from \"@chakra-ui/react\""
      ],
      "importPath": "import { PinInput } from \"@chakra-ui/react\""
    },
    {
      "name": "pin-input-closed-component",
      "content": "export interface PinInputProps extends ChakraPinInput.RootProps {\n  rootRef?: React.RefObject<HTMLDivElement | null>\n  count?: number\n  inputProps?: React.InputHTMLAttributes<HTMLInputElement>\n  attached?: boolean\n}\n\nexport const PinInput = React.forwardRef<HTMLInputElement, PinInputProps>(\n  function PinInput(props, ref) {\n    const { count = 4, inputProps, rootRef, attached, ...rest } = props\n    return (\n      <ChakraPinInput.Root ref={rootRef} {...rest}>\n        <ChakraPinInput.HiddenInput ref={ref} {...inputProps} />\n        <ChakraPinInput.Control>\n          <Group attached={attached}>\n            {Array.from({ length: count }).map((_, index) => (\n              <ChakraPinInput.Input key={index} index={index} />\n            ))}\n          </Group>\n        </ChakraPinInput.Control>\n      </ChakraPinInput.Root>\n    )\n  },\n)\n",
      "hasSnippet": false,
      "importPaths": [
        "import { PinInput as ChakraPinInput, Group } from \"@chakra-ui/react\"",
        "import * as React from \"react\""
      ],
      "importPath": "import { PinInput } from \"@chakra-ui/react\""
    },
    {
      "name": "pin-input-controlled",
      "content": "\"use client\"\nexport const PinInputControlled = () => {\n  const [value, setValue] = useState([\"\", \"\", \"\", \"\"])\n  return (\n    <PinInput.Root value={value} onValueChange={(e) => setValue(e.value)}>\n      <PinInput.HiddenInput />\n      <PinInput.Control>\n        <PinInput.Input index={0} />\n        <PinInput.Input index={1} />\n        <PinInput.Input index={2} />\n        <PinInput.Input index={3} />\n      </PinInput.Control>\n    </PinInput.Root>\n  )\n}\n",
      "hasSnippet": false,
      "importPaths": [
        "import { PinInput } from \"@chakra-ui/react\"",
        "import { useState } from \"react\""
      ],
      "importPath": "import { PinInput } from \"@chakra-ui/react\""
    },
    {
      "name": "pin-input-count",
      "content": "export const PinInputCount = () => {\n  return (\n    <PinInput.Root>\n      <PinInput.HiddenInput />\n      <PinInput.Control>\n        <PinInput.Input index={0} />\n        <PinInput.Input index={1} />\n        <PinInput.Input index={2} />\n        <PinInput.Input index={3} />\n        <PinInput.Input index={4} />\n        <PinInput.Input index={5} />\n      </PinInput.Control>\n    </PinInput.Root>\n  )\n}\n",
      "hasSnippet": false,
      "importPaths": [
        "import { PinInput } from \"@chakra-ui/react\""
      ],
      "importPath": "import { PinInput } from \"@chakra-ui/react\""
    },
    {
      "name": "pin-input-with-field",
      "content": "export const PinInputWithField = () => {\n  return (\n    <Field.Root>\n      <Field.Label>Enter otp</Field.Label>\n      <PinInput.Root>\n        <PinInput.HiddenInput />\n        <PinInput.Control>\n          <PinInput.Input index={0} />\n          <PinInput.Input index={1} />\n          <PinInput.Input index={2} />\n          <PinInput.Input index={3} />\n        </PinInput.Control>\n      </PinInput.Root>\n    </Field.Root>\n  )\n}\n",
      "hasSnippet": false,
      "importPaths": [
        "import { Field, PinInput } from \"@chakra-ui/react\""
      ],
      "importPath": "import { PinInput } from \"@chakra-ui/react\""
    },
    {
      "name": "pin-input-with-hook-form",
      "content": "\"use client\"\nconst formSchema = z.object({\n  pin: z\n    .array(z.string().min(1), { required_error: \"Pin is required\" })\n    .length(4, { message: \"Pin must be 4 digits long\" }),\n})\n\ntype FormValues = z.infer<typeof formSchema>\n\nexport const PinInputWithHookForm = () => {\n  const { handleSubmit, control, formState } = useForm<FormValues>({\n    resolver: zodResolver(formSchema),\n  })\n\n  const onSubmit = handleSubmit((data) => console.log(data))\n\n  return (\n    <form onSubmit={onSubmit}>\n      <Stack gap=\"4\" align=\"flex-start\" maxW=\"sm\">\n        <Field.Root invalid={!!formState.errors.pin}>\n          <Controller\n            control={control}\n            name=\"pin\"\n            render={({ field }) => (\n              <PinInput.Root\n                value={field.value}\n                onValueChange={(e) => field.onChange(e.value)}\n              >\n                <PinInput.HiddenInput />\n                <PinInput.Control>\n                  <PinInput.Input index={0} />\n                  <PinInput.Input index={1} />\n                  <PinInput.Input index={2} />\n                  <PinInput.Input index={3} />\n                </PinInput.Control>\n              </PinInput.Root>\n            )}\n          />\n          <Field.ErrorText>{formState.errors.pin?.message}</Field.ErrorText>\n        </Field.Root>\n        <Button type=\"submit\">Submit</Button>\n      </Stack>\n    </form>\n  )\n}\n",
      "hasSnippet": false,
      "importPaths": [
        "import { Button, Field, PinInput, Stack } from \"@chakra-ui/react\"",
        "import { zodResolver } from \"@hookform/resolvers/zod\"",
        "import { Controller, useForm } from \"react-hook-form\"",
        "import { z } from \"zod\""
      ],
      "importPath": "import { PinInput } from \"@chakra-ui/react\"",
      "npmDependencies": [
        "@hookform/resolvers",
        "react-hook-form",
        "zod"
      ]
    },
    {
      "name": "pin-input-with-mask",
      "content": "export const PinInputWithMask = () => {\n  return (\n    <PinInput.Root mask>\n      <PinInput.HiddenInput />\n      <PinInput.Control>\n        <PinInput.Input index={0} />\n        <PinInput.Input index={1} />\n        <PinInput.Input index={2} />\n        <PinInput.Input index={3} />\n      </PinInput.Control>\n    </PinInput.Root>\n  )\n}\n",
      "hasSnippet": false,
      "importPaths": [
        "import { PinInput } from \"@chakra-ui/react\""
      ],
      "importPath": "import { PinInput } from \"@chakra-ui/react\""
    },
    {
      "name": "pin-input-with-otp",
      "content": "export const PinInputWithOtp = () => {\n  return (\n    <PinInput.Root otp>\n      <PinInput.HiddenInput />\n      <PinInput.Control>\n        <PinInput.Input index={0} />\n        <PinInput.Input index={1} />\n        <PinInput.Input index={2} />\n        <PinInput.Input index={3} />\n      </PinInput.Control>\n    </PinInput.Root>\n  )\n}\n",
      "hasSnippet": false,
      "importPaths": [
        "import { PinInput } from \"@chakra-ui/react\""
      ],
      "importPath": "import { PinInput } from \"@chakra-ui/react\""
    },
    {
      "name": "pin-input-with-placeholder",
      "content": "export const PinInputWithPlaceholder = () => {\n  return (\n    <PinInput.Root placeholder=\"ðŸ¥³\">\n      <PinInput.HiddenInput />\n      <PinInput.Control>\n        <PinInput.Input index={0} />\n        <PinInput.Input index={1} />\n        <PinInput.Input index={2} />\n        <PinInput.Input index={3} />\n      </PinInput.Control>\n    </PinInput.Root>\n  )\n}\n",
      "hasSnippet": false,
      "importPaths": [
        "import { PinInput } from \"@chakra-ui/react\""
      ],
      "importPath": "import { PinInput } from \"@chakra-ui/react\""
    },
    {
      "name": "pin-input-with-sizes",
      "content": "export const PinInputWithSizes = () => {\n  return (\n    <Stack gap=\"4\">\n      <For each={[\"sm\", \"md\", \"lg\"]}>\n        {(size) => (\n          <PinInput.Root key={size} size={size}>\n            <PinInput.HiddenInput />\n            <PinInput.Control>\n              <PinInput.Input index={0} />\n              <PinInput.Input index={1} />\n              <PinInput.Input index={2} />\n              <PinInput.Input index={3} />\n            </PinInput.Control>\n          </PinInput.Root>\n        )}\n      </For>\n    </Stack>\n  )\n}\n",
      "hasSnippet": false,
      "importPaths": [
        "import { For, PinInput, Stack } from \"@chakra-ui/react\""
      ],
      "importPath": "import { PinInput } from \"@chakra-ui/react\""
    },
    {
      "name": "pin-input-with-store",
      "content": "\"use client\"\nexport const PinInputWithStore = () => {\n  const store = usePinInput()\n  return (\n    <Stack align=\"flex-start\">\n      <PinInput.RootProvider value={store}>\n        <PinInput.Control>\n          <PinInput.Input index={0} />\n          <PinInput.Input index={1} />\n          <PinInput.Input index={2} />\n          <PinInput.Input index={3} />\n        </PinInput.Control>\n      </PinInput.RootProvider>\n\n      <ButtonGroup variant=\"outline\" size=\"sm\">\n        <Button onClick={() => store.setValue([\"1\", \"2\", \"3\", \"4\"])}>\n          Set value\n        </Button>\n        <Button onClick={() => store.clearValue()}>Clear value</Button>\n      </ButtonGroup>\n    </Stack>\n  )\n}\n",
      "hasSnippet": false,
      "importPaths": [
        "import {\n  Button,\n  ButtonGroup,\n  PinInput,\n  Stack,\n  usePinInput,\n} from \"@chakra-ui/react\""
      ],
      "importPath": "import { PinInput } from \"@chakra-ui/react\""
    }
  ]
}