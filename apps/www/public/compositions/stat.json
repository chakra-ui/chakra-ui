{
  "type": "composition",
  "npmDependencies": [
    "react-icons"
  ],
  "fileDependencies": [
    "compositions/ui/toggle-tip"
  ],
  "id": "stat",
  "file": {
    "name": "stat.tsx",
    "content": "import {\n  Badge,\n  type BadgeProps,\n  Stat as ChakraStat,\n  FormatNumber,\n  IconButton,\n} from \"@chakra-ui/react\"\nimport { ToggleTip } from \"./toggle-tip\"\nimport { HiOutlineInformationCircle } from \"react-icons/hi\"\n\ninterface StatLabelProps extends ChakraStat.LabelProps {\n  info?: React.ReactNode\n}\n\nexport const StatLabel = (props: StatLabelProps) => {\n  const { info, children, ...rest } = props\n  return (\n    <ChakraStat.Label {...rest}>\n      {children}\n      {info && (\n        <ToggleTip content={info}>\n          <IconButton variant=\"ghost\" aria-label=\"info\" size=\"xs\">\n            <HiOutlineInformationCircle />\n          </IconButton>\n        </ToggleTip>\n      )}\n    </ChakraStat.Label>\n  )\n}\n\ninterface StatValueTextProps extends ChakraStat.ValueTextProps {\n  value?: number\n  formatOptions?: Intl.NumberFormatOptions\n}\n\nexport const StatValueText = (props: StatValueTextProps) => {\n  const { value, formatOptions, children, ...rest } = props\n  return (\n    <ChakraStat.ValueText {...rest}>\n      {children ||\n        (value != null && (\n          <FormatNumber value={value} {...props.formatOptions} />\n        ))}\n    </ChakraStat.ValueText>\n  )\n}\n\nexport const StatUpTrend = (props: BadgeProps) => {\n  return (\n    <Badge colorPalette=\"green\" gap=\"0\" {...props}>\n      <ChakraStat.UpIndicator />\n      {props.children}\n    </Badge>\n  )\n}\n\nexport const StatDownTrend = (props: BadgeProps) => {\n  return (\n    <Badge colorPalette=\"red\" gap=\"0\" {...props}>\n      <ChakraStat.DownIndicator />\n      {props.children}\n    </Badge>\n  )\n}\n\nexport const StatRoot = ChakraStat.Root\nexport const StatHelpText = ChakraStat.HelpText\nexport const StatValueUnit = ChakraStat.ValueUnit\n"
  },
  "component": "Stat"
}