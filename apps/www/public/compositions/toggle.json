{
  "type": "composition",
  "npmDependencies": [],
  "fileDependencies": [],
  "id": "toggle",
  "file": {
    "name": "toggle.tsx",
    "content": "\"use client\"\n\nimport type { ButtonProps } from \"@chakra-ui/react\"\nimport {\n  Button,\n  Toggle as ChakraToggle,\n  useToggleContext,\n} from \"@chakra-ui/react\"\nimport { forwardRef } from \"react\"\n\ninterface ToggleProps extends ChakraToggle.RootProps {\n  variant?: keyof typeof variantMap\n  size?: ButtonProps[\"size\"]\n}\n\nconst variantMap = {\n  solid: { on: \"solid\", off: \"outline\" },\n  surface: { on: \"surface\", off: \"outline\" },\n  subtle: { on: \"subtle\", off: \"ghost\" },\n  ghost: { on: \"subtle\", off: \"ghost\" },\n} as const\n\nexport const Toggle = forwardRef<HTMLButtonElement, ToggleProps>(\n  function Toggle(props, ref) {\n    const { variant = \"subtle\", size, children, ...rest } = props\n    const variantConfig = variantMap[variant]\n\n    return (\n      <ChakraToggle.Root asChild {...rest}>\n        <ToggleBaseButton size={size} variant={variantConfig} ref={ref}>\n          {children}\n        </ToggleBaseButton>\n      </ChakraToggle.Root>\n    )\n  },\n)\n\nToggle.displayName = 'Toggle';\n\ninterface ToggleBaseButtonProps extends Omit<ButtonProps, \"variant\"> {\n  variant: Record<\"on\" | \"off\", ButtonProps[\"variant\"]>\n}\n\nconst ToggleBaseButton = forwardRef<HTMLButtonElement, ToggleBaseButtonProps>(\n  function ToggleBaseButton(props, ref) {\n    const toggle = useToggleContext()\n    const { variant, ...rest } = props\n    return (\n      <Button\n        variant={toggle.pressed ? variant.on : variant.off}\n        ref={ref}\n        {...rest}\n      />\n    )\n  },\n)\n\nToggleBaseButton.displayName = 'ToggleBaseButton';\n\nexport const ToggleIndicator = ChakraToggle.Indicator\n"
  },
  "component": "Toggle"
}
