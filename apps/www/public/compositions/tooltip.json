{
  "type": "composition",
  "npmDependencies": [],
  "fileDependencies": [],
  "id": "tooltip",
  "file": {
    "name": "tooltip.tsx",
    "content": "import { Tooltip as ChakraTooltip, Portal } from \"@chakra-ui/react\"\nimport { forwardRef } from \"react\"\n\nexport interface TooltipProps extends ChakraTooltip.RootProps {\n  showArrow?: boolean\n  portalled?: boolean\n  portalRef?: React.RefObject<HTMLElement>\n  content: React.ReactNode\n  contentProps?: ChakraTooltip.ContentProps\n  disabled?: boolean\n}\n\nexport const Tooltip = forwardRef<HTMLDivElement, TooltipProps>(\n  function Tooltip(props, ref) {\n    const {\n      showArrow,\n      children,\n      disabled,\n      portalled,\n      content,\n      contentProps,\n      portalRef,\n      ...rest\n    } = props\n\n    if (disabled) return children\n\n    return (\n      <ChakraTooltip.Root {...rest}>\n        <ChakraTooltip.Trigger asChild>{children}</ChakraTooltip.Trigger>\n        <Portal disabled={!portalled} container={portalRef}>\n          <ChakraTooltip.Positioner>\n            <ChakraTooltip.Content ref={ref} {...contentProps}>\n              {showArrow && (\n                <ChakraTooltip.Arrow>\n                  <ChakraTooltip.ArrowTip />\n                </ChakraTooltip.Arrow>\n              )}\n              {content}\n            </ChakraTooltip.Content>\n          </ChakraTooltip.Positioner>\n        </Portal>\n      </ChakraTooltip.Root>\n    )\n  },\n)\n"
  },
  "component": "Tooltip"
}