{
  "type": "composition",
  "npmDependencies": [],
  "fileDependencies": [
    "compositions/ui/close-button"
  ],
  "id": "combobox",
  "file": {
    "name": "combobox.tsx",
    "content": "\"use client\"\n\nimport { Combobox as ChakraCombobox, Portal } from \"@chakra-ui/react\"\nimport { CloseButton } from \"./close-button\"\nimport * as React from \"react\"\n\ninterface ComboboxControlProps extends ChakraCombobox.ControlProps {\n  clearable?: boolean\n}\n\nexport const ComboboxControl = React.forwardRef<\n  HTMLDivElement,\n  ComboboxControlProps\n>(function ComboboxControl(props, ref) {\n  const { children, clearable, ...rest } = props\n  return (\n    <ChakraCombobox.Control {...rest} ref={ref}>\n      {children}\n      <ChakraCombobox.IndicatorGroup>\n        {clearable && <ComboboxClearTrigger />}\n        <ChakraCombobox.Trigger />\n      </ChakraCombobox.IndicatorGroup>\n    </ChakraCombobox.Control>\n  )\n})\n\nconst ComboboxClearTrigger = React.forwardRef<\n  HTMLButtonElement,\n  ChakraCombobox.ClearTriggerProps\n>(function ComboboxClearTrigger(props, ref) {\n  return (\n    <ChakraCombobox.ClearTrigger asChild {...props} ref={ref}>\n      <CloseButton\n        size=\"xs\"\n        variant=\"plain\"\n        focusVisibleRing=\"inside\"\n        focusRingWidth=\"2px\"\n        pointerEvents=\"auto\"\n      />\n    </ChakraCombobox.ClearTrigger>\n  )\n})\n\ninterface ComboboxContentProps extends ChakraCombobox.ContentProps {\n  portalled?: boolean\n  portalRef?: React.RefObject<HTMLElement | null>\n}\n\nexport const ComboboxContent = React.forwardRef<\n  HTMLDivElement,\n  ComboboxContentProps\n>(function ComboboxContent(props, ref) {\n  const { portalled = true, portalRef, ...rest } = props\n  return (\n    <Portal disabled={!portalled} container={portalRef}>\n      <ChakraCombobox.Positioner>\n        <ChakraCombobox.Content {...rest} ref={ref} />\n      </ChakraCombobox.Positioner>\n    </Portal>\n  )\n})\n\nexport const ComboboxItem = React.forwardRef<\n  HTMLDivElement,\n  ChakraCombobox.ItemProps\n>(function ComboboxItem(props, ref) {\n  const { item, children, ...rest } = props\n  return (\n    <ChakraCombobox.Item key={item.value} item={item} {...rest} ref={ref}>\n      {children}\n      <ChakraCombobox.ItemIndicator />\n    </ChakraCombobox.Item>\n  )\n})\n\nexport const ComboboxRoot = React.forwardRef<\n  HTMLDivElement,\n  ChakraCombobox.RootProps\n>(function ComboboxRoot(props, ref) {\n  return (\n    <ChakraCombobox.Root\n      {...props}\n      ref={ref}\n      positioning={{ sameWidth: true, ...props.positioning }}\n    />\n  )\n}) as ChakraCombobox.RootComponent\n\ninterface ComboboxItemGroupProps extends ChakraCombobox.ItemGroupProps {\n  label: React.ReactNode\n}\n\nexport const ComboboxItemGroup = React.forwardRef<\n  HTMLDivElement,\n  ComboboxItemGroupProps\n>(function ComboboxItemGroup(props, ref) {\n  const { children, label, ...rest } = props\n  return (\n    <ChakraCombobox.ItemGroup {...rest} ref={ref}>\n      <ChakraCombobox.ItemGroupLabel>{label}</ChakraCombobox.ItemGroupLabel>\n      {children}\n    </ChakraCombobox.ItemGroup>\n  )\n})\n\nexport const ComboboxLabel = ChakraCombobox.Label\nexport const ComboboxInput = ChakraCombobox.Input\nexport const ComboboxEmpty = ChakraCombobox.Empty\nexport const ComboboxItemText = ChakraCombobox.ItemText\n"
  },
  "component": "Combobox"
}