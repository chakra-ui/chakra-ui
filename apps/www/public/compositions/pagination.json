{
  "type": "composition",
  "npmDependencies": [
    "react-icons"
  ],
  "fileDependencies": [],
  "id": "pagination",
  "file": {
    "name": "pagination.tsx",
    "content": "\"use client\"\n\nimport type { ButtonProps, TextProps } from \"@chakra-ui/react\"\nimport {\n  Button,\n  Pagination as ChakraPagination,\n  IconButton,\n  Text,\n  createContext,\n  usePaginationContext,\n} from \"@chakra-ui/react\"\nimport { forwardRef, useMemo } from \"react\"\nimport {\n  HiChevronLeft,\n  HiChevronRight,\n  HiMiniEllipsisHorizontal,\n} from \"react-icons/hi2\"\n\ninterface ButtonVariantMap {\n  current: ButtonProps[\"variant\"]\n  default: ButtonProps[\"variant\"]\n  ellipsis: ButtonProps[\"variant\"]\n}\n\ntype PaginationVariant = \"outline\" | \"solid\" | \"subtle\"\n\ninterface ButtonVariantContext {\n  size: ButtonProps[\"size\"]\n  variantMap: ButtonVariantMap\n}\n\nconst [RootPropsProvider, useRootProps] = createContext<ButtonVariantContext>({\n  name: \"RootPropsProvider\",\n})\n\nexport interface PaginationRootProps extends ChakraPagination.RootProps {\n  size?: ButtonProps[\"size\"]\n  variant?: PaginationVariant\n}\n\nconst variantMap: Record<PaginationVariant, ButtonVariantMap> = {\n  outline: { default: \"ghost\", ellipsis: \"plain\", current: \"outline\" },\n  solid: { default: \"outline\", ellipsis: \"outline\", current: \"solid\" },\n  subtle: { default: \"ghost\", ellipsis: \"plain\", current: \"subtle\" },\n}\n\nexport const PaginationRoot = forwardRef<HTMLDivElement, PaginationRootProps>(\n  function PaginationRoot(props, ref) {\n    const { size = \"sm\", variant = \"outline\", ...rest } = props\n    return (\n      <RootPropsProvider value={{ size, variantMap: variantMap[variant] }}>\n        <ChakraPagination.Root ref={ref} {...rest} />\n      </RootPropsProvider>\n    )\n  },\n)\n\nexport const PaginationEllipsis = forwardRef<\n  HTMLDivElement,\n  ChakraPagination.EllipsisProps\n>(function PaginationEllipsis(props, ref) {\n  const { size, variantMap } = useRootProps()\n  return (\n    <ChakraPagination.Ellipsis ref={ref} {...props} asChild>\n      <Button as=\"span\" variant={variantMap.ellipsis} size={size}>\n        <HiMiniEllipsisHorizontal />\n      </Button>\n    </ChakraPagination.Ellipsis>\n  )\n})\n\nexport const PaginationItem = forwardRef<\n  HTMLButtonElement,\n  ChakraPagination.ItemProps\n>(function PaginationItem(props, ref) {\n  const { page } = usePaginationContext()\n  const current = page === props.value\n  const { size, variantMap } = useRootProps()\n  return (\n    <ChakraPagination.Item ref={ref} {...props} asChild>\n      <Button\n        variant={current ? variantMap.current : variantMap.default}\n        size={size}\n      >\n        {props.value}\n      </Button>\n    </ChakraPagination.Item>\n  )\n})\n\nexport const PaginationPrevTrigger = forwardRef<\n  HTMLButtonElement,\n  ChakraPagination.PrevTriggerProps\n>(function PaginationPrevTrigger(props, ref) {\n  const { size, variantMap } = useRootProps()\n  return (\n    <ChakraPagination.PrevTrigger ref={ref} asChild {...props}>\n      <IconButton variant={variantMap.default} size={size}>\n        <HiChevronLeft />\n      </IconButton>\n    </ChakraPagination.PrevTrigger>\n  )\n})\n\nexport const PaginationNextTrigger = forwardRef<\n  HTMLButtonElement,\n  ChakraPagination.NextTriggerProps\n>(function PaginationNextTrigger(props, ref) {\n  const { size, variantMap } = useRootProps()\n  return (\n    <ChakraPagination.NextTrigger ref={ref} asChild {...props}>\n      <IconButton variant={variantMap.default} size={size}>\n        <HiChevronRight />\n      </IconButton>\n    </ChakraPagination.NextTrigger>\n  )\n})\n\nexport const PaginationItems = (props: React.HTMLAttributes<HTMLElement>) => {\n  return (\n    <ChakraPagination.Context>\n      {({ pages }) =>\n        pages.map((page, index) => {\n          return page.type === \"ellipsis\" ? (\n            <PaginationEllipsis key={index} index={index} {...props} />\n          ) : (\n            <PaginationItem\n              key={index}\n              type=\"page\"\n              value={page.value}\n              {...props}\n            />\n          )\n        })\n      }\n    </ChakraPagination.Context>\n  )\n}\n\ninterface PageTextProps extends TextProps {\n  format?: \"short\" | \"compact\" | \"long\"\n}\n\nexport const PaginationPageText = (props: PageTextProps) => {\n  const { format = \"compact\", ...rest } = props\n\n  const { page, pages, pageRange, pageSize, totalPages } =\n    usePaginationContext()\n\n  // TODO: replace woth actual count (when resolved in zag.js)\n  const count = totalPages * pageSize\n\n  const content = useMemo(() => {\n    if (format === \"short\") {\n      return `${page} / ${pages.length}`\n    }\n    if (format === \"compact\") {\n      return `${page} of ${pages.length}`\n    }\n    return `${pageRange.start + 1} - ${pageRange.end} of ${count}`\n  }, [format, page, pages.length, pageRange])\n\n  return (\n    <Text fontWeight=\"medium\" {...rest}>\n      {content}\n    </Text>\n  )\n}\n"
  },
  "component": "Pagination"
}