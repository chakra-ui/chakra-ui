{
  "type": "composition",
  "npmDependencies": [
    "react-icons"
  ],
  "fileDependencies": [],
  "id": "color-picker",
  "file": {
    "name": "color-picker.tsx",
    "content": "import type { IconButtonProps, StackProps } from \"@chakra-ui/react\"\nimport {\n  ColorPicker as ChakraColorPicker,\n  For,\n  IconButton,\n  Portal,\n  Span,\n  Stack,\n  Text,\n  VStack,\n} from \"@chakra-ui/react\"\nimport * as React from \"react\"\nimport { LuCheck, LuPipette } from \"react-icons/lu\"\n\nexport const ColorPickerTrigger = React.forwardRef<\n  HTMLButtonElement,\n  ChakraColorPicker.TriggerProps & { fitContent?: boolean }\n>(function ColorPickerTrigger(props, ref) {\n  const { fitContent, ...rest } = props\n  return (\n    <ChakraColorPicker.Trigger\n      data-fit-content={fitContent || undefined}\n      ref={ref}\n      {...rest}\n    >\n      {props.children || <ChakraColorPicker.ValueSwatch />}\n    </ChakraColorPicker.Trigger>\n  )\n})\n\nexport const ColorPickerInput = React.forwardRef<\n  HTMLInputElement,\n  Omit<ChakraColorPicker.ChannelInputProps, \"channel\">\n>(function ColorHexInput(props, ref) {\n  return <ChakraColorPicker.ChannelInput channel=\"hex\" ref={ref} {...props} />\n})\n\ninterface ColorPickerContentProps extends ChakraColorPicker.ContentProps {\n  portalled?: boolean\n  portalRef?: React.RefObject<HTMLElement | null>\n}\n\nexport const ColorPickerContent = React.forwardRef<\n  HTMLDivElement,\n  ColorPickerContentProps\n>(function ColorPickerContent(props, ref) {\n  const { portalled = true, portalRef, ...rest } = props\n  return (\n    <Portal disabled={!portalled} container={portalRef}>\n      <ChakraColorPicker.Positioner>\n        <ChakraColorPicker.Content ref={ref} {...rest} />\n      </ChakraColorPicker.Positioner>\n    </Portal>\n  )\n})\n\nexport const ColorPickerInlineContent = React.forwardRef<\n  HTMLDivElement,\n  ChakraColorPicker.ContentProps\n>(function ColorPickerInlineContent(props, ref) {\n  return (\n    <ChakraColorPicker.Content\n      animation=\"none\"\n      shadow=\"none\"\n      padding=\"0\"\n      ref={ref}\n      {...props}\n    />\n  )\n})\n\nexport const ColorPickerSliders = React.forwardRef<HTMLDivElement, StackProps>(\n  function ColorPickerSliders(props, ref) {\n    return (\n      <Stack gap=\"1\" flex=\"1\" px=\"1\" ref={ref} {...props}>\n        <ColorPickerChannelSlider channel=\"hue\" />\n        <ColorPickerChannelSlider channel=\"alpha\" />\n      </Stack>\n    )\n  },\n)\n\nexport const ColorPickerArea = React.forwardRef<\n  HTMLDivElement,\n  ChakraColorPicker.AreaProps\n>(function ColorPickerArea(props, ref) {\n  return (\n    <ChakraColorPicker.Area ref={ref} {...props}>\n      <ChakraColorPicker.AreaBackground />\n      <ChakraColorPicker.AreaThumb />\n    </ChakraColorPicker.Area>\n  )\n})\n\nexport const ColorPickerEyeDropper = React.forwardRef<\n  HTMLButtonElement,\n  IconButtonProps\n>(function ColorPickerEyeDropper(props, ref) {\n  return (\n    <ChakraColorPicker.EyeDropperTrigger asChild>\n      <IconButton size=\"xs\" variant=\"outline\" ref={ref} {...props}>\n        <LuPipette />\n      </IconButton>\n    </ChakraColorPicker.EyeDropperTrigger>\n  )\n})\n\nexport const ColorPickerChannelSlider = React.forwardRef<\n  HTMLDivElement,\n  ChakraColorPicker.ChannelSliderProps\n>(function ColorPickerSlider(props, ref) {\n  return (\n    <ChakraColorPicker.ChannelSlider ref={ref} {...props}>\n      <ChakraColorPicker.TransparencyGrid size=\"0.6rem\" />\n      <ChakraColorPicker.ChannelSliderTrack />\n      <ChakraColorPicker.ChannelSliderThumb />\n    </ChakraColorPicker.ChannelSlider>\n  )\n})\n\nexport const ColorPickerSwatchTrigger = React.forwardRef<\n  HTMLButtonElement,\n  ChakraColorPicker.SwatchTriggerProps & {\n    swatchSize?: ChakraColorPicker.SwatchTriggerProps[\"boxSize\"]\n  }\n>(function ColorPickerSwatchTrigger(props, ref) {\n  const { swatchSize, children, ...rest } = props\n  return (\n    <ChakraColorPicker.SwatchTrigger\n      ref={ref}\n      style={{ [\"--color\" as string]: props.value }}\n      {...rest}\n    >\n      {children || (\n        <ChakraColorPicker.Swatch boxSize={swatchSize} value={props.value}>\n          <ChakraColorPicker.SwatchIndicator>\n            <LuCheck />\n          </ChakraColorPicker.SwatchIndicator>\n        </ChakraColorPicker.Swatch>\n      )}\n    </ChakraColorPicker.SwatchTrigger>\n  )\n})\n\nexport const ColorPickerRoot = React.forwardRef<\n  HTMLDivElement,\n  ChakraColorPicker.RootProps\n>(function ColorPickerRoot(props, ref) {\n  return (\n    <ChakraColorPicker.Root ref={ref} {...props}>\n      {props.children}\n      <ChakraColorPicker.HiddenInput tabIndex={-1} />\n    </ChakraColorPicker.Root>\n  )\n})\n\nconst formatMap = {\n  rgba: [\"red\", \"green\", \"blue\", \"alpha\"],\n  hsla: [\"hue\", \"saturation\", \"lightness\", \"alpha\"],\n  hsba: [\"hue\", \"saturation\", \"brightness\", \"alpha\"],\n  hexa: [\"hex\", \"alpha\"],\n} as const\n\nexport const ColorPickerChannelInputs = React.forwardRef<\n  HTMLDivElement,\n  ChakraColorPicker.ViewProps\n>(function ColorPickerChannelInputs(props, ref) {\n  const channels = formatMap[props.format]\n  return (\n    <ChakraColorPicker.View flexDirection=\"row\" ref={ref} {...props}>\n      {channels.map((channel) => (\n        <VStack gap=\"1\" key={channel} flex=\"1\">\n          <ColorPickerChannelInput\n            channel={channel}\n            px=\"0\"\n            height=\"7\"\n            textStyle=\"xs\"\n            textAlign=\"center\"\n          />\n          <Text textStyle=\"xs\" color=\"fg.muted\" fontWeight=\"medium\">\n            {channel.charAt(0).toUpperCase()}\n          </Text>\n        </VStack>\n      ))}\n    </ChakraColorPicker.View>\n  )\n})\n\nexport const ColorPickerChannelSliders = React.forwardRef<\n  HTMLDivElement,\n  ChakraColorPicker.ViewProps\n>(function ColorPickerChannelSliders(props, ref) {\n  const channels = formatMap[props.format]\n  return (\n    <ChakraColorPicker.View {...props} ref={ref}>\n      <For each={channels}>\n        {(channel) => (\n          <Stack gap=\"1\" key={channel}>\n            <Span\n              textStyle=\"xs\"\n              minW=\"5ch\"\n              textTransform=\"capitalize\"\n              fontWeight=\"medium\"\n            >\n              {channel}\n            </Span>\n            <ColorPickerChannelSlider channel={channel} />\n          </Stack>\n        )}\n      </For>\n    </ChakraColorPicker.View>\n  )\n})\n\nexport const ColorPickerLabel = ChakraColorPicker.Label\nexport const ColorPickerControl = ChakraColorPicker.Control\nexport const ColorPickerValueText = ChakraColorPicker.ValueText\nexport const ColorPickerValueSwatch = ChakraColorPicker.ValueSwatch\nexport const ColorPickerChannelInput = ChakraColorPicker.ChannelInput\nexport const ColorPickerSwatchGroup = ChakraColorPicker.SwatchGroup\n"
  },
  "component": "ColorPicker"
}