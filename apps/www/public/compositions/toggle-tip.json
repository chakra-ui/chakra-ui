{
  "type": "composition",
  "npmDependencies": [
    "react-icons"
  ],
  "fileDependencies": [],
  "id": "toggle-tip",
  "file": {
    "name": "toggle-tip.tsx",
    "content": "import { Popover as ChakraPopover, IconButton, Portal } from \"@chakra-ui/react\"\nimport { forwardRef } from \"react\"\nimport { HiOutlineInformationCircle } from \"react-icons/hi\"\n\nexport interface ToggleTipProps extends ChakraPopover.RootProps {\n  showArrow?: boolean\n  portalled?: boolean\n  portalRef?: React.RefObject<HTMLElement>\n  content?: React.ReactNode\n}\n\nexport const ToggleTip = forwardRef<HTMLDivElement, ToggleTipProps>(\n  function ToggleTip(props, ref) {\n    const { showArrow, children, portalled, content, portalRef, ...rest } =\n      props\n\n    return (\n      <ChakraPopover.Root\n        {...rest}\n        positioning={{ ...rest.positioning, gutter: 4 }}\n      >\n        <ChakraPopover.Trigger asChild>{children}</ChakraPopover.Trigger>\n        <Portal disabled={!portalled} container={portalRef}>\n          <ChakraPopover.Positioner>\n            <ChakraPopover.Content\n              width=\"auto\"\n              px=\"2\"\n              py=\"1\"\n              textStyle=\"xs\"\n              rounded=\"sm\"\n              ref={ref}\n            >\n              {showArrow && (\n                <ChakraPopover.Arrow>\n                  <ChakraPopover.ArrowTip />\n                </ChakraPopover.Arrow>\n              )}\n              {content}\n            </ChakraPopover.Content>\n          </ChakraPopover.Positioner>\n        </Portal>\n      </ChakraPopover.Root>\n    )\n  },\n)\n\nexport const InfoTip = (props: Partial<ToggleTipProps>) => {\n  const { children, ...rest } = props\n  return (\n    <ToggleTip content={children} {...rest}>\n      <IconButton variant=\"ghost\" aria-label=\"info\" size=\"xs\">\n        <HiOutlineInformationCircle />\n      </IconButton>\n    </ToggleTip>\n  )\n}\n"
  },
  "component": "ToggleTip"
}