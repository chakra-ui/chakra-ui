{
  "type": "composition",
  "npmDependencies": [],
  "fileDependencies": [],
  "id": "switch",
  "file": {
    "name": "switch.tsx",
    "content": "import { Switch as ChakraSwitch } from \"@chakra-ui/react\"\nimport { forwardRef } from \"react\"\n\nexport interface SwitchProps extends ChakraSwitch.RootProps {\n  inputProps?: React.InputHTMLAttributes<HTMLInputElement>\n  rootRef?: React.Ref<HTMLLabelElement>\n  trackLabel?: { on: React.ReactNode; off: React.ReactNode }\n  thumbLabel?: { on: React.ReactNode; off: React.ReactNode }\n}\n\nexport const Switch = forwardRef<HTMLInputElement, SwitchProps>(\n  function Switch(props, ref) {\n    const { inputProps, children, rootRef, trackLabel, thumbLabel, ...rest } =\n      props\n\n    return (\n      <ChakraSwitch.Root ref={rootRef} {...rest}>\n        <ChakraSwitch.HiddenInput ref={ref} {...inputProps} />\n        <ChakraSwitch.Control>\n          <ChakraSwitch.Thumb>\n            {thumbLabel && (\n              <ChakraSwitch.ThumbIndicator fallback={thumbLabel?.off}>\n                {thumbLabel?.on}\n              </ChakraSwitch.ThumbIndicator>\n            )}\n          </ChakraSwitch.Thumb>\n          {trackLabel && (\n            <ChakraSwitch.Indicator fallback={trackLabel.off}>\n              {trackLabel.on}\n            </ChakraSwitch.Indicator>\n          )}\n        </ChakraSwitch.Control>\n        {children != null && (\n          <ChakraSwitch.Label>{children}</ChakraSwitch.Label>\n        )}\n      </ChakraSwitch.Root>\n    )\n  },\n)\n\nSwitch.displayName = 'Switch';\n"
  },
  "component": "Switch"
}
