{
  "type": "composition",
  "npmDependencies": [],
  "fileDependencies": [],
  "id": "skeleton",
  "file": {
    "name": "skeleton.tsx",
    "content": "import type {\n  SkeletonProps as ChakraSkeletonProps,\n  CircleProps,\n} from \"@chakra-ui/react\"\nimport { Skeleton as ChakraSkeleton, Circle, Stack } from \"@chakra-ui/react\"\nimport { forwardRef } from \"react\"\n\nexport interface SkeletonCircleProps extends ChakraSkeletonProps {\n  size?: CircleProps[\"size\"]\n}\n\nexport const SkeletonCircle = (props: SkeletonCircleProps) => {\n  const { size, ...rest } = props\n  return (\n    <Circle size={size} asChild>\n      <ChakraSkeleton {...rest} />\n    </Circle>\n  )\n}\n\nexport interface SkeletonTextProps extends ChakraSkeletonProps {\n  noOfLines?: number\n}\n\nexport const SkeletonText = forwardRef<HTMLDivElement, SkeletonTextProps>(\n  function SkeletonText(props, ref) {\n    const { noOfLines = 3, gap, ...rest } = props\n    return (\n      <Stack gap={gap} width=\"full\" ref={ref}>\n        {Array.from({ length: noOfLines }).map((_, index) => (\n          <ChakraSkeleton\n            height=\"4\"\n            key={index}\n            {...props}\n            _last={{ maxW: \"80%\" }}\n            {...rest}\n          />\n        ))}\n      </Stack>\n    )\n  },\n)\n\nexport const Skeleton = ChakraSkeleton\n\nSkeleton.displayName = 'Skeleton';\n"
  },
  "component": "Skeleton"
}
