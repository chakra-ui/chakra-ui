{
  "type": "composition",
  "npmDependencies": [
    "react-icons"
  ],
  "fileDependencies": [],
  "id": "file-button",
  "file": {
    "name": "file-button.tsx",
    "content": "\"use client\"\n\nimport {\n  FileUpload as ChakraFileUpload,\n  Icon,\n  IconButton,\n  Stack,\n  Text,\n  VStack,\n} from \"@chakra-ui/react\"\nimport { forwardRef } from \"react\"\nimport { RiDeleteBinLine, RiFileLine, RiUploadLine } from \"react-icons/ri\"\n\nexport interface FileUploadRootProps extends ChakraFileUpload.RootProps {\n  inputProps?: React.InputHTMLAttributes<HTMLInputElement>\n}\n\nexport const FileUploadRoot = forwardRef<HTMLInputElement, FileUploadRootProps>(\n  function FileUploadRoot(props, ref) {\n    const { children, inputProps, ...rest } = props\n    return (\n      <ChakraFileUpload.Root alignItems=\"flex-start\" {...rest}>\n        <ChakraFileUpload.HiddenInput ref={ref} {...inputProps} />\n        {children}\n      </ChakraFileUpload.Root>\n    )\n  },\n)\n\nexport const FileUploadTrigger = ChakraFileUpload.Trigger\n\nexport const FileUploadDropzone = forwardRef<\n  HTMLInputElement,\n  ChakraFileUpload.DropzoneProps\n>(function FileUploadDropzone(props, ref) {\n  const { children, ...rest } = props\n  return (\n    <ChakraFileUpload.Dropzone ref={ref} {...rest}>\n      <Icon fontSize=\"xl\" color=\"fg.subtle\">\n        <RiUploadLine />\n      </Icon>\n      <VStack gap=\"1\" mt=\"1\">\n        <div>\n          Drag and drop here or{\" \"}\n          <ChakraFileUpload.Trigger color=\"blue.solid\">\n            Choose file to upload\n          </ChakraFileUpload.Trigger>\n        </div>\n        <Text fontSize=\"sm\" color=\"fg.subtle\">\n          .png, .jpg up to 5MB\n        </Text>\n      </VStack>\n      {children}\n    </ChakraFileUpload.Dropzone>\n  )\n})\n\ninterface VisibilityProps {\n  showSize?: boolean\n  showDelete?: boolean\n}\n\ninterface FileUploadItemProps extends VisibilityProps {\n  file: File\n}\n\nconst FileUploadItem = (props: FileUploadItemProps) => {\n  const { file, showSize, showDelete } = props\n  return (\n    <ChakraFileUpload.Item file={file}>\n      <ChakraFileUpload.ItemPreview asChild>\n        <Icon fontSize=\"lg\" color=\"fg.subtle\">\n          <RiFileLine />\n        </Icon>\n      </ChakraFileUpload.ItemPreview>\n\n      {showSize ? (\n        <Stack gap=\"0.5\" flex=\"1\" pe=\"4\">\n          <ChakraFileUpload.ItemName lineClamp=\"1\" />\n          <ChakraFileUpload.ItemSizeText />\n        </Stack>\n      ) : (\n        <ChakraFileUpload.ItemName lineClamp=\"1\" flex=\"1\" pe=\"4\" />\n      )}\n\n      {showDelete && (\n        <ChakraFileUpload.ItemDeleteTrigger asChild>\n          <IconButton variant=\"ghost\" color=\"fg.subtle\">\n            <RiDeleteBinLine />\n          </IconButton>\n        </ChakraFileUpload.ItemDeleteTrigger>\n      )}\n    </ChakraFileUpload.Item>\n  )\n}\n\ninterface FileUploadListProps\n  extends VisibilityProps,\n    ChakraFileUpload.ItemGroupProps {}\n\nexport const FileUploadList = (props: FileUploadListProps) => {\n  const { showSize, showDelete, ...rest } = props\n  return (\n    <ChakraFileUpload.Context>\n      {({ acceptedFiles }) => {\n        if (acceptedFiles.length === 0) return null\n        return (\n          <ChakraFileUpload.ItemGroup {...rest}>\n            {acceptedFiles.map((file) => (\n              <FileUploadItem\n                key={file.name}\n                file={file}\n                showSize={showSize}\n                showDelete={showDelete}\n              />\n            ))}\n          </ChakraFileUpload.ItemGroup>\n        )\n      }}\n    </ChakraFileUpload.Context>\n  )\n}\n"
  },
  "component": "FileButton"
}