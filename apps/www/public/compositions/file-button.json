{
  "type": "composition",
  "npmDependencies": ["react-icons"],
  "fileDependencies": [],
  "id": "file-button",
  "file": {
    "name": "file-button.tsx",
    "content": "\"use client\"\n\nimport type { ButtonProps, RecipeProps } from \"@chakra-ui/react\"\nimport {\n  Button,\n  FileUpload as ChakraFileUpload,\n  Icon,\n  IconButton,\n  Span,\n  Text,\n  useFileUploadContext,\n  useRecipe,\n} from \"@chakra-ui/react\"\nimport { forwardRef } from \"react\"\nimport { LuFile, LuUpload, LuX } from \"react-icons/lu\"\n\nexport interface FileUploadRootProps extends ChakraFileUpload.RootProps {\n  inputProps?: React.InputHTMLAttributes<HTMLInputElement>\n}\n\nexport const FileUploadRoot = forwardRef<HTMLInputElement, FileUploadRootProps>(\n  function FileUploadRoot(props, ref) {\n    const { children, inputProps, ...rest } = props\n    return (\n      <ChakraFileUpload.Root {...rest}>\n        <ChakraFileUpload.HiddenInput ref={ref} {...inputProps} />\n        {children}\n      </ChakraFileUpload.Root>\n    )\n  },\n)\n\nFileUploadRoot.displayName = \"FileUploadRoot\";\n\nexport interface FileUploadDropzoneProps\n  extends ChakraFileUpload.DropzoneProps {\n  label: React.ReactNode\n  description?: React.ReactNode\n}\n\nexport const FileUploadDropzone = forwardRef<\n  HTMLInputElement,\n  FileUploadDropzoneProps\n>(function FileUploadDropzone(props, ref) {\n  const { children, label, description, ...rest } = props\n  return (\n    <ChakraFileUpload.Dropzone ref={ref} {...rest}>\n      <Icon fontSize=\"xl\" color=\"fg.muted\">\n        <LuUpload />\n      </Icon>\n      <ChakraFileUpload.DropzoneContent>\n        <div>{label}</div>\n        {description && <Text color=\"fg.muted\">{description}</Text>}\n      </ChakraFileUpload.DropzoneContent>\n      {children}\n    </ChakraFileUpload.Dropzone>\n  )\n})\n\nFileUploadDropzone.displayName = \"FileUploadDropzone\";\n\ninterface VisibilityProps {\n  showSize?: boolean\n  clearable?: boolean\n}\n\ninterface FileUploadItemProps extends VisibilityProps {\n  file: File\n}\n\nconst FileUploadItem = (props: FileUploadItemProps) => {\n  const { file, showSize, clearable } = props\n  return (\n    <ChakraFileUpload.Item file={file}>\n      <ChakraFileUpload.ItemPreview asChild>\n        <Icon fontSize=\"lg\" color=\"fg.muted\">\n          <LuFile />\n        </Icon>\n      </ChakraFileUpload.ItemPreview>\n\n      {showSize ? (\n        <ChakraFileUpload.ItemContent>\n          <ChakraFileUpload.ItemName />\n          <ChakraFileUpload.ItemSizeText />\n        </ChakraFileUpload.ItemContent>\n      ) : (\n        <ChakraFileUpload.ItemName flex=\"1\" />\n      )}\n\n      {clearable && (\n        <ChakraFileUpload.ItemDeleteTrigger asChild>\n          <IconButton variant=\"ghost\" color=\"fg.muted\" size=\"xs\">\n            <LuX />\n          </IconButton>\n        </ChakraFileUpload.ItemDeleteTrigger>\n      )}\n    </ChakraFileUpload.Item>\n  )\n}\n\ninterface FileUploadListProps\n  extends VisibilityProps,\n    ChakraFileUpload.ItemGroupProps {\n  files?: File[]\n}\n\nexport const FileUploadList = forwardRef<HTMLUListElement, FileUploadListProps>(\n  function FileUploadList(props, ref) {\n    const { showSize, clearable, files, ...rest } = props\n\n    const fileUpload = useFileUploadContext()\n    const acceptedFiles = files ?? fileUpload.acceptedFiles\n\n    if (acceptedFiles.length === 0) return null\n\n    return (\n      <ChakraFileUpload.ItemGroup ref={ref} {...rest}>\n        {acceptedFiles.map((file) => (\n          <FileUploadItem\n            key={file.name}\n            file={file}\n            showSize={showSize}\n            clearable={clearable}\n          />\n        ))}\n      </ChakraFileUpload.ItemGroup>\n    )\n  },\n)\n\nFileUploadList.displayName = \"FileUploadList\";\n\ninterface FileInputProps extends Assign<ButtonProps, RecipeProps<\"input\">> {\n  placeholder?: React.ReactNode\n}\n\nexport const FileInput = forwardRef<HTMLButtonElement, FileInputProps>(\n  function FileInput(props, ref) {\n    const inputRecipe = useRecipe({ key: \"input\" })\n    const [recipeProps, restProps] = inputRecipe.splitVariantProps(props)\n    const { placeholder = \"Select file(s)\", ...rest } = restProps\n    return (\n      <ChakraFileUpload.Trigger asChild>\n        <Button\n          unstyled\n          py=\"0\"\n          ref={ref}\n          {...rest}\n          css={[inputRecipe(recipeProps), props.css]}\n        >\n          <ChakraFileUpload.Context>\n            {({ acceptedFiles }) => {\n              if (acceptedFiles.length === 1) {\n                return <span>{acceptedFiles[0].name}</span>\n              }\n              if (acceptedFiles.length > 1) {\n                return <span>{acceptedFiles.length} files</span>\n              }\n              return <Span color=\"fg.subtle\">{placeholder}</Span>\n            }}\n          </ChakraFileUpload.Context>\n        </Button>\n      </ChakraFileUpload.Trigger>\n    )\n  },\n)\n\nFileInput.displayName = \"FileInput\";\n\nexport const FileUploadLabel = ChakraFileUpload.Label\nexport const FileUploadClearTrigger = ChakraFileUpload.ClearTrigger\nexport const FileUploadTrigger = ChakraFileUpload.Trigger\n"
  },
  "component": "FileButton"
}
