{
  "type": "composition",
  "npmDependencies": [
    "next-themes",
    "react-icons"
  ],
  "fileDependencies": [],
  "id": "color-mode",
  "file": {
    "name": "color-mode.tsx",
    "content": "\"use client\"\n\nimport type { IconButtonProps } from \"@chakra-ui/react\"\nimport { ClientOnly, IconButton, Skeleton } from \"@chakra-ui/react\"\nimport { ThemeProvider, useTheme } from \"next-themes\"\nimport type { ThemeProviderProps } from \"next-themes/dist/types\"\nimport { forwardRef } from \"react\"\nimport { LuMoon, LuSun } from \"react-icons/lu\"\n\nexport function ColorModeProvider(props: ThemeProviderProps) {\n  return (\n    <ThemeProvider attribute=\"class\" disableTransitionOnChange {...props} />\n  )\n}\n\nexport function useColorMode() {\n  const { resolvedTheme, setTheme } = useTheme()\n  const toggleColorMode = () => {\n    setTheme(resolvedTheme === \"light\" ? \"dark\" : \"light\")\n  }\n  return {\n    colorMode: resolvedTheme,\n    setColorMode: setTheme,\n    toggleColorMode,\n  }\n}\n\nexport function useColorModeValue<T>(light: T, dark: T) {\n  const { colorMode } = useColorMode()\n  return colorMode === \"light\" ? light : dark\n}\n\nexport function ColorModeIcon() {\n  const { colorMode } = useColorMode()\n  return colorMode === \"light\" ? <LuSun /> : <LuMoon />\n}\n\nexport const ColorModeButton = forwardRef<HTMLButtonElement, IconButtonProps>(\n  function ColorModeButton(props, ref) {\n    const { toggleColorMode } = useColorMode()\n    return (\n      <ClientOnly fallback={<Skeleton boxSize=\"8\" />}>\n        <IconButton\n          onClick={toggleColorMode}\n          variant=\"ghost\"\n          size=\"sm\"\n          ref={ref}\n          {...props}\n          css={{\n            _icon: {\n              width: \"5\",\n              height: \"5\",\n            },\n          }}\n        >\n          <ColorModeIcon />\n        </IconButton>\n      </ClientOnly>\n    )\n  },\n)\n"
  },
  "component": "ColorMode"
}