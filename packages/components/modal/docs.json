{
  "AlertDialog": {
    "isOpen": {
      "type": "boolean",
      "required": true,
      "description": "If `true`, the modal will be open."
    },
    "leastDestructiveRef": {
      "type": "RefObject<FocusableElement>",
      "required": true
    },
    "onClose": {
      "type": "() => void",
      "required": true,
      "description": "Callback invoked to close the modal."
    },
    "allowPinchZoom": {
      "type": "boolean",
      "defaultValue": "false.",
      "required": false,
      "description": "Handle zoom/pinch gestures on iOS devices when scroll locking is enabled."
    },
    "autoFocus": {
      "type": "boolean",
      "defaultValue": true,
      "required": false,
      "description": "If `true`, the modal will autofocus the first enabled and interactive\nelement within the `ModalContent`"
    },
    "blockScrollOnMount": {
      "type": "boolean",
      "defaultValue": true,
      "required": false,
      "description": "If `true`, scrolling will be disabled on the `body` when the modal opens."
    },
    "closeOnEsc": {
      "type": "boolean",
      "defaultValue": true,
      "required": false,
      "description": "If `true`, the modal will close when the `Esc` key is pressed"
    },
    "closeOnOverlayClick": {
      "type": "boolean",
      "defaultValue": true,
      "required": false,
      "description": "If `true`, the modal will close when the overlay is clicked"
    },
    "finalFocusRef": {
      "type": "RefObject<FocusableElement>",
      "required": false,
      "description": "The `ref` of element to receive focus when the modal closes."
    },
    "id": {
      "type": "string",
      "required": false,
      "description": "The `id` of the modal"
    },
    "isCentered": {
      "type": "boolean",
      "defaultValue": false,
      "required": false,
      "description": "If `true`, the modal will be centered on screen."
    },
    "lockFocusAcrossFrames": {
      "type": "boolean",
      "defaultValue": false,
      "required": false,
      "description": "Enables aggressive focus capturing within iframes.\n- If `true`: keep focus in the lock, no matter where lock is active\n- If `false`:  allows focus to move outside of iframe"
    },
    "motionPreset": {
      "type": "MotionPreset",
      "defaultValue": "scale",
      "required": false,
      "description": "The transition that should be used for the modal"
    },
    "onCloseComplete": {
      "type": "() => void",
      "required": false,
      "description": "Fires when all exiting nodes have completed animating out"
    },
    "onEsc": {
      "type": "() => void",
      "required": false,
      "description": "Callback fired when the escape key is pressed and focus is within modal"
    },
    "onOverlayClick": {
      "type": "() => void",
      "required": false,
      "description": "Callback fired when the overlay is clicked."
    },
    "portalProps": {
      "type": "Pick<\n  PortalProps,\n  \"appendToParentPortal\" | \"containerRef\"\n>",
      "required": false,
      "description": "Props to be forwarded to the portal component"
    },
    "preserveScrollBarGap": {
      "type": "boolean",
      "defaultValue": true,
      "required": false,
      "description": "If `true`, a `padding-right` will be applied to the body element\nthat's equal to the width of the scrollbar.\n\nThis can help prevent some unpleasant flickering effect\nand content adjustment when the modal opens"
    },
    "returnFocusOnClose": {
      "type": "boolean",
      "defaultValue": true,
      "required": false,
      "description": "If `true`, the modal will return focus to the element that triggered it when it closes."
    },
    "scrollBehavior": {
      "type": "ScrollBehavior",
      "defaultValue": "outside",
      "required": false,
      "description": "Where scroll behavior should originate.\n- If set to `inside`, scroll only occurs within the `ModalBody`.\n- If set to `outside`, the entire `ModalContent` will scroll within the viewport."
    },
    "trapFocus": {
      "type": "boolean",
      "defaultValue": true,
      "required": false,
      "description": "If `false`, focus lock will be disabled completely.\n\nThis is useful in situations where you still need to interact with\nother surrounding elements.\n\nðŸš¨Warning: We don't recommend doing this because it hurts the\naccessibility of the modal, based on WAI-ARIA specifications."
    },
    "useInert": {
      "type": "boolean",
      "defaultValue": true,
      "required": false,
      "description": "A11y: If `true`, the siblings of the `modal` will have `aria-hidden`\nset to `true` so that screen readers can only see the `modal`.\n\nThis is commonly known as making the other elements **inert**"
    }
  },
  "Drawer": {
    "isOpen": {
      "type": "boolean",
      "required": true,
      "description": "If `true`, the modal will be open."
    },
    "onClose": {
      "type": "() => void",
      "required": true,
      "description": "Callback invoked to close the modal."
    },
    "allowPinchZoom": {
      "type": "boolean",
      "defaultValue": "false.",
      "required": false,
      "description": "Handle zoom/pinch gestures on iOS devices when scroll locking is enabled."
    },
    "autoFocus": {
      "type": "boolean",
      "defaultValue": true,
      "required": false,
      "description": "If `true`, the modal will autofocus the first enabled and interactive\nelement within the `ModalContent`"
    },
    "blockScrollOnMount": {
      "type": "boolean",
      "defaultValue": true,
      "required": false,
      "description": "If `true`, scrolling will be disabled on the `body` when the modal opens."
    },
    "closeOnEsc": {
      "type": "boolean",
      "defaultValue": true,
      "required": false,
      "description": "If `true`, the modal will close when the `Esc` key is pressed"
    },
    "closeOnOverlayClick": {
      "type": "boolean",
      "defaultValue": true,
      "required": false,
      "description": "If `true`, the modal will close when the overlay is clicked"
    },
    "colorScheme": {
      "type": "\"whiteAlpha\" | \"blackAlpha\" | \"gray\" | \"red\" | \"orange\" | \"yellow\" | \"green\" | \"teal\" | \"blue\" | \"cyan\" | \"purple\" | \"pink\" | \"linkedin\" | \"facebook\" | \"messenger\" | \"whatsapp\" | \"twitter\" | \"telegram\"",
      "required": false,
      "description": "The visual color appearance of the component"
    },
    "finalFocusRef": {
      "type": "RefObject<FocusableElement>",
      "required": false,
      "description": "The `ref` of element to receive focus when the modal closes."
    },
    "id": {
      "type": "string",
      "required": false,
      "description": "The `id` of the modal"
    },
    "initialFocusRef": {
      "type": "RefObject<FocusableElement>",
      "required": false,
      "description": "The `ref` of element to receive focus when the modal opens."
    },
    "isFullHeight": {
      "type": "boolean",
      "required": false,
      "description": "If `true` and drawer's placement is `top` or `bottom`,\nthe drawer will occupy the viewport height (100vh)"
    },
    "lockFocusAcrossFrames": {
      "type": "boolean",
      "defaultValue": false,
      "required": false,
      "description": "Enables aggressive focus capturing within iframes.\n- If `true`: keep focus in the lock, no matter where lock is active\n- If `false`:  allows focus to move outside of iframe"
    },
    "onCloseComplete": {
      "type": "() => void",
      "required": false,
      "description": "Fires when all exiting nodes have completed animating out"
    },
    "onEsc": {
      "type": "() => void",
      "required": false,
      "description": "Callback fired when the escape key is pressed and focus is within modal"
    },
    "onOverlayClick": {
      "type": "() => void",
      "required": false,
      "description": "Callback fired when the overlay is clicked."
    },
    "placement": {
      "type": "SlideDirection | LogicalPlacement",
      "defaultValue": "right",
      "required": false,
      "description": "The placement of the drawer"
    },
    "portalProps": {
      "type": "Pick<\n  PortalProps,\n  \"appendToParentPortal\" | \"containerRef\"\n>",
      "required": false,
      "description": "Props to be forwarded to the portal component"
    },
    "preserveScrollBarGap": {
      "type": "boolean",
      "defaultValue": true,
      "required": false,
      "description": "If `true`, a `padding-right` will be applied to the body element\nthat's equal to the width of the scrollbar.\n\nThis can help prevent some unpleasant flickering effect\nand content adjustment when the modal opens"
    },
    "returnFocusOnClose": {
      "type": "boolean",
      "defaultValue": true,
      "required": false,
      "description": "If `true`, the modal will return focus to the element that triggered it when it closes."
    },
    "size": {
      "defaultValue": "xs",
      "type": "\"xs\" | \"sm\" | \"md\" | \"lg\" | \"xl\" | \"full\"",
      "required": false,
      "description": "The size of the Drawer"
    },
    "trapFocus": {
      "type": "boolean",
      "defaultValue": true,
      "required": false,
      "description": "If `false`, focus lock will be disabled completely.\n\nThis is useful in situations where you still need to interact with\nother surrounding elements.\n\nðŸš¨Warning: We don't recommend doing this because it hurts the\naccessibility of the modal, based on WAI-ARIA specifications."
    },
    "useInert": {
      "type": "boolean",
      "defaultValue": true,
      "required": false,
      "description": "A11y: If `true`, the siblings of the `modal` will have `aria-hidden`\nset to `true` so that screen readers can only see the `modal`.\n\nThis is commonly known as making the other elements **inert**"
    },
    "variant": {
      "type": "string",
      "required": false,
      "description": "The variant of the Drawer"
    }
  },
  "DrawerContent": {
    "containerProps": {
      "type": "HTMLChakraProps<\"div\">",
      "required": false,
      "description": "The props to forward to the modal's content wrapper"
    },
    "motionProps": {
      "type": "HTMLMotionProps<\"section\">",
      "required": false,
      "description": "The custom framer-motion transition to use for the modal"
    }
  },
  "Modal": {
    "isOpen": {
      "type": "boolean",
      "required": true,
      "description": "If `true`, the modal will be open."
    },
    "onClose": {
      "type": "() => void",
      "required": true,
      "description": "Callback invoked to close the modal."
    },
    "allowPinchZoom": {
      "type": "boolean",
      "defaultValue": "false.",
      "required": false,
      "description": "Handle zoom/pinch gestures on iOS devices when scroll locking is enabled."
    },
    "autoFocus": {
      "type": "boolean",
      "defaultValue": true,
      "required": false,
      "description": "If `true`, the modal will autofocus the first enabled and interactive\nelement within the `ModalContent`"
    },
    "blockScrollOnMount": {
      "type": "boolean",
      "defaultValue": true,
      "required": false,
      "description": "If `true`, scrolling will be disabled on the `body` when the modal opens."
    },
    "closeOnEsc": {
      "type": "boolean",
      "defaultValue": true,
      "required": false,
      "description": "If `true`, the modal will close when the `Esc` key is pressed"
    },
    "closeOnOverlayClick": {
      "type": "boolean",
      "defaultValue": true,
      "required": false,
      "description": "If `true`, the modal will close when the overlay is clicked"
    },
    "colorScheme": {
      "type": "\"whiteAlpha\" | \"blackAlpha\" | \"gray\" | \"red\" | \"orange\" | \"yellow\" | \"green\" | \"teal\" | \"blue\" | \"cyan\" | \"purple\" | \"pink\" | \"linkedin\" | \"facebook\" | \"messenger\" | \"whatsapp\" | \"twitter\" | \"telegram\"",
      "required": false,
      "description": "The visual color appearance of the component"
    },
    "finalFocusRef": {
      "type": "RefObject<FocusableElement>",
      "required": false,
      "description": "The `ref` of element to receive focus when the modal closes."
    },
    "id": {
      "type": "string",
      "required": false,
      "description": "The `id` of the modal"
    },
    "initialFocusRef": {
      "type": "RefObject<FocusableElement>",
      "required": false,
      "description": "The `ref` of element to receive focus when the modal opens."
    },
    "isCentered": {
      "type": "boolean",
      "defaultValue": false,
      "required": false,
      "description": "If `true`, the modal will be centered on screen."
    },
    "lockFocusAcrossFrames": {
      "type": "boolean",
      "defaultValue": false,
      "required": false,
      "description": "Enables aggressive focus capturing within iframes.\n- If `true`: keep focus in the lock, no matter where lock is active\n- If `false`:  allows focus to move outside of iframe"
    },
    "motionPreset": {
      "type": "MotionPreset",
      "defaultValue": "scale",
      "required": false,
      "description": "The transition that should be used for the modal"
    },
    "onCloseComplete": {
      "type": "() => void",
      "required": false,
      "description": "Fires when all exiting nodes have completed animating out"
    },
    "onEsc": {
      "type": "() => void",
      "required": false,
      "description": "Callback fired when the escape key is pressed and focus is within modal"
    },
    "onOverlayClick": {
      "type": "() => void",
      "required": false,
      "description": "Callback fired when the overlay is clicked."
    },
    "portalProps": {
      "type": "Pick<\n  PortalProps,\n  \"appendToParentPortal\" | \"containerRef\"\n>",
      "required": false,
      "description": "Props to be forwarded to the portal component"
    },
    "preserveScrollBarGap": {
      "type": "boolean",
      "defaultValue": true,
      "required": false,
      "description": "If `true`, a `padding-right` will be applied to the body element\nthat's equal to the width of the scrollbar.\n\nThis can help prevent some unpleasant flickering effect\nand content adjustment when the modal opens"
    },
    "returnFocusOnClose": {
      "type": "boolean",
      "defaultValue": true,
      "required": false,
      "description": "If `true`, the modal will return focus to the element that triggered it when it closes."
    },
    "scrollBehavior": {
      "type": "ScrollBehavior",
      "defaultValue": "outside",
      "required": false,
      "description": "Where scroll behavior should originate.\n- If set to `inside`, scroll only occurs within the `ModalBody`.\n- If set to `outside`, the entire `ModalContent` will scroll within the viewport."
    },
    "size": {
      "defaultValue": "md",
      "type": "\"xs\" | \"sm\" | \"md\" | \"lg\" | \"xl\" | \"2xl\" | \"3xl\" | \"4xl\" | \"5xl\" | \"6xl\" | \"full\"",
      "required": false,
      "description": "The size of the Modal"
    },
    "trapFocus": {
      "type": "boolean",
      "defaultValue": true,
      "required": false,
      "description": "If `false`, focus lock will be disabled completely.\n\nThis is useful in situations where you still need to interact with\nother surrounding elements.\n\nðŸš¨Warning: We don't recommend doing this because it hurts the\naccessibility of the modal, based on WAI-ARIA specifications."
    },
    "useInert": {
      "type": "boolean",
      "defaultValue": true,
      "required": false,
      "description": "A11y: If `true`, the siblings of the `modal` will have `aria-hidden`\nset to `true` so that screen readers can only see the `modal`.\n\nThis is commonly known as making the other elements **inert**"
    },
    "variant": {
      "type": "string",
      "required": false,
      "description": "The variant of the Modal"
    }
  },
  "ModalBody": {},
  "ModalCloseButton": {
    "isDisabled": {
      "type": "boolean",
      "defaultValue": false,
      "required": false,
      "description": "If `true`, the close button will be disabled."
    }
  },
  "ModalContent": {
    "containerProps": {
      "type": "HTMLChakraProps<\"div\">",
      "required": false,
      "description": "The props to forward to the modal's content wrapper"
    },
    "motionProps": {
      "type": "HTMLMotionProps<\"section\">",
      "required": false,
      "description": "The custom framer-motion transition to use for the modal"
    }
  },
  "ModalFooter": {},
  "ModalHeader": {},
  "ModalOverlay": {
    "about": { "type": "string", "required": false },
    "accessKey": { "type": "string", "required": false },
    "aria-activedescendant": { "type": "string", "required": false },
    "aria-atomic": { "type": "Booleanish", "required": false },
    "aria-autocomplete": {
      "type": "\"none\" | \"list\" | \"inline\" | \"both\"",
      "required": false
    },
    "aria-busy": { "type": "Booleanish", "required": false },
    "aria-checked": {
      "type": "boolean | \"true\" | \"false\" | \"mixed\"",
      "required": false
    },
    "aria-colcount": { "type": "number", "required": false },
    "aria-colindex": { "type": "number", "required": false },
    "aria-colspan": { "type": "number", "required": false },
    "aria-controls": { "type": "string", "required": false },
    "aria-current": {
      "type": "type ONLY_FOR_FORMAT =\n  | boolean\n  | \"time\"\n  | \"true\"\n  | \"false\"\n  | \"page\"\n  | \"step\"\n  | \"location\"\n  | \"date\"",
      "required": false
    },
    "aria-describedby": { "type": "string", "required": false },
    "aria-details": { "type": "string", "required": false },
    "aria-disabled": { "type": "Booleanish", "required": false },
    "aria-dropeffect": {
      "type": "\"none\" | \"link\" | \"copy\" | \"execute\" | \"move\" | \"popup\"",
      "required": false
    },
    "aria-errormessage": { "type": "string", "required": false },
    "aria-expanded": { "type": "Booleanish", "required": false },
    "aria-flowto": { "type": "string", "required": false },
    "aria-grabbed": { "type": "Booleanish", "required": false },
    "aria-haspopup": {
      "type": "type ONLY_FOR_FORMAT =\n  | boolean\n  | \"dialog\"\n  | \"menu\"\n  | \"grid\"\n  | \"true\"\n  | \"false\"\n  | \"listbox\"\n  | \"tree\"",
      "required": false
    },
    "aria-hidden": { "type": "Booleanish", "required": false },
    "aria-invalid": {
      "type": "boolean | \"true\" | \"false\" | \"grammar\" | \"spelling\"",
      "required": false
    },
    "aria-keyshortcuts": { "type": "string", "required": false },
    "aria-label": { "type": "string", "required": false },
    "aria-labelledby": { "type": "string", "required": false },
    "aria-level": { "type": "number", "required": false },
    "aria-live": {
      "type": "\"off\" | \"assertive\" | \"polite\"",
      "required": false
    },
    "aria-modal": { "type": "Booleanish", "required": false },
    "aria-multiline": { "type": "Booleanish", "required": false },
    "aria-multiselectable": { "type": "Booleanish", "required": false },
    "aria-orientation": {
      "type": "\"horizontal\" | \"vertical\"",
      "required": false
    },
    "aria-owns": { "type": "string", "required": false },
    "aria-placeholder": { "type": "string", "required": false },
    "aria-posinset": { "type": "number", "required": false },
    "aria-pressed": {
      "type": "boolean | \"true\" | \"false\" | \"mixed\"",
      "required": false
    },
    "aria-readonly": { "type": "Booleanish", "required": false },
    "aria-relevant": {
      "type": "type ONLY_FOR_FORMAT =\n  | \"text\"\n  | \"all\"\n  | \"additions\"\n  | \"additions removals\"\n  | \"additions text\"\n  | \"removals\"\n  | \"removals additions\"\n  | \"removals text\"\n  | \"text additions\"\n  | \"text removals\"",
      "required": false
    },
    "aria-required": { "type": "Booleanish", "required": false },
    "aria-roledescription": { "type": "string", "required": false },
    "aria-rowcount": { "type": "number", "required": false },
    "aria-rowindex": { "type": "number", "required": false },
    "aria-rowspan": { "type": "number", "required": false },
    "aria-selected": { "type": "Booleanish", "required": false },
    "aria-setsize": { "type": "number", "required": false },
    "aria-sort": {
      "type": "\"none\" | \"ascending\" | \"descending\" | \"other\"",
      "required": false
    },
    "aria-valuemax": { "type": "number", "required": false },
    "aria-valuemin": { "type": "number", "required": false },
    "aria-valuenow": { "type": "number", "required": false },
    "aria-valuetext": { "type": "string", "required": false },
    "autoCapitalize": { "type": "string", "required": false },
    "autoCorrect": { "type": "string", "required": false },
    "autoSave": { "type": "string", "required": false },
    "className": { "type": "string", "required": false },
    "contentEditable": {
      "type": "\"inherit\" | Booleanish",
      "required": false
    },
    "contextMenu": { "type": "string", "required": false },
    "dangerouslySetInnerHTML": {
      "type": "{ __html: string }",
      "required": false
    },
    "datatype": { "type": "string", "required": false },
    "defaultChecked": { "type": "boolean", "required": false },
    "defaultValue": {
      "type": "string | number | readonly string[]",
      "required": false
    },
    "dir": { "type": "string", "required": false },
    "draggable": { "type": "Booleanish", "required": false },
    "hidden": { "type": "boolean", "required": false },
    "id": { "type": "string", "required": false },
    "inlist": { "type": "any", "required": false },
    "inputMode": {
      "type": "type ONLY_FOR_FORMAT =\n  | \"none\"\n  | \"text\"\n  | \"search\"\n  | \"tel\"\n  | \"url\"\n  | \"email\"\n  | \"numeric\"\n  | \"decimal\"",
      "required": false
    },
    "is": { "type": "string", "required": false },
    "itemID": { "type": "string", "required": false },
    "itemProp": { "type": "string", "required": false },
    "itemRef": { "type": "string", "required": false },
    "itemScope": { "type": "boolean", "required": false },
    "itemType": { "type": "string", "required": false },
    "lang": { "type": "string", "required": false },
    "motionProps": { "type": "HTMLMotionProps<\"div\">", "required": false },
    "nonce": { "type": "string", "required": false },
    "onAbort": {
      "type": "ReactEventHandler<HTMLDivElement>",
      "required": false
    },
    "onAbortCapture": {
      "type": "ReactEventHandler<HTMLDivElement>",
      "required": false
    },
    "onAnimationEnd": {
      "type": "AnimationEventHandler<HTMLDivElement>",
      "required": false
    },
    "onAnimationEndCapture": {
      "type": "AnimationEventHandler<HTMLDivElement>",
      "required": false
    },
    "onAnimationIteration": {
      "type": "AnimationEventHandler<HTMLDivElement>",
      "required": false
    },
    "onAnimationIterationCapture": {
      "type": "AnimationEventHandler<HTMLDivElement>",
      "required": false
    },
    "onAnimationStartCapture": {
      "type": "AnimationEventHandler<HTMLDivElement>",
      "required": false
    },
    "onAuxClick": {
      "type": "MouseEventHandler<HTMLDivElement>",
      "required": false
    },
    "onAuxClickCapture": {
      "type": "MouseEventHandler<HTMLDivElement>",
      "required": false
    },
    "onBeforeInput": {
      "type": "FormEventHandler<HTMLDivElement>",
      "required": false
    },
    "onBeforeInputCapture": {
      "type": "FormEventHandler<HTMLDivElement>",
      "required": false
    },
    "onBlur": {
      "type": "FocusEventHandler<HTMLDivElement>",
      "required": false
    },
    "onBlurCapture": {
      "type": "FocusEventHandler<HTMLDivElement>",
      "required": false
    },
    "onCanPlay": {
      "type": "ReactEventHandler<HTMLDivElement>",
      "required": false
    },
    "onCanPlayCapture": {
      "type": "ReactEventHandler<HTMLDivElement>",
      "required": false
    },
    "onCanPlayThrough": {
      "type": "ReactEventHandler<HTMLDivElement>",
      "required": false
    },
    "onCanPlayThroughCapture": {
      "type": "ReactEventHandler<HTMLDivElement>",
      "required": false
    },
    "onChange": {
      "type": "FormEventHandler<HTMLDivElement>",
      "required": false
    },
    "onChangeCapture": {
      "type": "FormEventHandler<HTMLDivElement>",
      "required": false
    },
    "onClick": {
      "type": "MouseEventHandler<HTMLDivElement>",
      "required": false
    },
    "onClickCapture": {
      "type": "MouseEventHandler<HTMLDivElement>",
      "required": false
    },
    "onCompositionEnd": {
      "type": "CompositionEventHandler<HTMLDivElement>",
      "required": false
    },
    "onCompositionEndCapture": {
      "type": "CompositionEventHandler<HTMLDivElement>",
      "required": false
    },
    "onCompositionStart": {
      "type": "CompositionEventHandler<HTMLDivElement>",
      "required": false
    },
    "onCompositionStartCapture": {
      "type": "CompositionEventHandler<HTMLDivElement>",
      "required": false
    },
    "onCompositionUpdate": {
      "type": "CompositionEventHandler<HTMLDivElement>",
      "required": false
    },
    "onCompositionUpdateCapture": {
      "type": "CompositionEventHandler<HTMLDivElement>",
      "required": false
    },
    "onContextMenu": {
      "type": "MouseEventHandler<HTMLDivElement>",
      "required": false
    },
    "onContextMenuCapture": {
      "type": "MouseEventHandler<HTMLDivElement>",
      "required": false
    },
    "onCopy": {
      "type": "ClipboardEventHandler<HTMLDivElement>",
      "required": false
    },
    "onCopyCapture": {
      "type": "ClipboardEventHandler<HTMLDivElement>",
      "required": false
    },
    "onCut": {
      "type": "ClipboardEventHandler<HTMLDivElement>",
      "required": false
    },
    "onCutCapture": {
      "type": "ClipboardEventHandler<HTMLDivElement>",
      "required": false
    },
    "onDoubleClick": {
      "type": "MouseEventHandler<HTMLDivElement>",
      "required": false
    },
    "onDoubleClickCapture": {
      "type": "MouseEventHandler<HTMLDivElement>",
      "required": false
    },
    "onDragCapture": {
      "type": "DragEventHandler<HTMLDivElement>",
      "required": false
    },
    "onDragEndCapture": {
      "type": "DragEventHandler<HTMLDivElement>",
      "required": false
    },
    "onDragEnter": {
      "type": "DragEventHandler<HTMLDivElement>",
      "required": false
    },
    "onDragEnterCapture": {
      "type": "DragEventHandler<HTMLDivElement>",
      "required": false
    },
    "onDragExit": {
      "type": "DragEventHandler<HTMLDivElement>",
      "required": false
    },
    "onDragExitCapture": {
      "type": "DragEventHandler<HTMLDivElement>",
      "required": false
    },
    "onDragLeave": {
      "type": "DragEventHandler<HTMLDivElement>",
      "required": false
    },
    "onDragLeaveCapture": {
      "type": "DragEventHandler<HTMLDivElement>",
      "required": false
    },
    "onDragOver": {
      "type": "DragEventHandler<HTMLDivElement>",
      "required": false
    },
    "onDragOverCapture": {
      "type": "DragEventHandler<HTMLDivElement>",
      "required": false
    },
    "onDragStartCapture": {
      "type": "DragEventHandler<HTMLDivElement>",
      "required": false
    },
    "onDrop": { "type": "DragEventHandler<HTMLDivElement>", "required": false },
    "onDropCapture": {
      "type": "DragEventHandler<HTMLDivElement>",
      "required": false
    },
    "onDurationChange": {
      "type": "ReactEventHandler<HTMLDivElement>",
      "required": false
    },
    "onDurationChangeCapture": {
      "type": "ReactEventHandler<HTMLDivElement>",
      "required": false
    },
    "onEmptied": {
      "type": "ReactEventHandler<HTMLDivElement>",
      "required": false
    },
    "onEmptiedCapture": {
      "type": "ReactEventHandler<HTMLDivElement>",
      "required": false
    },
    "onEncrypted": {
      "type": "ReactEventHandler<HTMLDivElement>",
      "required": false
    },
    "onEncryptedCapture": {
      "type": "ReactEventHandler<HTMLDivElement>",
      "required": false
    },
    "onEnded": {
      "type": "ReactEventHandler<HTMLDivElement>",
      "required": false
    },
    "onEndedCapture": {
      "type": "ReactEventHandler<HTMLDivElement>",
      "required": false
    },
    "onError": {
      "type": "ReactEventHandler<HTMLDivElement>",
      "required": false
    },
    "onErrorCapture": {
      "type": "ReactEventHandler<HTMLDivElement>",
      "required": false
    },
    "onFocus": {
      "type": "FocusEventHandler<HTMLDivElement>",
      "required": false
    },
    "onFocusCapture": {
      "type": "FocusEventHandler<HTMLDivElement>",
      "required": false
    },
    "onGotPointerCapture": {
      "type": "PointerEventHandler<HTMLDivElement>",
      "required": false
    },
    "onGotPointerCaptureCapture": {
      "type": "PointerEventHandler<HTMLDivElement>",
      "required": false
    },
    "onInput": {
      "type": "FormEventHandler<HTMLDivElement>",
      "required": false
    },
    "onInputCapture": {
      "type": "FormEventHandler<HTMLDivElement>",
      "required": false
    },
    "onInvalid": {
      "type": "FormEventHandler<HTMLDivElement>",
      "required": false
    },
    "onInvalidCapture": {
      "type": "FormEventHandler<HTMLDivElement>",
      "required": false
    },
    "onKeyDown": {
      "type": "KeyboardEventHandler<HTMLDivElement>",
      "required": false
    },
    "onKeyDownCapture": {
      "type": "KeyboardEventHandler<HTMLDivElement>",
      "required": false
    },
    "onKeyPress": {
      "type": "KeyboardEventHandler<HTMLDivElement>",
      "required": false
    },
    "onKeyPressCapture": {
      "type": "KeyboardEventHandler<HTMLDivElement>",
      "required": false
    },
    "onKeyUp": {
      "type": "KeyboardEventHandler<HTMLDivElement>",
      "required": false
    },
    "onKeyUpCapture": {
      "type": "KeyboardEventHandler<HTMLDivElement>",
      "required": false
    },
    "onLoad": {
      "type": "ReactEventHandler<HTMLDivElement>",
      "required": false
    },
    "onLoadCapture": {
      "type": "ReactEventHandler<HTMLDivElement>",
      "required": false
    },
    "onLoadedData": {
      "type": "ReactEventHandler<HTMLDivElement>",
      "required": false
    },
    "onLoadedDataCapture": {
      "type": "ReactEventHandler<HTMLDivElement>",
      "required": false
    },
    "onLoadedMetadata": {
      "type": "ReactEventHandler<HTMLDivElement>",
      "required": false
    },
    "onLoadedMetadataCapture": {
      "type": "ReactEventHandler<HTMLDivElement>",
      "required": false
    },
    "onLoadStart": {
      "type": "ReactEventHandler<HTMLDivElement>",
      "required": false
    },
    "onLoadStartCapture": {
      "type": "ReactEventHandler<HTMLDivElement>",
      "required": false
    },
    "onLostPointerCapture": {
      "type": "PointerEventHandler<HTMLDivElement>",
      "required": false
    },
    "onLostPointerCaptureCapture": {
      "type": "PointerEventHandler<HTMLDivElement>",
      "required": false
    },
    "onMouseDown": {
      "type": "MouseEventHandler<HTMLDivElement>",
      "required": false
    },
    "onMouseDownCapture": {
      "type": "MouseEventHandler<HTMLDivElement>",
      "required": false
    },
    "onMouseEnter": {
      "type": "MouseEventHandler<HTMLDivElement>",
      "required": false
    },
    "onMouseLeave": {
      "type": "MouseEventHandler<HTMLDivElement>",
      "required": false
    },
    "onMouseMove": {
      "type": "MouseEventHandler<HTMLDivElement>",
      "required": false
    },
    "onMouseMoveCapture": {
      "type": "MouseEventHandler<HTMLDivElement>",
      "required": false
    },
    "onMouseOut": {
      "type": "MouseEventHandler<HTMLDivElement>",
      "required": false
    },
    "onMouseOutCapture": {
      "type": "MouseEventHandler<HTMLDivElement>",
      "required": false
    },
    "onMouseOver": {
      "type": "MouseEventHandler<HTMLDivElement>",
      "required": false
    },
    "onMouseOverCapture": {
      "type": "MouseEventHandler<HTMLDivElement>",
      "required": false
    },
    "onMouseUp": {
      "type": "MouseEventHandler<HTMLDivElement>",
      "required": false
    },
    "onMouseUpCapture": {
      "type": "MouseEventHandler<HTMLDivElement>",
      "required": false
    },
    "onPaste": {
      "type": "ClipboardEventHandler<HTMLDivElement>",
      "required": false
    },
    "onPasteCapture": {
      "type": "ClipboardEventHandler<HTMLDivElement>",
      "required": false
    },
    "onPause": {
      "type": "ReactEventHandler<HTMLDivElement>",
      "required": false
    },
    "onPauseCapture": {
      "type": "ReactEventHandler<HTMLDivElement>",
      "required": false
    },
    "onPlay": {
      "type": "ReactEventHandler<HTMLDivElement>",
      "required": false
    },
    "onPlayCapture": {
      "type": "ReactEventHandler<HTMLDivElement>",
      "required": false
    },
    "onPlaying": {
      "type": "ReactEventHandler<HTMLDivElement>",
      "required": false
    },
    "onPlayingCapture": {
      "type": "ReactEventHandler<HTMLDivElement>",
      "required": false
    },
    "onPointerCancel": {
      "type": "PointerEventHandler<HTMLDivElement>",
      "required": false
    },
    "onPointerCancelCapture": {
      "type": "PointerEventHandler<HTMLDivElement>",
      "required": false
    },
    "onPointerDown": {
      "type": "PointerEventHandler<HTMLDivElement>",
      "required": false
    },
    "onPointerDownCapture": {
      "type": "PointerEventHandler<HTMLDivElement>",
      "required": false
    },
    "onPointerEnter": {
      "type": "PointerEventHandler<HTMLDivElement>",
      "required": false
    },
    "onPointerEnterCapture": {
      "type": "PointerEventHandler<HTMLDivElement>",
      "required": false
    },
    "onPointerLeave": {
      "type": "PointerEventHandler<HTMLDivElement>",
      "required": false
    },
    "onPointerLeaveCapture": {
      "type": "PointerEventHandler<HTMLDivElement>",
      "required": false
    },
    "onPointerMove": {
      "type": "PointerEventHandler<HTMLDivElement>",
      "required": false
    },
    "onPointerMoveCapture": {
      "type": "PointerEventHandler<HTMLDivElement>",
      "required": false
    },
    "onPointerOut": {
      "type": "PointerEventHandler<HTMLDivElement>",
      "required": false
    },
    "onPointerOutCapture": {
      "type": "PointerEventHandler<HTMLDivElement>",
      "required": false
    },
    "onPointerOver": {
      "type": "PointerEventHandler<HTMLDivElement>",
      "required": false
    },
    "onPointerOverCapture": {
      "type": "PointerEventHandler<HTMLDivElement>",
      "required": false
    },
    "onPointerUp": {
      "type": "PointerEventHandler<HTMLDivElement>",
      "required": false
    },
    "onPointerUpCapture": {
      "type": "PointerEventHandler<HTMLDivElement>",
      "required": false
    },
    "onProgress": {
      "type": "ReactEventHandler<HTMLDivElement>",
      "required": false
    },
    "onProgressCapture": {
      "type": "ReactEventHandler<HTMLDivElement>",
      "required": false
    },
    "onRateChange": {
      "type": "ReactEventHandler<HTMLDivElement>",
      "required": false
    },
    "onRateChangeCapture": {
      "type": "ReactEventHandler<HTMLDivElement>",
      "required": false
    },
    "onReset": {
      "type": "FormEventHandler<HTMLDivElement>",
      "required": false
    },
    "onResetCapture": {
      "type": "FormEventHandler<HTMLDivElement>",
      "required": false
    },
    "onResize": {
      "type": "ReactEventHandler<HTMLDivElement>",
      "required": false
    },
    "onResizeCapture": {
      "type": "ReactEventHandler<HTMLDivElement>",
      "required": false
    },
    "onScroll": { "type": "UIEventHandler<HTMLDivElement>", "required": false },
    "onScrollCapture": {
      "type": "UIEventHandler<HTMLDivElement>",
      "required": false
    },
    "onSeeked": {
      "type": "ReactEventHandler<HTMLDivElement>",
      "required": false
    },
    "onSeekedCapture": {
      "type": "ReactEventHandler<HTMLDivElement>",
      "required": false
    },
    "onSeeking": {
      "type": "ReactEventHandler<HTMLDivElement>",
      "required": false
    },
    "onSeekingCapture": {
      "type": "ReactEventHandler<HTMLDivElement>",
      "required": false
    },
    "onSelect": {
      "type": "ReactEventHandler<HTMLDivElement>",
      "required": false
    },
    "onSelectCapture": {
      "type": "ReactEventHandler<HTMLDivElement>",
      "required": false
    },
    "onStalled": {
      "type": "ReactEventHandler<HTMLDivElement>",
      "required": false
    },
    "onStalledCapture": {
      "type": "ReactEventHandler<HTMLDivElement>",
      "required": false
    },
    "onSubmit": {
      "type": "FormEventHandler<HTMLDivElement>",
      "required": false
    },
    "onSubmitCapture": {
      "type": "FormEventHandler<HTMLDivElement>",
      "required": false
    },
    "onSuspend": {
      "type": "ReactEventHandler<HTMLDivElement>",
      "required": false
    },
    "onSuspendCapture": {
      "type": "ReactEventHandler<HTMLDivElement>",
      "required": false
    },
    "onTimeUpdate": {
      "type": "ReactEventHandler<HTMLDivElement>",
      "required": false
    },
    "onTimeUpdateCapture": {
      "type": "ReactEventHandler<HTMLDivElement>",
      "required": false
    },
    "onTouchCancel": {
      "type": "TouchEventHandler<HTMLDivElement>",
      "required": false
    },
    "onTouchCancelCapture": {
      "type": "TouchEventHandler<HTMLDivElement>",
      "required": false
    },
    "onTouchEnd": {
      "type": "TouchEventHandler<HTMLDivElement>",
      "required": false
    },
    "onTouchEndCapture": {
      "type": "TouchEventHandler<HTMLDivElement>",
      "required": false
    },
    "onTouchMove": {
      "type": "TouchEventHandler<HTMLDivElement>",
      "required": false
    },
    "onTouchMoveCapture": {
      "type": "TouchEventHandler<HTMLDivElement>",
      "required": false
    },
    "onTouchStart": {
      "type": "TouchEventHandler<HTMLDivElement>",
      "required": false
    },
    "onTouchStartCapture": {
      "type": "TouchEventHandler<HTMLDivElement>",
      "required": false
    },
    "onTransitionEnd": {
      "type": "TransitionEventHandler<HTMLDivElement>",
      "required": false
    },
    "onTransitionEndCapture": {
      "type": "TransitionEventHandler<HTMLDivElement>",
      "required": false
    },
    "onVolumeChange": {
      "type": "ReactEventHandler<HTMLDivElement>",
      "required": false
    },
    "onVolumeChangeCapture": {
      "type": "ReactEventHandler<HTMLDivElement>",
      "required": false
    },
    "onWaiting": {
      "type": "ReactEventHandler<HTMLDivElement>",
      "required": false
    },
    "onWaitingCapture": {
      "type": "ReactEventHandler<HTMLDivElement>",
      "required": false
    },
    "onWheel": {
      "type": "WheelEventHandler<HTMLDivElement>",
      "required": false
    },
    "onWheelCapture": {
      "type": "WheelEventHandler<HTMLDivElement>",
      "required": false
    },
    "placeholder": { "type": "string", "required": false },
    "prefix": { "type": "string", "required": false },
    "property": { "type": "string", "required": false },
    "radioGroup": { "type": "string", "required": false },
    "resource": { "type": "string", "required": false },
    "results": { "type": "number", "required": false },
    "role": { "type": "AriaRole", "required": false },
    "security": { "type": "string", "required": false },
    "slot": { "type": "string", "required": false },
    "spellCheck": { "type": "Booleanish", "required": false },
    "suppressContentEditableWarning": { "type": "boolean", "required": false },
    "suppressHydrationWarning": { "type": "boolean", "required": false },
    "tabIndex": { "type": "number", "required": false },
    "title": { "type": "string", "required": false },
    "translate": { "type": "\"yes\" | \"no\"", "required": false },
    "typeof": { "type": "string", "required": false },
    "unselectable": { "type": "\"on\" | \"off\"", "required": false },
    "vocab": { "type": "string", "required": false }
  },
  "UseModal": {
    "isOpen": {
      "type": "boolean",
      "required": true,
      "description": "If `true`, the modal will be open."
    },
    "onClose": {
      "type": "() => void",
      "required": true,
      "description": "Callback invoked to close the modal."
    },
    "closeOnEsc": {
      "type": "boolean",
      "defaultValue": true,
      "required": false,
      "description": "If `true`, the modal will close when the `Esc` key is pressed"
    },
    "closeOnOverlayClick": {
      "type": "boolean",
      "defaultValue": true,
      "required": false,
      "description": "If `true`, the modal will close when the overlay is clicked"
    },
    "id": {
      "type": "string",
      "required": false,
      "description": "The `id` of the modal"
    },
    "onEsc": {
      "type": "() => void",
      "required": false,
      "description": "Callback fired when the escape key is pressed and focus is within modal"
    },
    "onOverlayClick": {
      "type": "() => void",
      "required": false,
      "description": "Callback fired when the overlay is clicked."
    },
    "useInert": {
      "type": "boolean",
      "defaultValue": true,
      "required": false,
      "description": "A11y: If `true`, the siblings of the `modal` will have `aria-hidden`\nset to `true` so that screen readers can only see the `modal`.\n\nThis is commonly known as making the other elements **inert**"
    }
  }
}
